<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Alex Carney</title>
    <link>https://alcarney.me/notes/</link>
    <description>Recent content in Notes on Alex Carney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://alcarney.me/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloning Git Repos with Submodules</title>
      <link>https://alcarney.me/notes/git-clone-submodules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/git-clone-submodules/</guid>
      <description>To clone a repo that contains submodules we can run the following command
$ git clone --recurse-submodules &amp;lt;repo-url&amp;gt; Or if you&amp;rsquo;ve already cloned a repo only to later discover that it contained submodules
$ git submodule update --init --recursive </description>
    </item>
    
    <item>
      <title>Custom Jupyter Kernels</title>
      <link>https://alcarney.me/notes/custom-jupyter-kernels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/custom-jupyter-kernels/</guid>
      <description>It&amp;rsquo;s possible to create custom Python environments for use within a Jupyter notebook without having to run a jupyter server from each of them. The following steps will allow you to have a single jupyter server running and have it use a variety of Python environments in its notebooks
 Create a virtualenv and install any packages that you want available pip install ipykernel ipykernel install --user --name &amp;lt;envname&amp;gt; --display-name &amp;lt;display name&amp;gt;  Then the new environment should become available in the Change kernel menu</description>
    </item>
    
    <item>
      <title>Deserialising Abstract Classes with Jackson</title>
      <link>https://alcarney.me/notes/deserialising-abstract-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/deserialising-abstract-classes/</guid>
      <description>Jackson can automatically detect the relevant abstract class to initialise when parsing some JSON if you give it a little bit of help. There are multiple methods Jackson can use to detect and indicate the class it should use but the method I have chosen is to tell it to look for a type field.
Consider the following json snippets
{ &amp;#34;id&amp;#34;: &amp;#34;123&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;name&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Alex&amp;#34; } { &amp;#34;id&amp;#34;: &amp;#34;345&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;value&amp;#34;, &amp;#34;value&amp;#34;: 123.</description>
    </item>
    
    <item>
      <title>Enabling Touchpad Gestures on Linux</title>
      <link>https://alcarney.me/notes/touchpad-gestures-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/touchpad-gestures-linux/</guid>
      <description>Turns out this was rather easy thanks to libinput-gestures
Installation Using arch linux this process was made nice and simple thanks to the AUR package
$ yaourt -S libinput-gestures Configuration libinput-gestures comes with its own configuration file /etc/libinput-gestures.conf that&amp;rsquo;s well documented and has a straightforward syntax. Below is my current configuration
gesture swipe up xdotool key ctrl+F9 gesture swipe down xdotool key alt+space gesture swipe left _internal ws_down gesture swipe right _internal ws_up Each gesture works with either 3 or 4 fingers and executes the command on the right when triggered.</description>
    </item>
    
    <item>
      <title>Installing npm packages globally without root</title>
      <link>https://alcarney.me/notes/npm-global-user-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/npm-global-user-install/</guid>
      <description>  Create a folder for global packages to be install into
$ mdkir &amp;#34;${HOME}/.npm-packages&amp;#34;    Tell npm to use this folder
$ npm config set prefix &amp;#34;${HOME}/.npm-packages&amp;#34;    Add the corresponding ${HOME}/.npm-packages/bin folder to your PATH
  </description>
    </item>
    
    <item>
      <title>Kubernetes Focused Prometheus Queries</title>
      <link>https://alcarney.me/notes/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/prometheus/</guid>
      <description>Queries A collection of queries for inspecting data stored in a Prometheus server. Most of these queries should work in vanilla prometheus however a small number may contain a few &amp;ldquo;grafana-isms&amp;rdquo;
The following variables are used as examples
   Name Description     $interval A time interval e.g. 1m. 5m, 1h etc.    Nodes Queries relating to the state of the &amp;ldquo;physical&amp;rdquo; hardware that is hosting the cluster</description>
    </item>
    
    <item>
      <title>Python 2.x Gotchas</title>
      <link>https://alcarney.me/notes/python-2-gotchas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/python-2-gotchas/</guid>
      <description>While at the time of writing (May 2019) the death of Python 2 is just around the corner since I&amp;rsquo;m working in an enterprise environment I&amp;rsquo;m sure I will be dealing with Python 2.x code for some time to come. To that end here are some gotchas to keep in mind.
Missing Features In the 10+ years since Python 3&amp;rsquo;s release it&amp;rsquo;s not surprising that it has accumlated a large list of features that simply don&amp;rsquo;t exist in Python 2.</description>
    </item>
    
    <item>
      <title>Python 3.x Gotchas</title>
      <link>https://alcarney.me/notes/python-3-gotchas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alcarney.me/notes/python-3-gotchas/</guid>
      <description>Beware pathlib on 3.5 While pathlib exists in Python 3.5, it&amp;rsquo;s not fully integrated yet. Passing a pathlib.Path object to the built-in open method will result in a surprising error
TypeError: invalid file: PosixPath(&amp;#39;path/to/file.txt&amp;#39;) In this situation it&amp;rsquo;s better to call the path&amp;rsquo;s open() method instead.</description>
    </item>
    
  </channel>
</rss>
