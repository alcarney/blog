<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codes on Alex Carney</title>
    <link>https://www.alcarney.me/code/</link>
    <description>Recent content in Codes on Alex Carney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.alcarney.me/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ccalc</title>
      <link>https://www.alcarney.me/code/ccalc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/code/ccalc/</guid>
      <description>A CPython extension that embeds the simple-ast program into Python.
&amp;gt;&amp;gt;&amp;gt; import ccalc &amp;gt;&amp;gt;&amp;gt; expression = (ccalc.Literal(1) + 2) * 3 &amp;gt;&amp;gt;&amp;gt; expression Multiply&amp;lt;Plus&amp;lt;Literal&amp;lt;1.0&amp;gt;, Literal&amp;lt;2.0&amp;gt;&amp;gt;, Literal&amp;lt;3.0&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; ccalc.eval_ast(expression) 9.0 Building It&amp;rsquo;s probably worth creating a virtual environment to work in
 .cli-command::before { content: &#34;$ &#34;; }    python -m venv .env   Assuming you have a C compiler available, building the extension is as easy as running the following command</description>
    </item>
    
    <item>
      <title>Simple AST</title>
      <link>https://www.alcarney.me/code/simple-ast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/code/simple-ast/</guid>
      <description>A simple C program that can construct and evaluate a simple Abstract Syntax Tree (AST). The AST represents a toy &amp;ldquo;programming language&amp;rdquo; that only knows how to add and multiply floating point numbers together.
$ ./simple-ast * + 1.00 2.00 3.00 Example 1: 9.00 + 1.00 * 2.00 3.00 Example 2: 7.00 Building Having no real dependencies beyond the standard library this program can be compiled with just a C compiler</description>
    </item>
    
  </channel>
</rss>
