#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./blog/
#+HUGO_CODE_FENCE: nil

* TODO Post on Sphinx referencing
* TODO Post on python namespace packages
* TODO Post on python entry points.
* DONE TIL: Python has a ~cmd~ module                  :stylo:python:til:cli:
:PROPERTIES:
:EXPORT_DATE: 2019-01-05
:EXPORT_FILE_NAME: til-python-cmd
:EXPORT_DESCRIPTION: Today I learned about Pyton's cmd module
:END:

Today I Learned that Python's standard library has a [[https://docs.python.org/3/library/cmd.html][cmd]] module and it is /awesome!/

#+CAPTION: Interactive program using the cmd module.
[[/images/cmd_python.gif][file:/images/cmd_python.gif]]

The [[https://docs.python.org/3/library/cmd.html][cmd]] module contains a single class called ~Cmd~ which handles all the
details of creating an application similar to Python's REPL. All you need to do
is to provide some command definitions and the ~Cmd~ class will handle the rest.

In an attempt to demonstrate why I think this is so cool I'm going to walk
through the process of building the application you see in the screencast above.

The example application we're going to create is a very basic REPL for a passion
project of mine called [[https://github.com/alcarney/stylo][stylo]]. Stylo is a Python library that allows you to draw
images and create animations using code and some mathematics. The application
will expose some of the basic shapes available and for the "Print" part of the
[[https://en.wikipedia.org/wiki/Read%25E2%2580%2593eval%25E2%2580%2593print_loop][REPL]] it will show a preview of your image.

My main focus for this post is the ~cmd~ module which means I'm not going to go
into any of the specifics of ~stylo~ or how to use it. If you want to know more
about it I will point you in the direction of the [[https://stylo.readthedocs.io/][documentation]]
(under construction :construction:) and the [[https://alcarney.github.io/stylo-doodles][example gallery]]

** Setup

To start with we're going to create a virtual environment and install ~stylo~
into it. This will also install ~matplotlib~ which we will be using later on.
I'm using Python 3.7 but this application should work on all versions of Python
â‰¥ 3.5.

#+BEGIN_SRC sh
$ python -m venv env
$ source env/bin/activate
(env) $ pip install stylo
#+END_SRC

*Note:* The ~cmd~ module is available for [[https://docs.python.org/2.7/library/cmd.html][even older]] versions of
Python. However we are limited by ~stylo~ which only supports Python 3.5+

With the dependencies out of the way we can create a file called ~stylo-cmd.py~
and start writing some code!

#+BEGIN_SRC python
import cmd

class StyloPrompt(cmd.Cmd):
    pass

if __name__ == '__main__':
    prompt = StyloPrompt()
    prompt.cmdloop()
#+END_SRC

This is the bare minimum required to get something we can start playing with.
If you were to run ~python stylo-cmd.py~ you would see the following prompt
which comes with a single built-in command ~help~.

#+BEGIN_SRC
(Cmd) help

Documented commands (type help <topic>):
========================================
help
#+END_SRC

~Ctrl-C~ will exit the application. Obviously this is pretty useless right now
so let's look at adding in some commands of our own.

**  Adding Commands

Any method on our ~StyloPrompt~ class with a name of the form ~do_*~ is
considered a command, with the command name given by whatever is after the
underscore.  To get ourselves warmed up let's add two commands ~reset~ and
~save~ which will allow us to create a fresh image and save it to a file.

#+BEGIN_SRC python
from stylo.image import LayeredImage

class StyloPrompt(cmd.Cmd):

    def __init__(self):
        super().__init__()
        self.image = LayeredImage()

    def do_reset(self, args):
        self.image = LayeredImage()

    def do_save(self, args):
        width, height, filename = args.split(" ")

        width = int(width)
        height = int(height)

        self.image(width, height, filename=filename)
#+END_SRC

As you can see each command receives its arguments as a single string and
it is up to the method to handle them - including conversions to appropriate
data types as is the case with the ~width~ and ~height~ arguments. For the sake
of being brief proper error handling has been omitted.

Now if we were to fire up the application we would be able to produce an image!

#+BEGIN_SRC
(Cmd) reset
(Cmd) save 1920 1080 image.png
#+END_SRC

Of course this image is currently empty so next we should add the ability for
the user to place shapes on the image. We'll create two more commands ~circle~
and ~square~.

#+BEGIN_SRC python
from stylo.color import FillColor
from stylo.shape import Circle, Square

class StyloPrompt(cmd.Cmd):
    ...

    def do_circle(self, args):
        x, y, r, color = args.split(" ")

        circle = Circle(float(x), float(y), float(r), fill=True)
        self.image.add_layer(circle, FillColor(color))

    def do_square(self, args):
        x, y, size, color = args.split(" ")

        square = Square(float(x), float(y), float(size))
        self.image.add_layer(square, FillColor(color))
#+END_SRC

Now when we use the application we can create something a bit more
interesting than a snowman in a blizzard! :smile:

#+CAPTION: Number 3 on a dice
[[/images/dice.png][file:/images/dice.png]]

#+BEGIN_SRC
(Cmd) square 0 0 1.75 000000
(Cmd) circle 0 0 0.3 ffffff
(Cmd) circle -0.5 0.5 0.3 ffffff
(Cmd) circle 0.5 -0.5 0.3 ffffff
(Cmd) save 1920 1080 image.png
#+END_SRC

** Getting Help

Now that we have a few commands available we need to tell users how they can be
used. If we were to use the ~help~ command we would see something like the
following.

#+BEGIN_SRC
(Cmd) help

Documented commands (type help <topic>):
========================================
help

Undocumented commands:
======================
circle reset save square
#+END_SRC

Not very helpful.

Thankfully the default help system doesn't require much to get started, all we
have to do is add docstrings to our ~do_*~ methods!

#+BEGIN_SRC python
def do_circle(self, args):
    """usage: circle <x> <y> <r> <color>

    This command will draw a circle centered at the coordinates (<x>, <y>)
    with radius given by <r>. The <color> argument is a 6 digit hex
    representing a color in RGB format.
    """
    ...
#+END_SRC

Now if we were to run ~help circle~

#+BEGIN_SRC
(Cmd) help circle
circle <x> <y> <r> <color>

        This command will draw a circle centered at the coordinates (<x>, <y>)
        with radius given by <r>. The <color> argument is a 6 digit hex
        representing a color in RGB format.
#+END_SRC

Much better :smile:

** Giving Feedback

Right now our program is... ok. The user can type in a few commands and they
can create some images, but it's not much of a step up from using the library
as they still have to wait until they have saved their image before
they can view it. Add in the fact that our program isn't that flexible they may
as well be using the library directly.

If only there was some way we could show the user their image as they build it
up a command at a time...

Enter ~postcmd~! This handy method is called each time our program has
processed a command - we can use this to redraw the image each time.
Then "all" we have to do if find a way to display the current image to the user.

After some searching and head scratching I was able to come up with the
following ~matplotlib~ incantation to add our image to a figure and display it.

#+BEGIN_SRC python
...
import matplotlib.pyplot as plt

class StyloPrompt(cmd.Cmd):

    def __init__(self):
        ...

        self.fig, self.ax = plt.subplots(1)
        self.ax.get_xaxis().set_visible(False)
        self.ax.get_yaxis().set_visible(False)

        self.update_image()
    ...

    def postcmd(self, stop, line):

        if stop:
            return True

        self.update_image()

    def update_image(self):

        # Re-render the image
        self.image(1920, 1080)

        # Update the preview
        self.ax.imshow(image.data)
        self.fig.show()
#+END_SRC

I won't go into too much detail here but I will point out a few things.

- The ~stop~ argument to ~postcmd~ indicates whether the previous command
  wanted to exit the program (by returning ~True~). We have the option of
  overriding that by not returning ~True~. But in our case we will just pass
  the message on.

- Matplotlib is smart enough to use an existing window when calling ~show()~ on
  a figure so all we have to do is update the plot in the axis object

- In the ~__init__~ method we are disabling the scale on the axis so that the
  user doesn't see something that looks like a graph.

** Finishing Touches

With most of the functionality out of the way we can look at tweaking
some things to make the overall experience nicer.

*** Exiting the Program

So far we don't have a clean way to close the program, we can hit ~Ctrl-C~ to
terminate the script but it results in Python printing a traceback and it looks
like an error in our program more than anything.

Instead we can override the ~default~ method on our class. This method is
called whenever the program doesn't recogise the user's input as a valid
command and we can use it to look at all of the user's input (not just the
~args~) and decide what to do with it.

In this case we will say that the program will exit whenever the user types a
~q~ or we receive an ~EOF~ character (~Ctrl-D~).

#+BEGIN_SRC python
class StyloPrompt(cmd.Cmd):
    ...

    def default(self, line):
        if line == "q" or line == "EOF":
            return True

        return super().default(line)
#+END_SRC

*** Changing the Prompt

We can change the default prompt ~(Cmd)~ by setting the ~prompt~ attribute on
our class.

#+BEGIN_SRC python
class StyloPromt(Cmd):
    prompt = "-> "
    ...
#+END_SRC

*** Greeting the User

Currently when our program starts it simply shows them the prompt, which if
they are using it for the first time they probably won't know where to start.
To help them get started we can set the ~intro~ attribute to contain a welcome
message.

#+BEGIN_SRC python
...
from stylo import __version__

intro_text = """\
Interactive Shell for Stylo v{}
----------------------------------

Type `q` or `Ctrl-D` to quit.
Type `help` or `?` for an overview `help <command>` for more details.
"""

class StyloPrompt(cmd.Cmd):
    intro = intro_text.format(__version__)
    ...

#+END_SRC

Now when the user starts the program they should have enough information to
continue from there.

#+BEGIN_SRC
Interactive Shell for Stylo v0.9.1
----------------------------------

Type `q` or `Ctrl-D` to quit.
Type `help` or `?` for an overview `help <command>` for more details.

->
#+END_SRC

There are also ~doc_header~, ~misc_header~ and ~undoc_header~ that you can set
to include even more information at different points in your program. You can
refer to the [[https://docs.python.org/3/library/cmd.html][documentation]] for more details.

** Wrapping Up

I can't believe I only just found out about this module. I hope you found this
as useful as I did and I strongly encourage you to take a look at the
[[https://docs.python.org/3/library/cmd.html][documentation]] as there are features there that I didn't get around to
mentioning - such as completion!

For those interested the final version of this program (with a few minor
tweaks) is available as a [[https://gist.github.com/alcarney/2f58820dd7a7c999197a450cf2069954][Gist]] on Github. I think what I like most
about this module is that it requires very little code before you start seeing
real results - Our entire application is only 155 lines of code!

* DONE Introducing Stylo Doodles!                              :stylo:python:
:PROPERTIES:
:EXPORT_DATE: 2018-10-12
:EXPORT_FILE_NAME: introducing-stylo-doodles
:EXPORT_DESCRIPTION: Introducing the new community gallery for stylo
:END:

A few weeks back at [[https://2018.pyconuk.org/][PyConUK]] I gave my first [[https://youtu.be/F5jSUJVymXk?t=3480][lighting talk]]
at a conference. During that talk I spoke publically about [[https://github.com/alcarney/stylo][stylo]] for
the first time. Stylo is a Python library that I have been working on for just
over a year and a half and it aims to make the creation of images easier by
bringing together ideas from programming and mathematics.

Version [[https://alcarney.github.io/stylo/changes.html][0.6.0]] was recently released which included the first feature
that wasn't written by me! It's very exciting not only to see other people
starting to take an interest in the project but taking the time to make a
contribution!

Now that stylo seems to be getting to the point that it might me useful to
other people wouldn't it be great if there was a community driven example
gallery that people could get inspired by? - Well now there is! And it's
called [[https://alcarney.github.io/stylo-doodles][Stylo Doodles]]

[[/images/stylo-doodles.png][file:/images/stylo-doodles.png]]

All the examples are written as a [[https://jupyter.org][Jupyter Notebook]] and can be submitted to the
gallery by opening a pull request against the stylo-doodles [[https://github.com/alcarney/stylo-doodles][repository]]. A small
python application is then run that builds the website and pushes the update to
the live website.

** Current Features

The gallery website is very new but it currently has the following features

- All images are displayed in a grid on the homepage with the order randomly
  chosen each time the website is built.
- Each image has its own page (as shown above) which displays the full
  resolution image along with information about the author, image and the
  version of stylo used to generate it.
- The source code from the notebook is extracted and is also displayed
  alongside the image.
- You can also play around with any example *live in your browser* if you
  follow the [[https://mybinder.org/v2/gh/alcarney/stylo-doodles/master][binder]] link in the repository's README.

** Adding Your Own Example

If you have an image that you would like to share there are only a couple of
things you need to do:

1. Your image *must* be stored in a variable called ~image~. The build process
   will [[https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Importing%2520Notebooks.html][import your notebook]] as a Python module and look for a variable called
   ~image~.

2. You also need to provide some additional information to the build system
   about your example in the form of a Python dictionary. This dictionary
   *must* be called ~info~ and it must be in *very first cell of the notebook*

   #+BEGIN_SRC python
   info = {
        "title": "Jack-O-Lantern",
        "author": "Alex Carney",
        "github_username": "alcarney",
        "stylo_version": "0.6.0",
        "dimensions": (1920, 1080)
    }
   #+END_SRC

   The ~stylo_version~ field should be set to the value of ~stylo.__version__~
   at the time you created your image. The ~dimensions~ is tuple of the form
   ~(width, height)~ and will be used by the build system to determine the size
   of the image (in pixels) when it renders the full size copy for its detail
   page.

3. Once your example is ready open a pull request adding your notebook to the
   ~notebooks/~ folder to the repository.

Be sure to check out the existing [[https://github.com/alcarney/stylo-doodles/tree/master/notebooks][examples]] to use as a guide or drop by the
stylo [[https://gitter.im/stylo-py/Lobby][Gitter]] room if you get stuck we'll be more than happy to help!

** Future Developments

Stylo Doodles is far from finished aside from adding examples there are many
more things that could be added to the website:

- *User profiles:* A page for every author, which lists the examples they
  have contributed to the gallery.

- *Search*: As the number of images grow users would probably want to be able
  to tag their images and be able to narrow down the list of images on the
  homepage.

- *Recently Added:* Since the order of the homepage is random, as the number
  of images increases the chance of a new image being buried at the bottom will
  also increase, it would be good to have a way of sorting the images by date
  added.

- *Descriptions:* Jupyter Notebooks support more than just code. Cells
  containing markdown can be placed in between code cells to provide extra
  context and explanation. It would be great if we could include these on the
  site as well.

If you are looking for a web based python project to get involved with this
would be a great one to get started with and I would be more than happy to have
a few contribuitors to work on this (or even stylo itself!) with me.

* DONE I've Started a Blog... Again!                               :blogging:
:PROPERTIES:
:EXPORT_DATE: 2018-09-22
:EXPORT_FILE_NAME: first-article
:EXPORT_DESCRIPTION: First article with ox-hugo
:END:

Not that you would have known it, but I've had a blog since 2014.  Well 2015 if
you're feeling generous, the first (and only) post went up in the last few
hours of New Year's Eve. It was a look back on some of the projects I had
worked on that year and I announced my intentions to start blogging.

Fast forward nearly 4 years and here I am announcing my intentions to start
blogging - *again*. So I guess you are wondering what happened?

I got lost.

My first attempt at running a blog was using [[https://jekyllrb.com][Jekyll]] and for some mystical reason
(It's been so long I can't actually remember why), I decided that it was not the
static site generator I was looking for. So I promptly set off on a voyage of
discovery in search of the ultimate static site generator.

Here is a list of some of the other static site generators I have played with
over the years in no particular order:

- [[http://www.metalsmith.io/][Metalsmith]]: Written in Javascript, this one appealed to me with
  its "everything is a plugin" approach. In theory I should be able to add any
  feature I wanted simply by finding/writing the right plugin.

- [[https://jaspervdj.be/hakyll/][Hakyll]]: I was going through a Haskell phase and I thought it would
  be a great idea to have my blog powered with it as well. *Haskell all the
  things!*

- [[http://www.sphinx-doc.org][Sphinx]]: Sphinx is an awesome tool for writing
  documentation. A big part of that is [[http://docutils.sourceforge.net/rst.html][reStructuredText]], add in the [[https://ablog.readthedocs.io/][ABlog]]
  extension and you should have a great setup for a blog.

- [[https://blog.getpelican.com/][Pelican]] & [[https://getnikola.com/][Nikola]]: However as Sphinx is primarily built
  for documentation projects, I found that I was fighting it more
  than anything. That led me to take a look at Pelican and Nikola, both written
  in Python and have support for reStructuredText and
  [[http://jupyter.org/][Jupyter]].

- [[https://vuepress.vuejs.org/][Vuepress]]: Having played around a bit with [[https://vuejs.org/][VueJS]], the
  thought of being able to take a dynamic site written in a powerful frontend
  framework and make a static site out of it seemed appealing. The best of both
  worlds.

- [[https://gohugo.io/][Hugo]]: Who *doesn't* want a static site generator written in Go? :)

- [[https://www.gnu.org/software/emacs/][Emacs]] & [[https://orgmode.org/][org-mode]]: Yes, [[https://orgmode.org/worg/org-blog-wiki.html][you can]] use emacs
  as a static site generator.

At this point you might be wondering what was wrong with all of the above so
that after nearly 4 years of tinkering I still had nothing to show for it?

Nothing. Absolutely nothing.

The problem was with me. I wanted complete control over the output, from the
contents of ~<head>~ to the CSS styling of links. There would always
be a point where I would start fighting against the very abstractions
designed to make my life easier! It got to the point where I even tried writing
my own static site generator...

** A New Perspective

After endless hours lost fiddling with scripts and stylesheets I stumbled
across a quote on the internet that would snap me out of my spiral of perpetual
procrastination.

#+BEGIN_QUOTE
    The technology you use *impresses no one*.

    The experience you create with it is *everything*. -- [[https://twitter.com/ideakitchn?lang=en][Sean Gerety]]
#+END_QUOTE

I have found myself saying this again and again, so much so that I think it may
have fundamentally altered the way I think about programming. I fell into a
trap of getting caught up in the merits of the technology for the sake of the
technology itself and lost sight of the experience - the blog itself.

Rejuvenated I've gone back to where it all started and have started using [[https://jekyllrb.com][Jekyll]]
again. I'm using the [[https://fongandrew.github.io/hydeout/][Hydeout]] theme as it's built in a way that allows me to make
a few (minor!) tweaks of my own. Within a few hours I was already working on the
draft that became this blog post, a place I never even got to in most of my
previous attempts.

It turns out that Markdown is a perfectly acceptable format for a blog. You
don't have to engineer your blog's theme from the ground up especially when a
prebuilt theme exists in the style you were going to build yourself anyway. It
doesn't matter that your blog can seamlessly format a Jupyter Notebook as a
regular blog post when you don't have any notebooks to publish in the first
place...

What matters is the content itself, that you have something interesting to say
and you have some way of making that available to other people. Everything else
is just an implementation detail, which if done right is invisible to the
consumers of your content anyway.

It's strange that I had learn something that is probably obvious to most people
the hard way but I'm here now. If you are reading this then things are looking
up but I can't quite declare victory as I'm no further forward than I was 4
years ago, first let's see if I make it to blog post number #2...
