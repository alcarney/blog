<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://www.alcarney.me</id>
  <title>Alex Carney | Blog</title>
  <updated>2023-10-09T17:37:57.339426+00:00</updated>
  <link href="https://www.alcarney.me"/>
  <link href="https://www.alcarney.me/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.4.post1">ABlog</generator>
  <entry>
    <id>https://www.alcarney.me/blog/2023/python-wasi-nix/</id>
    <title>Setting up a Python WASI Environment with Nix</title>
    <updated>2023-09-18T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="setting-up-a-python-wasi-environment-with-nix"&gt;

&lt;p&gt;In this blog post I look at setting up a local development environment for the &lt;a class="reference external" href="https://github.com/brettcannon/cpython-wasi-build"&gt;WASI build of Python&lt;/a&gt;  using Nix.
You can see the final result &lt;a class="reference external" href="https://github.com/alcarney/python-wasi-nix"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;section id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;div class="admonition-wasm-and-pyodide-and-wasi-oh-my admonition"&gt;
&lt;p class="admonition-title"&gt;WASM and Pyodide and WASI, Oh My!&lt;/p&gt;
&lt;p&gt;See Brett Cannon’s &lt;a class="reference external" href="https://snarky.ca/webassembly-and-its-platform-targets/"&gt;blog post&lt;/a&gt; for a good overview of the different flavours of WebAssembly platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Some &lt;a class="reference internal" href="2021/bringing-esbonio-to-the-browser/"&gt;&lt;span class="doc"&gt;time ago&lt;/span&gt;&lt;/a&gt; now, I stated that I wanted to get the &lt;a class="reference external" href="https://github.com/swyddfa/esbonio"&gt;esbonio&lt;/a&gt; language server running in &lt;a class="reference external" href="https://vscode.dev"&gt;vscode.dev&lt;/a&gt;.
While there
&lt;a class="reference external" href="https://github.com/swyddfa/esbonio/pull/438"&gt;has been&lt;/a&gt;
some
&lt;a class="reference external" href="https://github.com/swyddfa/esbonio/commit/046d63d8ca07d647498d800fb88f76792bd88ee8"&gt;progress&lt;/a&gt;
towards this goal it’s been little more than proof of concepts.&lt;/p&gt;
&lt;p&gt;One of the biggest challenges has been sharing the contents of the workspace with the &lt;a class="reference external" href="https://pyodide.org/en/stable/"&gt;pyodide&lt;/a&gt; runtime I was using to host the language server.
But now that the VSCode team are turning &lt;a class="reference external" href="https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi"&gt;VSCode into a WASI runtime&lt;/a&gt; it might finally be possible to port &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; to the web!&lt;/p&gt;
&lt;p&gt;As a bonus, since &lt;a class="reference external" href="https://wasi.dev"&gt;WASI&lt;/a&gt; is a standard, I can use &lt;a class="reference external" href="https://wasmtime.dev"&gt;wasmtime&lt;/a&gt; as the host when working on the port locally.
Which brings us to the topic of this blog post.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ok-but-why-use-nix"&gt;
&lt;h2&gt;Ok, but why use Nix?&lt;/h2&gt;
&lt;p&gt;I’m sure you could achieve everything that I do here with a bash script but I’ve been playing with Nix &lt;a class="reference internal" href="tag/nix/" title="nix"&gt;&lt;span class="xref std std-ref"&gt;a lot&lt;/span&gt;&lt;/a&gt; recently and I think it’s cool!&lt;/p&gt;
&lt;p&gt;If you want Python + WASI without the Nix see &lt;a class="reference external" href="https://snarky.ca/testing-a-project-using-the-wasi-build-of-cpython-with-pytest/"&gt;this blog post&lt;/a&gt;, which I used as the basis for figuring this out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="building-python"&gt;
&lt;h2&gt;“Building” Python&lt;/h2&gt;
&lt;p&gt;As an initial step, let’s see if we can get to the point where we can launch a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; in which we can run the WASI version of Python.&lt;/p&gt;
&lt;p&gt;To get the WASM build of Python onto our machine we’ll write a derivation that “builds” it by downloading the release artifact from GitHub and copying it to the output folder&lt;/p&gt;
&lt;div class="admonition-this-is-wrong admonition"&gt;
&lt;p class="admonition-title"&gt;This is “wrong”&lt;/p&gt;
&lt;p&gt;To do this the “right” way, I should be using Nix to build the WASI version of Python from source.
But since Brett Cannon is &lt;a class="reference external" href="https://github.com/brettcannon/cpython-wasi-build"&gt;publishing builds&lt;/a&gt; on GitHub I’m going to leave that as an exercise for the reader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/python-wasi.nix&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; fetchzip&lt;span class="p"&gt;,&lt;/span&gt; stdenv &lt;span class="p"&gt;}:&lt;/span&gt;

stdenv&lt;span class="o"&gt;.&lt;/span&gt;mkDerivation &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pname =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python-wasi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3.11.4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;src =&lt;/span&gt; fetchzip &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://github.com/brettcannon/cpython-wasi-build/releases/download/v3.11.4/python-3.11.4-wasi_sdk-16.zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;stripRoot =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;sha256 =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-AZGdgpRvHcu6FY/a7capldjDhTpkfhGkqYnm127nAN8=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;buildCommand =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   mkdir $out&lt;/span&gt;
&lt;span class="s1"&gt;   cp -r $src/* $out&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In a corresponding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; file we can define a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; containing both the WASI build of Python and the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasmtime&lt;/span&gt;&lt;/code&gt; program required to execute it&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./flake.nix&lt;/span&gt;
utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem&lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="ss"&gt;python-wasi =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/python-wasi.nix&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    devShells&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wasi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;shellHook =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;         export PYTHON_WASI=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; wasmtime &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which will be enough to give an an environment where we can try to run a simple Python script:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(nix-shell) $ wasmtime run $PYTHON_WASI/python.wasm -- -c &amp;quot;import sys;print(sys.platform)&amp;quot;
Could not find platform independent libraries &amp;lt;prefix&amp;gt;
Could not find platform dependent libraries &amp;lt;exec_prefix&amp;gt;
Python path configuration:
  PYTHONHOME = (not set)
  PYTHONPATH = (not set)
  program name = &amp;#39;python.wasm&amp;#39;
  isolated = 0
  environment = 1
  user site = 1
  safe_path = 0
  import site = 1
  is in build tree = 0
  stdlib dir = &amp;#39;/usr/local/lib/python3.11&amp;#39;
  sys._base_executable = &amp;#39;&amp;#39;
  sys.base_prefix = &amp;#39;/usr/local&amp;#39;
  sys.base_exec_prefix = &amp;#39;/usr/local&amp;#39;
  sys.platlibdir = &amp;#39;lib&amp;#39;
  sys.executable = &amp;#39;&amp;#39;
  sys.prefix = &amp;#39;/usr/local&amp;#39;
  sys.exec_prefix = &amp;#39;/usr/local&amp;#39;
  sys.path = [
    &amp;#39;/usr/local/lib/python311.zip&amp;#39;,
    &amp;#39;/usr/local/lib/python3.11&amp;#39;,
    &amp;#39;/usr/local/lib/python3.11/lib-dynload&amp;#39;,
  ]
Fatal Python error: init_fs_encoding: failed to get the Python codec of the filesystem encoding
Python runtime state: core initialized
ModuleNotFoundError: No module named &amp;#39;encodings&amp;#39;

Current thread 0x00000000 (most recent call first):
  &amp;lt;no Python frame&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well, that was the plan at least! 😅&lt;/p&gt;
&lt;/section&gt;
&lt;section id="making-it-work"&gt;
&lt;h2&gt;Making it work&lt;/h2&gt;
&lt;p&gt;Of course… introducing Nix is going to bring its own set of challenges.
Looking at the error message above we can see that Python assumes it has been installed on a traditional Linux operating system and is looking for its standard library under &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/local&lt;/span&gt;&lt;/code&gt;.
However, looking at the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHON_WASI&lt;/span&gt;&lt;/code&gt; environment variable we can see this is not the case:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(nix-shell) $ echo $PYTHON_WASI
/nix/store/5n0m7jxcnksmnp52maxa4li1q91gwq2v-python-wasi-3.11.4

(nix-shell) $ ls $PYTHON_WASI
lib/  python.wasm*
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thankfully, it’s easy enough to fix with the &lt;a class="reference external" href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHOME"&gt;PYTHONHOME&lt;/a&gt; environment variable, we can rename &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHON_WASI&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONHOME&lt;/span&gt;&lt;/code&gt; in the shell’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shellHook&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;shellHook =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    export PYTHONHOME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="se"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, since &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasmtime&lt;/span&gt;&lt;/code&gt; implements a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Capability-based_security"&gt;capability security model&lt;/a&gt;
we also have to grant access to the both the environment variable &lt;strong&gt;and&lt;/strong&gt; the folder it points to:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wasmtime run $PYTHONHOME/python.wasm --env PYTHONHOME=$PYTHONHOME --dir $PYTHONHOME -- -c &amp;quot;import sys; print(sys.platform)&amp;quot;
wasi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="creating-a-wrapper"&gt;
&lt;h2&gt;Creating a Wrapper&lt;/h2&gt;
&lt;p&gt;While we can now run the WASI Python build, the command to invoke it is rather unwieldy… and we’re not doing anything interesting yet!
Thankfully, we can also use Nix to hide some of these details for us.&lt;/p&gt;
&lt;p&gt;A common pattern you will see in &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs"&gt;nixpkgs&lt;/a&gt; is to have a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;program-name&amp;gt;-unwrapped&lt;/span&gt;&lt;/code&gt; package whose job it is to build said program into a folder in the nix store.
Then a second &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;program-name&amp;gt;&lt;/span&gt;&lt;/code&gt; package containing a bash script that handles the details of invoking the program from within the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/nix/store&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let’s do the same here!&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/python.nix&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; wasmtime&lt;span class="p"&gt;,&lt;/span&gt; python-wasi&lt;span class="p"&gt;,&lt;/span&gt; writeShellScriptBin &lt;span class="p"&gt;}:&lt;/span&gt;

writeShellScriptBin &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;wasmtime&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/wasmtime run &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/python.wasm \&lt;/span&gt;
&lt;span class="s1"&gt;     --env PYTHONHOME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; \&lt;/span&gt;
&lt;span class="s1"&gt;     --dir &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; \&lt;/span&gt;
&lt;span class="s1"&gt;     -- &amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="se"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which allows us to update our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; definition to the following.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem&lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="ss"&gt;python-wasi =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/python-wasi.nix&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="ss"&gt;python =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/python.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;python-wasi =&lt;/span&gt; python-wasi&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    devShells&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wasi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; python &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how we don’t even need to reference &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasmtime&lt;/span&gt;&lt;/code&gt; here anymore?
In fact (assuming the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; is active), we can call Python as we would normally!:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &amp;quot;import sys; print(sys.platform)&amp;quot;
linux

$ nix develop
(nix-shell) $ python -c &amp;quot;import sys; print(sys.platform)&amp;quot;
wasi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;🤯&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;You can see the contents of the wrapper script we generated by running:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(nix-shell) $ cat $(command -v python)
#!/nix/store/ir0j7zqlw9dc49grmwplppc7gh0s40yf-bash-5.2-p15/bin/bash
/nix/store/kv8y59aqkz8havf9whvvknm7z05by2dk-wasmtime-11.0.1/bin/wasmtime run /nix/store/5n0m7jxcnksmnp52maxa4li1q91gwq2v-python-wasi-3.11.4/python.wasm \
  --env PYTHONHOME=/nix/store/5n0m7jxcnksmnp52maxa4li1q91gwq2v-python-wasi-3.11.4 \
  --dir /nix/store/5n0m7jxcnksmnp52maxa4li1q91gwq2v-python-wasi-3.11.4 \
  -- &amp;quot;$@&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But we’re not done yet!
Our Python process does not have access to any files outside of the stdlib&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.11.4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="mf"&gt;.11.4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dirty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d2340ef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Clang&lt;/span&gt; &lt;span class="mf"&gt;14.0.4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;llvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;llvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="n"&gt;f1039a7285a5c3a9c353d05414&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;wasi&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;PermissionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Errno&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Capabilities&lt;/span&gt; &lt;span class="n"&gt;insufficient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But passing an additional &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--dir&lt;/span&gt; &lt;span class="pre"&gt;.&lt;/span&gt;&lt;/code&gt; argument to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasmtime&lt;/span&gt;&lt;/code&gt; will solve that for us.
The more challenging issue to solve is passing through third party libraries&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.11.4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="mf"&gt;.11.4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dirty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d2340ef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Clang&lt;/span&gt; &lt;span class="mf"&gt;14.0.4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;llvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;llvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="n"&gt;f1039a7285a5c3a9c353d05414&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;wasi&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;attrs&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attrs&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="installing-packages"&gt;
&lt;h2&gt;Installing packages&lt;/h2&gt;
&lt;p&gt;Here is where I’m going to take another shortcut, to do this “correctly” I should probably look at overriding the base Python derivation so that it (and everything that depends on it) uses the WASI build of Python.
This would trigger Nix to (lazily) rebuild all of the Python packages in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nixpkgs&lt;/span&gt;&lt;/code&gt; against that version of Python.&lt;/p&gt;
&lt;p&gt;However, there’s a strong chance that a lot of builds will break and in reality all we really need is a folder full of Python files to import.&lt;/p&gt;
&lt;div class="admonition-what-about-packages-like-numpy admonition"&gt;
&lt;p class="admonition-title"&gt;What about packages like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;While I think there are some moves towards enabling support for packages like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; (via the WASM Component Model?),
if you want to use packages that contain native code in WebAssembly, &lt;a class="reference external" href="https://pyodide.org/en/stable/"&gt;pyodide&lt;/a&gt;  is probably the best bet for the time being, especially for data science libraries.&lt;/p&gt;
&lt;p&gt;This however, is beyond the scope of this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So why not reuse the packages already in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nixpkgs&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;We can take a list of Python package derivations and construct a string to set as the &lt;a class="reference external" href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH"&gt;PYTHONPATH&lt;/a&gt; environment variable - making all of the required dependencies available to the interpreter.&lt;/p&gt;
&lt;section id="gathering-dependencies"&gt;
&lt;h3&gt;Gathering Dependencies&lt;/h3&gt;
&lt;p&gt;The first thing we need to do is to figure out when given a Python package, is what all of its dependencies are.
Thankfully, to help us figure it out we can use the Nix REPL allowing us to inspect derivations and evaluate expressions:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nix repl
Welcome to Nix 2.11.1. Type :? for help.

nix-repl&amp;gt; :lf .    # Load the flake located in the current directory
Added 9 variables.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First let’s locate a package that we’re interested in, note that the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inputs&lt;/span&gt;&lt;/code&gt; variable corresponds to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inputs&lt;/span&gt;&lt;/code&gt; attribute set we declared in our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nix-repl&amp;gt; pkgs = inputs.nixpkgs.legacyPackages.x86_64-linux.python311Packages
nix-repl&amp;gt; pkgs.attrs
«derivation /nix/store/bcgw61xp6ss6vaad5ghwqfbm2m795a2g-python3.11-attrs-22.2.0.drv»
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To find out what attributes this derivation has we can type &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgs.attrs.&lt;/span&gt;&lt;/code&gt; and then hit &lt;kbd class="kbd docutils literal notranslate"&gt;Tab&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nix&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LANG&lt;/span&gt;                         &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outPath&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ignoreNulls&lt;/span&gt;                &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputName&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__structuredAttrs&lt;/span&gt;            &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;                          &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;                         &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overrideAttrs&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buildInputs&lt;/span&gt;                  &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overrideDerivation&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;                      &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overridePythonAttrs&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmakeFlags&lt;/span&gt;                   &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configureFlags&lt;/span&gt;               &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patches&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsBuildBuild&lt;/span&gt;               &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pname&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsBuildBuildPropagated&lt;/span&gt;     &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postFixup&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsBuildTarget&lt;/span&gt;              &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postInstall&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsBuildTargetPropagated&lt;/span&gt;    &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propagatedBuildInputs&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsHostHost&lt;/span&gt;                 &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propagatedNativeBuildInputs&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsHostHostPropagated&lt;/span&gt;       &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonImportsCheck&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsTargetTarget&lt;/span&gt;             &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonModule&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depsTargetTargetPropagated&lt;/span&gt;   &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonPath&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disallowedReferences&lt;/span&gt;         &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requiredPythonModules&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;                         &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doCheck&lt;/span&gt;                      &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdenv&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doInstallCheck&lt;/span&gt;               &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strictDeps&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drvAttrs&lt;/span&gt;                     &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drvPath&lt;/span&gt;                      &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testout&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputDerivation&lt;/span&gt;              &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesonFlags&lt;/span&gt;                   &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;                         &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateScript&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;                         &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userHook&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nativeBuildInputs&lt;/span&gt;            &lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requiredPythonModules&lt;/span&gt;&lt;/code&gt; looks interesting:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nix-repl&amp;gt; pkgs.attrs.requiredPythonModules
[ «derivation /nix/store/2dml7fbspshiwb1j896jd3ajrsq81nl5-python3-3.11.4.drv» ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I guess the only dependencies &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;attrs&lt;/span&gt;&lt;/code&gt; has is Python itself, that’s good to know as we will have to drop that from the list of dependencies:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nix-repl&amp;gt; lib = inputs.nixpkgs.lib
nix-repl&amp;gt; python = inputs.nixpkgs.legacyPackages.x86_64-linux.python311
nix-repl&amp;gt; python
«derivation /nix/store/2dml7fbspshiwb1j896jd3ajrsq81nl5-python3-3.11.4.drv»

nix-repl&amp;gt; lib.remove python pkgs.attrs.requiredPythonModules
[ ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, how about another package?:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nix-repl&amp;gt; lib.remove python pkgs.pygls.requiredPythonModules
[
  «derivation /nix/store/dsx8aalkf97pi0ja8xs9mlss5lk4bzhv-python3.11-lsprotocol-2023.0.0a2.drv»
  «derivation /nix/store/86933r4czjpmyq3ikz5444f1k1q9rij6-python3.11-typeguard-2.13.3.drv»
  «derivation /nix/store/bcgw61xp6ss6vaad5ghwqfbm2m795a2g-python3.11-attrs-22.2.0.drv»
  «derivation /nix/store/f19ymrh2zv9hzh00wjvjv73v529n3ds4-python3.11-cattrs-23.1.2.drv»
]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Based on some experiments I think &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requiredPythonModules&lt;/span&gt;&lt;/code&gt; automatically handles transitive dependencies for us!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="setting-pythonpath"&gt;
&lt;h3&gt;Setting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I’ll spare you the trial and error and skip to the following lines of nix code which take a list of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyPackages&lt;/span&gt;&lt;/code&gt; and converts it into a value we can use with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;pyDeps =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;concatMap &lt;span class="p"&gt;(&lt;/span&gt;pkg&lt;span class="p"&gt;:&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;remove pkg&lt;span class="o"&gt;.&lt;/span&gt;pythonModule pkg&lt;span class="o"&gt;.&lt;/span&gt;requiredPythonModules&lt;span class="p"&gt;)&lt;/span&gt; pyPackages&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="ss"&gt;allPackages =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;unique &lt;span class="p"&gt;(&lt;/span&gt;pyPackages &lt;span class="o"&gt;++&lt;/span&gt; pyDeps&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="ss"&gt;pythonPath =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;concatMapStringsSep &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pkg&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkg&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/lib/python3.11/site-packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; allPackages&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Don’t forget we will also have to grant the process access to each of the folders we add to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;concatMapStringsSep &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\\&lt;/span&gt;&lt;span class="s2"&gt;n  &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pkg&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--dir &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkg&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/lib/python3.11/site-packages&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; allPackages
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="mkpythonwasishell"&gt;
&lt;h3&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mkPythonWASIShell&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We now have everything we need to rewrite our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./nix/python.nix&lt;/span&gt;&lt;/code&gt; file to define a helper function  which takes a list of Python packages and creates a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; containing the WASI build of Python and all of our declared dependencies.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/python.nix&lt;/span&gt;

&lt;span class="c1"&gt;# Dependencies for our function (mostly) coming from `nixpkgs`&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; lib
&lt;span class="p"&gt;,&lt;/span&gt; python-wasi
&lt;span class="p"&gt;,&lt;/span&gt; mkShell
&lt;span class="p"&gt;,&lt;/span&gt; stdenv
&lt;span class="p"&gt;,&lt;/span&gt; wasmtime
&lt;span class="p"&gt;,&lt;/span&gt; writeShellScriptBin
&lt;span class="p"&gt;}:&lt;/span&gt;

&lt;span class="c1"&gt;# Arguments the user can set when invoking the function&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; pyPackages &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;

&lt;span class="c1"&gt;# Implementation details&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="ss"&gt;pyDeps =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;concatMap &lt;span class="p"&gt;(&lt;/span&gt;pkg&lt;span class="p"&gt;:&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;remove pkg&lt;span class="o"&gt;.&lt;/span&gt;pythonModule pkg&lt;span class="o"&gt;.&lt;/span&gt;requiredPythonModules&lt;span class="p"&gt;)&lt;/span&gt; pyPackages&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;allPackages =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;unique &lt;span class="p"&gt;(&lt;/span&gt;pyPackages &lt;span class="o"&gt;++&lt;/span&gt; pyDeps&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="ss"&gt;pythonPath =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;concatMapStringsSep &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pkg&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkg&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/lib/python3.11/site-packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; allPackages&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# This should look familiar...&lt;/span&gt;
  &lt;span class="ss"&gt;python =&lt;/span&gt; writeShellScriptBin &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;wasmtime&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/wasmtime run &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/python.wasm \&lt;/span&gt;
&lt;span class="s1"&gt;     --env PYTHONHOME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; \&lt;/span&gt;
&lt;span class="s1"&gt;     --env PYTHONPATH=&amp;#39;.:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pythonPath&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; \&lt;/span&gt;
&lt;span class="s1"&gt;     --dir &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;python-wasi&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; \&lt;/span&gt;
&lt;span class="s1"&gt;     &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;concatMapStringsSep &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\\&lt;/span&gt;&lt;span class="s2"&gt;n  &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pkg&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--dir &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkg&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/lib/python3.11/site-packages&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; allPackages&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; \&lt;/span&gt;
&lt;span class="s1"&gt;     --dir . \&lt;/span&gt;
&lt;span class="s1"&gt;     -- &amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="c1"&gt;# Our function&amp;#39;s return value&lt;/span&gt;
mkShell &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python-wasi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; python &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function only gets a name when we import it into the top-level &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="ss"&gt;python-wasi =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/python-wasi.nix&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="ss"&gt;mkPythonWASIShell =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/python.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;python-wasi =&lt;/span&gt; python-wasi&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;callPackage&lt;/span&gt;&lt;/code&gt; function uses some kind of ✨magic✨ to automatically pass through all the dependencies (like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasmtime&lt;/span&gt;&lt;/code&gt;) we declared in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./nix/python.nix&lt;/span&gt;&lt;/code&gt; - except for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python-wasi&lt;/span&gt;&lt;/code&gt; which we pass through by hand.&lt;/p&gt;
&lt;p&gt;Defining an environment based on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mkPythonWASIShell&lt;/span&gt;&lt;/code&gt; would then look something like the following&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;devShells&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; mkPythonWASIShell &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pyPackages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;python311Packages&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    pygls
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which we can now try to develop with:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nix develop
(nix-shell) $ python
Python 3.11.4 (tags/v3.11.4-dirty:d2340ef, Jun  8 2023, 00:39:32) [Clang 14.0.4 (https://github.com/llvm/llvm-project 29f1039a7285a5c3a9c353d05414 on wasi
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; from pygls.server import LanguageServer
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/nix/store/g4p26w5gh74nndclnskypc74ni37jqm6-python3.11-pygls-1.0.1/lib/python3.11/site-packages/pygls/server.py&amp;quot;, line 42, in &amp;lt;module&amp;gt;
    from multiprocessing.pool import ThreadPool
ModuleNotFoundError: No module named &amp;#39;multiprocessing&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assuming the packages support the WASI runtime that is! 😅&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="next-steps"&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;If you are interested you can find the final version of the code &lt;a class="reference external" href="https://github.com/alcarney/python-wasi-nix"&gt;here&lt;/a&gt;.
I’m not really sure where it will go from here, as it’s now “good enough” for me to start hacking on the WASI runtime, but there’s certainly plenty that could be improved.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Building Python WASI from source&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatically choosing the right Python package set to use with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mkPythonWASIShell&lt;/span&gt;&lt;/code&gt;, like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python.withPackages&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extending &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mkPythonWASIShell&lt;/span&gt;&lt;/code&gt; to allow the user to set the permissions for the Python process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overriding a base &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt; derivation so that packages are built against this version of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extending this to work with packages that contain native modules?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2023/python-wasi-nix/" rel="alternate"/>
    <summary>In this blog post I look at setting up a local development environment for the WASI build of Python  using Nix.
You can see the final result here</summary>
    <category term="nix" label="nix"/>
    <category term="python" label="python"/>
    <category term="wasm" label="wasm"/>
    <published>2023-09-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2023/nix-day-to-day/</id>
    <title>Nix: Day to Day Usage</title>
    <updated>2023-07-27T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="nix-day-to-day-usage"&gt;

&lt;p&gt;This blog post marks a change in my usage of Nix, I’m (just!) past the point of trying to get &lt;em&gt;something&lt;/em&gt; to work and now starting to incorporate it into some of my regular workflows.
So instead of trying to accomplish some major task, this post is a small collection of things I’ve learned over the past few weeks.&lt;/p&gt;
&lt;section id="a-better-devshell-definition"&gt;
&lt;h2&gt;A better &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; definition&lt;/h2&gt;
&lt;p&gt;The original issue I’m trying to solve dates back to my &lt;a class="reference internal" href="2022/first-steps-with-nix/"&gt;&lt;span class="doc"&gt;first post&lt;/span&gt;&lt;/a&gt; on using Nix.
That is, defining a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; containing the dependencies of a local Python package doesn’t mean that the local package itself is importable when the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; is activated.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nix develop .#py310
(nix-shell) $ pytest
================================================= test session starts =================================================
platform linux -- Python 3.10.12, pytest-7.2.1, pluggy-1.0.0
rootdir: /var/home/alex/Projects/lsp-devtools/lib/pytest-lsp, configfile: pyproject.toml
plugins: typeguard-3.0.2, asyncio-0.20.3
asyncio: mode=auto
collected 16 items / 1 error

======================================================= ERRORS ========================================================
________________________________________ ERROR collecting tests/test_client.py ________________________________________
ImportError while importing test module &amp;#39;/var/home/alex/Projects/lsp-devtools/lib/pytest-lsp/tests/test_client.py&amp;#39;.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/nix/store/1r6n7v2wam7gkr18gxccpg7p5ywgw551-python3-3.10.12/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_client.py:9: in &amp;lt;module&amp;gt;
    import pytest_lsp
E   ModuleNotFoundError: No module named &amp;#39;pytest_lsp&amp;#39;
=============================================== short test summary info ===============================================
ERROR tests/test_client.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
================================================== 1 error in 0.16s ===================================================
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Initially I tried to solve this by also including the Nix package defined for the local Python package itself in the definition of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; but with any &lt;a class="reference internal" href="2023/nix-overlays-p2/#nix-overlays-disable-tests"&gt;&lt;span class="std std-ref"&gt;tests disabled&lt;/span&gt;&lt;/a&gt;.
While this worked, it wasn’t very useful when trying to do any real development with it.&lt;/p&gt;
&lt;p&gt;The problem is that upon activating the shell, Nix will freeze the source as part of the build process.
Which means for any edits to take effect, you have to exit the shell and re-enter it to trigger another build to pick up the changes.
Not only does this fill your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/nix/store&lt;/span&gt;&lt;/code&gt; with 100s of copies of your project, it gets tedious very quickly!&lt;/p&gt;
&lt;p&gt;Since then however, I’ve learned that when installating a Python package, Nix is only adding the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/nix/store&lt;/span&gt;&lt;/code&gt; path for it to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONPATH&lt;/span&gt;&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(nix-shell) $ echo $PYTHONPATH | tr &amp;#39;:&amp;#39; &amp;#39;\n&amp;#39;
/nix/store/99i2wwkhcgr98kjn5wnr25sb87dk4zkk-python3.10-pygls-1.0.1/lib/python3.10/site-packages
/nix/store/ckmh39zca1gjagq4cmharbvzggcmm4qx-python3.10-lsprotocol-2023.0.0a2/lib/python3.10/site-packages
/nix/store/n80x8k099gfslvbg4s13hpaiiynimsw5-python3.10-attrs-22.2.0/lib/python3.10/site-packages
/nix/store/1r6n7v2wam7gkr18gxccpg7p5ywgw551-python3-3.10.12/lib/python3.10/site-packages
/nix/store/aiabj9kh174a3ybdr00q3zpm7w6vqv99-python3.10-cattrs-22.2.0/lib/python3.10/site-packages
/nix/store/4bv2ic5mbp639xi0r75y5aq3d8yd04qa-python3.10-exceptiongroup-1.1.0/lib/python3.10/site-packages
/nix/store/jxpkywimbcxzmsc604gfgibdvlj8x3ch-python3.10-typeguard-3.0.2/lib/python3.10/site-packages
/nix/store/5vwslcxd6w3ck9dlgf8zw87ha2cnf5zz-python3.10-importlib-metadata-6.0.0/lib/python3.10/site-packages
/nix/store/4s0w0rp502c09f7vngmnwdmxaans4k70-python3.10-toml-0.10.2/lib/python3.10/site-packages
/nix/store/6zrrhy4mv339hd6rhc19immll0qpm9fr-python3.10-zipp-3.15.0/lib/python3.10/site-packages
/nix/store/082nwhxg32ykrc4bcd9wacj1pzgyf7ii-python3.10-typing-extensions-4.5.0/lib/python3.10/site-packages
/nix/store/hzv8xjxk35i72jrljvjhl9y5i00vnsqn-python3.10-pytest-7.2.1/lib/python3.10/site-packages
/nix/store/064q1k7k7g05ls3m7cqdh32nisj51pgw-python3.10-iniconfig-2.0.0/lib/python3.10/site-packages
/nix/store/c5fh1flbs76jpgmvzz96xa26c3fwsq2s-python3.10-packaging-23.0/lib/python3.10/site-packages
/nix/store/0mkyiplpq1iy1y4kvkpj4gwcfism1bkw-python3.10-pluggy-1.0.0/lib/python3.10/site-packages
/nix/store/4k182588zcl6j9n08qmy8395qanxw86r-python3.10-py-1.11.0/lib/python3.10/site-packages
/nix/store/k40s1gy6pkzdzb7l14jhsmfamwjmpgnk-python3.10-tomli-2.0.1/lib/python3.10/site-packages
/nix/store/3k5y2a1my07fpbv1p24a7gplk6nqpnpf-python3.10-pytest-asyncio-0.20.3/lib/python3.10/site-packages
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So why not put our local package’s source there as well?&lt;/p&gt;
&lt;p&gt;All we need to do is add a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shellHook&lt;/span&gt;&lt;/code&gt; to the devShell’s definiton that adds the working directory to the existing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONPATH&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;shellHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
   &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./:$PYTHONPATH&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; behaves like an &lt;a class="reference external" href="https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs"&gt;editable install&lt;/a&gt; of a Python package - no rebuilds required!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="defining-a-build-matrix"&gt;
&lt;h2&gt;Defining a build matrix&lt;/h2&gt;
&lt;p&gt;So far, all my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; definitions have been making use of a function I wrote called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachPythonVersion&lt;/span&gt;&lt;/code&gt; (see &lt;a class="reference internal" href="2022/first-steps-with-nix/#first-steps-nix-multiple-python-versions"&gt;&lt;span class="std std-ref"&gt;this section&lt;/span&gt;&lt;/a&gt; for more details) which would let me define a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; once, but reuse it across multiple Python versions&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
    eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; mkShell &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;shellHook =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;          export PYTHONPATH=&amp;quot;./:$PYTHONPATH&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          pygls
          pytest
          pytest-asyncio
        &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, if you look at the implementation of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachPythonVersion&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; versions&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;listToAttrs &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;version&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; f version&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; versions&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;it&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;only supports parametrising a single version number&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;only supports producing a single ‘thing’ for each version number&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is not easily adapatable to other situations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently I’m working on the next major version of &lt;a class="reference external" href="https://github.com/swyddfa/esbonio"&gt;esbonio&lt;/a&gt; and need to be able to define multiple &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt; per Python version each containing a different version of Sphinx.&lt;/p&gt;
&lt;p&gt;So ideally, I’d want to be able to define my build matrix&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;buildMatrix =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;py =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;sphinx =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;7&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and then apply it over some function to get definitions for all combinations of supported versions&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
  applyMatrix buildMatrix &lt;span class="p"&gt;({&lt;/span&gt; py&lt;span class="p"&gt;,&lt;/span&gt; sphinx&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;py&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-esbonio&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;          &lt;span class="c1"&gt;# A shell without sphinx avaialable at all&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;py&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-sphinx&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;sphinx&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;  &lt;span class="c1"&gt;# A shell containing the given sphinx verison&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;details class="sd-sphinx-override sd-dropdown sd-card sd-mb-3"&gt;
&lt;summary class="sd-summary-title sd-card-header"&gt;
Which expands into a lot of devShells!&lt;div class="sd-summary-down docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-down" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M5.22 8.72a.75.75 0 000 1.06l6.25 6.25a.75.75 0 001.06 0l6.25-6.25a.75.75 0 00-1.06-1.06L12 14.44 6.28 8.72a.75.75 0 00-1.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;div class="sd-summary-up docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-up" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M18.78 15.28a.75.75 0 000-1.06l-6.25-6.25a.75.75 0 00-1.06 0l-6.25 6.25a.75.75 0 101.06 1.06L12 9.56l5.72 5.72a.75.75 0 001.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;/summary&gt;&lt;div class="sd-summary-content sd-card-body docutils"&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nix flake show
git+file:///var/home/alex/Projects/esbonio-beta?dir=lib%2fesbonio
├───devShells
│   ├───aarch64-darwin
│   │   ├───py310-esbonio: development environment &amp;#39;py310-esbonio&amp;#39;
│   │   ├───py310-sphinx5: development environment &amp;#39;py310-sphinx5&amp;#39;
│   │   ├───py310-sphinx6: development environment &amp;#39;py310-sphinx6&amp;#39;
│   │   ├───py310-sphinx7: development environment &amp;#39;py310-sphinx7&amp;#39;
│   │   ├───py311-esbonio: development environment &amp;#39;py311-esbonio&amp;#39;
│   │   ├───py311-sphinx5: development environment &amp;#39;py311-sphinx5&amp;#39;
│   │   ├───py311-sphinx6: development environment &amp;#39;py311-sphinx6&amp;#39;
│   │   ├───py311-sphinx7: development environment &amp;#39;py311-sphinx7&amp;#39;
│   │   ├───py38-esbonio: development environment &amp;#39;py38-esbonio&amp;#39;
│   │   ├───py38-sphinx5: development environment &amp;#39;py38-sphinx5&amp;#39;
│   │   ├───py38-sphinx6: development environment &amp;#39;py38-sphinx6&amp;#39;
│   │   ├───py38-sphinx7: development environment &amp;#39;py38-sphinx7&amp;#39;
│   │   ├───py39-esbonio: development environment &amp;#39;py39-esbonio&amp;#39;
│   │   ├───py39-sphinx5: development environment &amp;#39;py39-sphinx5&amp;#39;
│   │   ├───py39-sphinx6: development environment &amp;#39;py39-sphinx6&amp;#39;
│   │   └───py39-sphinx7: development environment &amp;#39;py39-sphinx7&amp;#39;
│   ├───aarch64-linux
│   │   ├───py310-esbonio: development environment &amp;#39;py310-esbonio&amp;#39;
│   │   ├───py310-sphinx5: development environment &amp;#39;py310-sphinx5&amp;#39;
│   │   ├───py310-sphinx6: development environment &amp;#39;py310-sphinx6&amp;#39;
│   │   ├───py310-sphinx7: development environment &amp;#39;py310-sphinx7&amp;#39;
│   │   ├───py311-esbonio: development environment &amp;#39;py311-esbonio&amp;#39;
│   │   ├───py311-sphinx5: development environment &amp;#39;py311-sphinx5&amp;#39;
│   │   ├───py311-sphinx6: development environment &amp;#39;py311-sphinx6&amp;#39;
│   │   ├───py311-sphinx7: development environment &amp;#39;py311-sphinx7&amp;#39;
│   │   ├───py38-esbonio: development environment &amp;#39;py38-esbonio&amp;#39;
│   │   ├───py38-sphinx5: development environment &amp;#39;py38-sphinx5&amp;#39;
│   │   ├───py38-sphinx6: development environment &amp;#39;py38-sphinx6&amp;#39;
│   │   ├───py38-sphinx7: development environment &amp;#39;py38-sphinx7&amp;#39;
│   │   ├───py39-esbonio: development environment &amp;#39;py39-esbonio&amp;#39;
│   │   ├───py39-sphinx5: development environment &amp;#39;py39-sphinx5&amp;#39;
│   │   ├───py39-sphinx6: development environment &amp;#39;py39-sphinx6&amp;#39;
│   │   └───py39-sphinx7: development environment &amp;#39;py39-sphinx7&amp;#39;
│   ├───x86_64-darwin
│   │   ├───py310-esbonio: development environment &amp;#39;py310-esbonio&amp;#39;
│   │   ├───py310-sphinx5: development environment &amp;#39;py310-sphinx5&amp;#39;
│   │   ├───py310-sphinx6: development environment &amp;#39;py310-sphinx6&amp;#39;
│   │   ├───py310-sphinx7: development environment &amp;#39;py310-sphinx7&amp;#39;
│   │   ├───py311-esbonio: development environment &amp;#39;py311-esbonio&amp;#39;
│   │   ├───py311-sphinx5: development environment &amp;#39;py311-sphinx5&amp;#39;
│   │   ├───py311-sphinx6: development environment &amp;#39;py311-sphinx6&amp;#39;
│   │   ├───py311-sphinx7: development environment &amp;#39;py311-sphinx7&amp;#39;
│   │   ├───py38-esbonio: development environment &amp;#39;py38-esbonio&amp;#39;
│   │   ├───py38-sphinx5: development environment &amp;#39;py38-sphinx5&amp;#39;
│   │   ├───py38-sphinx6: development environment &amp;#39;py38-sphinx6&amp;#39;
│   │   ├───py38-sphinx7: development environment &amp;#39;py38-sphinx7&amp;#39;
│   │   ├───py39-esbonio: development environment &amp;#39;py39-esbonio&amp;#39;
│   │   ├───py39-sphinx5: development environment &amp;#39;py39-sphinx5&amp;#39;
│   │   ├───py39-sphinx6: development environment &amp;#39;py39-sphinx6&amp;#39;
│   │   └───py39-sphinx7: development environment &amp;#39;py39-sphinx7&amp;#39;
│   └───x86_64-linux
│       ├───py310-esbonio: development environment &amp;#39;py310-esbonio&amp;#39;
│       ├───py310-sphinx5: development environment &amp;#39;py310-sphinx5&amp;#39;
│       ├───py310-sphinx6: development environment &amp;#39;py310-sphinx6&amp;#39;
│       ├───py310-sphinx7: development environment &amp;#39;py310-sphinx7&amp;#39;
│       ├───py311-esbonio: development environment &amp;#39;py311-esbonio&amp;#39;
│       ├───py311-sphinx5: development environment &amp;#39;py311-sphinx5&amp;#39;
│       ├───py311-sphinx6: development environment &amp;#39;py311-sphinx6&amp;#39;
│       ├───py311-sphinx7: development environment &amp;#39;py311-sphinx7&amp;#39;
│       ├───py38-esbonio: development environment &amp;#39;py38-esbonio&amp;#39;
│       ├───py38-sphinx5: development environment &amp;#39;py38-sphinx5&amp;#39;
│       ├───py38-sphinx6: development environment &amp;#39;py38-sphinx6&amp;#39;
│       ├───py38-sphinx7: development environment &amp;#39;py38-sphinx7&amp;#39;
│       ├───py39-esbonio: development environment &amp;#39;py39-esbonio&amp;#39;
│       ├───py39-sphinx5: development environment &amp;#39;py39-sphinx5&amp;#39;
│       ├───py39-sphinx6: development environment &amp;#39;py39-sphinx6&amp;#39;
│       └───py39-sphinx7: development environment &amp;#39;py39-sphinx7&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;The question is, how do we implement &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;applyMatrix&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Well, fast forwarding through plenty of trial and error and a few “aha!” moments I’m now able to tell you!&lt;/p&gt;
&lt;p&gt;First, we need to take the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;buildMatrix&lt;/span&gt;&lt;/code&gt; and expand it out into all possible combinations - thankfully &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nixpkgs&lt;/span&gt;&lt;/code&gt; provides a function that does exactly that&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nix repl
&amp;gt; buildMatrix = { py = [ &amp;quot;38&amp;quot; &amp;quot;39&amp;quot; &amp;quot;310&amp;quot; &amp;quot;311&amp;quot; ]; sphinx = [ &amp;quot;5&amp;quot; &amp;quot;6&amp;quot; &amp;quot;7&amp;quot; ]; }
&amp;gt; allCombinations = nixpkgs.lib.cartesianProductOfSets buildMatrix
&amp;gt; :p allCombinations  # &amp;#39;:p&amp;#39; Overrides nix&amp;#39;s lazy evaluation to print the
                      # fully expanded version of an object
[
  { py = &amp;quot;38&amp;quot;; sphinx = &amp;quot;5&amp;quot;; }
  { py = &amp;quot;38&amp;quot;; sphinx = &amp;quot;6&amp;quot;; }
  { py = &amp;quot;38&amp;quot;; sphinx = &amp;quot;7&amp;quot;; }
  { py = &amp;quot;39&amp;quot;; sphinx = &amp;quot;5&amp;quot;; }
  { py = &amp;quot;39&amp;quot;; sphinx = &amp;quot;6&amp;quot;; }
  { py = &amp;quot;39&amp;quot;; sphinx = &amp;quot;7&amp;quot;; }
  { py = &amp;quot;310&amp;quot;; sphinx = &amp;quot;5&amp;quot;; }
  { py = &amp;quot;310&amp;quot;; sphinx = &amp;quot;6&amp;quot;; }
  { py = &amp;quot;310&amp;quot;; sphinx = &amp;quot;7&amp;quot;; }
  { py = &amp;quot;311&amp;quot;; sphinx = &amp;quot;5&amp;quot;; }
  { py = &amp;quot;311&amp;quot;; sphinx = &amp;quot;6&amp;quot;; }
  { py = &amp;quot;311&amp;quot;; sphinx = &amp;quot;7&amp;quot;; }
]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we need to apply some function over this list to produce the corresponding environment&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; shells = builtins.map ({py, sphinx}: {&amp;quot;py${py}-sphinx${sphinx}&amp;quot; = { }; }) allCombinations
&amp;gt; :p shells
[
  { py38-sphinx5 = { }; }
  { py38-sphinx6 = { }; }
  { py38-sphinx7 = { }; }
  { py39-sphinx5 = { }; }
  { py39-sphinx6 = { }; }
  { py39-sphinx7 = { }; }
  { py310-sphinx5 = { }; }
  { py310-sphinx6 = { }; }
  { py310-sphinx7 = { }; }
  { py311-sphinx5 = { }; }
  { py311-sphinx6 = { }; }
  { py311-sphinx7 = { }; }
]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we need to merge the list of attribute sets down into a single set containing all of the definitions&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; result = builtins.foldl&amp;#39; (x: y: x // y) {} shells
&amp;gt; :p result
{
  py310-sphinx5 = { };
  py310-sphinx6 = { };
  py310-sphinx7 = { };
  py311-sphinx5 = { };
  py311-sphinx6 = { };
  py311-sphinx7 = { };
  py38-sphinx5 = { };
  py38-sphinx6 = { };
  py38-sphinx7 = { };
  py39-sphinx5 = { };
  py39-sphinx6 = { };
  py39-sphinx7 = { };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bringing it all together results in a surprisingly compact function definition!&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;applyMatrix =&lt;/span&gt; matrix&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;foldl&amp;#39; &lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;:&lt;/span&gt; y&lt;span class="p"&gt;:&lt;/span&gt; x &lt;span class="o"&gt;//&lt;/span&gt; y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; f &lt;span class="p"&gt;(&lt;/span&gt;nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;cartesianProductOfSets matrix&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="flakes-and-monorepos"&gt;
&lt;h2&gt;Flakes and Monorepos&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference internal" href="2023/integrate-esboino-nvim-with-nix/"&gt;&lt;span class="doc"&gt;Previously&lt;/span&gt;&lt;/a&gt; I tried adding a “top-level” &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; to the git repository for the &lt;a class="reference external" href="https://github.com/swyddfa/esbonio"&gt;esbonio&lt;/a&gt; language server that depended on another &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; within a sub directory of the same repository.&lt;/p&gt;
&lt;p&gt;It… &lt;a class="reference external" href="https://github.com/swyddfa/esbonio/issues/570"&gt;didn’t work&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m still trying to figure out the best way to approach this but I’m currently leaning towards keeping the multiple &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; files where&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the top-level &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; contains “public” entry-points e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;apps&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;overlays&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“local” &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; files for each sub-project containing entry-points that are mainly useful for contributors to the project e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rather than have the top-level  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; depend on the “local” flakes, use Nix’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;import&lt;/span&gt;&lt;/code&gt; statement to pull in reusable snippets of Nix code from the subprojects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🤞 it works out!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2023/nix-day-to-day/" rel="alternate"/>
    <summary>This blog post marks a change in my usage of Nix, I’m (just!) past the point of trying to get something to work and now starting to incorporate it into some of my regular workflows.
So instead of trying to accomplish some major task, this post is a small collection of things I’ve learned over the past few weeks.</summary>
    <category term="esbonio" label="esbonio"/>
    <category term="nix" label="nix"/>
    <category term="python" label="python"/>
    <published>2023-07-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2023/integrate-esboino-nvim-with-nix/</id>
    <title>Integrating Esbonio with Neovim Using Nix</title>
    <updated>2023-04-21T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="integrating-esbonio-with-neovim-using-nix"&gt;

&lt;p&gt;So far I’ve been learning how to use Nix by trying to package and define development shells for &lt;a class="reference external" href="https://github.com/swyddfa/esbonio"&gt;esbonio&lt;/a&gt; (see &lt;a class="reference internal" href="tag/nix/" title="nix"&gt;&lt;span class="xref std std-ref"&gt;here&lt;/span&gt;&lt;/a&gt; if you are interested).
While useful, the end result is not too dissimilar to what you can get with standard Python tooling.
Indeed, the main reason I started looking into Nix was the promise of it being able to manage more than just Python libraries.&lt;/p&gt;
&lt;p&gt;Since &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; is a language server, it would be useful for Nix to create standardised environments where the language server is pre-configured for a given editor - great for debugging and demos!&lt;/p&gt;
&lt;p&gt;In this blog post I try to define an environment in which Neovim is installed and configured to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; language server for reStructuredText files.&lt;/p&gt;
&lt;div class="admonition-try-it-yourself admonition"&gt;
&lt;p class="admonition-title"&gt;Try it yourself!&lt;/p&gt;
&lt;p&gt;If I’ve done all my homework right, you &lt;strong&gt;should&lt;/strong&gt; be able to try the result of this blog post for yourself
Assuming you have nix installed&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;github:alcarney/esbonio?rev&lt;span class="o"&gt;=&lt;/span&gt;a077efeed176dcad2ae5e4fd221179d266f88ca1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;should be the only command you need.
Let me know if you run into any issues!&lt;/p&gt;
&lt;/div&gt;
&lt;section id="defining-applications"&gt;
&lt;h2&gt;Defining Applications&lt;/h2&gt;
&lt;p&gt;One of the &lt;a class="reference external" href="https://nixos.wiki/wiki/Flakes#Output_schema"&gt;defined flake outputs&lt;/a&gt; is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;apps.&amp;lt;system&amp;gt;.&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/code&gt; which as the name suggests allows you to export applications from a flake.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;description =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Esbonio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;inputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixpkgs-unstable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    utils&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:numtide/flake-utils&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;
    utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        apps&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;type =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;program =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;neovim&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This simple &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; exports neovim as an application which we can launch by running &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;run&lt;/span&gt; &lt;span class="pre"&gt;.&lt;/span&gt;&lt;/code&gt; from the folder containing this flake.&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="https://www.alcarney.me/_images/nix-nvim-myconfig.png" src="https://www.alcarney.me/_images/nix-nvim-myconfig.png" style="width: 50%;" /&gt;
&lt;/figure&gt;
&lt;p&gt;Which works as expected however, it’s also picking up my personal config - not so useful when you’re trying to create a standard, isolated environment.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="isolated-configuration"&gt;
&lt;h2&gt;Isolated Configuration&lt;/h2&gt;
&lt;p&gt;As with most things in Nix, the neovim package definition allows for certain fields to be overridden - including the config.
Let’s start by trying provide an empty &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;init.vim&lt;/span&gt;&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt;
     &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
     &lt;span class="ss"&gt;neovim =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;neovim&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="ss"&gt;configure =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="ss"&gt;customRC =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;         &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;};&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     apps&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="ss"&gt;type =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="ss"&gt;program =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;neovim&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And try &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;run&lt;/span&gt; &lt;span class="pre"&gt;.&lt;/span&gt;&lt;/code&gt; again&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="https://www.alcarney.me/_images/nix-nvim-emptyconfig.png" src="https://www.alcarney.me/_images/nix-nvim-emptyconfig.png" style="width: 50%;" /&gt;
&lt;/figure&gt;
&lt;p&gt;Which worked! Sort of… well… not really. 😕&lt;/p&gt;
&lt;p&gt;It worked in the sense that it loaded the empty &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;init.vim&lt;/span&gt;&lt;/code&gt; file we specified (notice that the screenshot above has no line numbers).
However, it’s not truly isolated since it went ahead and loaded my plugins anyway due to my user’s home folder being included in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;runtimepath&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;To get the contents of your &lt;a class="reference external" href="https://neovim.io/doc/user/options.html#'runtimepath'"&gt;runtimepath&lt;/a&gt;
into a buffer.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;INSERT&lt;/span&gt;&lt;/code&gt; mode type &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;c-r&amp;gt;=&amp;amp;rtp&lt;/span&gt;&lt;/code&gt; and hit enter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replace all commas with newlines &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:%s/,/\r/g&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;So how can we exclude them?&lt;/p&gt;
&lt;section id="nvim-clean"&gt;
&lt;h3&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nvim&lt;/span&gt; &lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Reading through &lt;a class="reference external" href="https://neovim.io/doc/user/options.html#'runtimepath'"&gt;:h ‘runtimepath’&lt;/a&gt; there’s a lot of detail around which paths are searched by default and in what order.
But right at the end there’s a little note&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;div&gt;&lt;p&gt;With &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt; the home directory entries are not included.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Which sounds like just what we need!
The question is… how do we start &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nvim&lt;/span&gt;&lt;/code&gt; with that flag?&lt;/p&gt;
&lt;p&gt;Looking around the nixpkgs repo for a bit I found a set of
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/d8f05d468eb7b0a97cef73b9b6631613cfac13a7/pkgs/applications/editors/neovim/tests/default.nix"&gt;test cases&lt;/a&gt;
that made use of a
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/d8f05d468eb7b0a97cef73b9b6631613cfac13a7/pkgs/applications/editors/neovim/utils.nix#L24"&gt;utility&lt;/a&gt;
for generating a config, along with a
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/d8f05d468eb7b0a97cef73b9b6631613cfac13a7/pkgs/applications/editors/neovim/wrapper.nix"&gt;wrapper&lt;/a&gt;
which converts the given config into a shell script.
This shell script pulls together various components from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/nix/store&lt;/span&gt;&lt;/code&gt;, before ultimately launching our isolated instance of neovim.&lt;/p&gt;
&lt;details class="sd-sphinx-override sd-dropdown sd-card sd-mb-3 admonition info"&gt;
&lt;summary class="sd-summary-title sd-card-header admonition-title"&gt;
Example wrapper script&lt;div class="sd-summary-down docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-down" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M5.22 8.72a.75.75 0 000 1.06l6.25 6.25a.75.75 0 001.06 0l6.25-6.25a.75.75 0 00-1.06-1.06L12 14.44 6.28 8.72a.75.75 0 00-1.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;div class="sd-summary-up docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-up" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M18.78 15.28a.75.75 0 000-1.06l-6.25-6.25a.75.75 0 00-1.06 0l-6.25 6.25a.75.75 0 101.06 1.06L12 9.56l5.72 5.72a.75.75 0 001.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;/summary&gt;&lt;div class="sd-summary-content sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;Here is an example of a wrapper script generated by nix.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /nix/store/0hx32wk55ml88jrb1qxwg5c5yazfm6gf-bash-5.2-p15/bin/bash -e&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;NVIM_SYSTEM_RPLUGIN_MANIFEST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/jjl5fy7dc5cxvc7mi781vxbk8ag89ih0-neovim-0.8.3-esbonio/rplugin.vim&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GEM_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/4mmkiw8n1nhlfsnh4g2kijzkxnp6fyxb-neovim-ruby-env/lib/ruby/gems/2.7.0&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;:+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&amp;#39;/nix/store/4mmkiw8n1nhlfsnh4g2kijzkxnp6fyxb-neovim-ruby-env/bin&amp;#39;&amp;#39;:&amp;#39;&lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/4mmkiw8n1nhlfsnh4g2kijzkxnp6fyxb-neovim-ruby-env/bin&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PATH
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;:+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$LUA_PATH&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&amp;#39;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/share/lua/5.1/?/init.lua&amp;#39;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/share/lua/5.1/?/init.lua&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$LUA_PATH&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LUA_PATH
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;:+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$LUA_PATH&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&amp;#39;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/share/lua/5.1/?.lua&amp;#39;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/share/lua/5.1/?.lua&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$LUA_PATH&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_PATH&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LUA_PATH
&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="p"&gt;:+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$LUA_CPATH&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&amp;#39;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/lib/lua/5.1/?.so&amp;#39;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/lib/lua/5.1/?.so&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$LUA_CPATH&lt;/span&gt;
&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LUA_CPATH&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LUA_CPATH
&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/nix/store/1czj8mydgi30kyfimq6q4ifh06q131ch-neovim-unwrapped-0.8.3/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;/nix/store/fqjv4r08pl8k3vhy6ijxddrn8gpq2h7z-init.vim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--cmd&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;let g:loaded_node_provider=0 | let g:loaded_python_provider=0 | let g:python3_host_prog=&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/jjl5fy7dc5cxvc7mi781vxbk8ag89ih0-neovim-0.8.3-esbonio/bin/nvim-python3&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; | let g:ruby_host_prog=&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/nix/store/jjl5fy7dc5cxvc7mi781vxbk8ag89ih0-neovim-0.8.3-esbonio/bin/nvim-ruby&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;After some trial and error I was able to put together the following&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="ss"&gt;nvim-cfg =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;neovimUtils&lt;span class="o"&gt;.&lt;/span&gt;makeNeovimConfig &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;extraName =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-esbonio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;customRC =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        set number&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="ss"&gt;neovim-config =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;attrsets&lt;span class="o"&gt;.&lt;/span&gt;updateManyAttrsByPath &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;path =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wrapperArgs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="ss"&gt;update =&lt;/span&gt; old&lt;span class="p"&gt;:&lt;/span&gt; old &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;--add-flags&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--clean&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; nvim-cfg&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;neovim =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;wrapNeovimUnstable pkgs&lt;span class="o"&gt;.&lt;/span&gt;neovim-unwrapped neovim-config&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    apps&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;type =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;program =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;neovim&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To summarize&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgs.neovimUtils.makeNeovimConfig&lt;/span&gt;&lt;/code&gt; as the name suggests is a utility that generates a neovim “config”.
“config” in this case is an attribute set containing all the arguments required to call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgs.wrapNeovimUnstable&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of these arguments is called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wrapperArgs&lt;/span&gt;&lt;/code&gt; which contains the list of cli arguments to pass to the wrapped instance of neovim. Well almost.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wrapperArgs&lt;/span&gt;&lt;/code&gt; aren’t passed through to neovim directly, they are passed to a utility called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeWrapper&lt;/span&gt;&lt;/code&gt; which is a small program with it’s own
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/setup-hooks/make-wrapper.sh#L13-L35"&gt;set of arguments&lt;/a&gt;
that allow you to describe how you want to wrap an underlying executable.
This is why I’m appending &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;--add-flags&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;--clean&amp;quot;&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wrapperArgs&lt;/span&gt;&lt;/code&gt; and not just &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, the config and base neovim derivation are passed to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgs.wrapNeovimUnstable&lt;/span&gt;&lt;/code&gt; to bring it all together.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, after all that I still didn’t end up with the result I was looking for&lt;/p&gt;
&lt;figure class="align-center" id="id1"&gt;
&lt;img alt="https://www.alcarney.me/_images/nix-nvim-clean.png" src="https://www.alcarney.me/_images/nix-nvim-clean.png" style="width: 50%;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;No plugins, but also note no line numbers 😢&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not only does the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt; flag prevent neovim from loading the plugins in my home folder, it also stopped neovim from loading the contents of my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;customRC&lt;/span&gt;&lt;/code&gt; - something I would’ve found out if I’d actually read the help text for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt; itself&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;div&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt; - Mimics a fresh install of Nvim:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Skips initializations from files and environment variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No ‘shada’ file is read or written.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Excludes user directories from ‘runtimepath’&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loads builtin plugins, unlike -u NONE -i NONE.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;It should be possible to work around this though by telling neovim to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;source&lt;/span&gt;&lt;/code&gt; our init file as well as giving it the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--clean&lt;/span&gt;&lt;/code&gt; flag.
Let’s take a look at the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; command nix is currently generating for us in the wrapper script.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/nix/store/1czj8mydgi30kyfimq6q4ifh06q131ch-neovim-unwrapped-0.8.3/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;/nix/store/fqjv4r08pl8k3vhy6ijxddrn8gpq2h7z-init.vim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;--cmd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;--clean&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-u&lt;/span&gt; &lt;span class="pre"&gt;/nix/store/fqj...-init.vim&lt;/span&gt;&lt;/code&gt; argument contains the contents of our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;customRC&lt;/span&gt;&lt;/code&gt; and I think changing the command to something like&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/nix/store/1czj8mydgi30kyfimq6q4ifh06q131ch-neovim-unwrapped-0.8.3/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;--clean&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;--cmd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;source /nix/store/fqjv4r08pl8k3vhy6ijxddrn8gpq2h7z-init.vim&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;will result in the behaviour I’m looking for.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;So far I’ve neglected to mention how I’m finding the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/nix/store&lt;/span&gt;&lt;/code&gt; path containing this wrapper script.
Using the nix repl you can load your flake and inspect the values it contains.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;repl
&lt;span class="go"&gt;Welcome to Nix 2.11.1. Type :? for help.&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; :lf .        # load the flake located at &amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio-nix&amp;#39; is dirty&lt;/span&gt;
&lt;span class="go"&gt;Added 9 variables.&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; outputs.apps.x86_64-linux.default&lt;/span&gt;
&lt;span class="go"&gt;{ program = &amp;quot;/nix/store/knr1nfdmg9ld0xg813hb7ljl68060jlv-neovim-0.8.3-esbonio/bin/nvim&amp;quot;; type = &amp;quot;app&amp;quot;; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s also useful for figuring out how the many utilities in nixpkgs work&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;nix-repl&amp;gt; pkgs = import inputs.nixpkgs {system = &amp;quot;x86_64-linux&amp;quot;; }&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; config = pkgs.neovimUtils.makeNeovimConfig { customRC = &amp;quot;set number&amp;quot;; }&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; config.wrapperArgs&lt;/span&gt;
&lt;span class="go"&gt;[ &amp;quot;--inherit-argv0&amp;quot; &amp;quot;--add-flags&amp;quot; &amp;quot;&amp;#39;--cmd&amp;#39; &amp;#39;let g:loaded_node_provider=0 | let g:loaded_python_provider=0 | let g:python3_host_prog=&amp;#39;\\&amp;#39;&amp;#39;/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/bin/nvim-python3&amp;#39;\\&amp;#39;&amp;#39; | let g:ruby_host_prog=&amp;#39;\\&amp;#39;&amp;#39;/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/bin/nvim-ruby&amp;#39;\\&amp;#39;&amp;#39;&amp;#39;&amp;quot; &amp;quot;--set&amp;quot; &amp;quot;GEM_HOME&amp;quot; &amp;quot;/nix/store/4mmkiw8n1nhlfsnh4g2kijzkxnp6fyxb-neovim-ruby-env/lib/ruby/gems/2.7.0&amp;quot; &amp;quot;--suffix&amp;quot; &amp;quot;PATH&amp;quot; &amp;quot;:&amp;quot; &amp;quot;/nix/store/4mmkiw8n1nhlfsnh4g2kijzkxnp6fyxb-neovim-ruby-env/bin&amp;quot; &amp;quot;--prefix&amp;quot; &amp;quot;LUA_PATH&amp;quot; &amp;quot;;&amp;quot; &amp;quot;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/share/lua/5.1/?.lua;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/share/lua/5.1/?/init.lua&amp;quot; &amp;quot;--prefix&amp;quot; &amp;quot;LUA_CPATH&amp;quot; &amp;quot;;&amp;quot; &amp;quot;/nix/store/nlmk08cmald0zi7fc6hgpdqrjz7lh8qj-luajit-2.1.0-2022-10-04-env/lib/lua/5.1/?.so&amp;quot; ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class="m-0 text-white dark:text-gray-800"&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, I could not see an obvious way to rewrite the arguments to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt;.
The store path for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;init.vim&lt;/span&gt;&lt;/code&gt; file is only generated in the depths of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wrapNeovimUnstable&lt;/span&gt;&lt;/code&gt; as it is written to disk and trying to manipulate &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wrapperArgs&lt;/span&gt;&lt;/code&gt; to extract it isn’t something I’m willing to attempt in Nix just yet!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-new-approach"&gt;
&lt;h3&gt;A New Approach&lt;/h3&gt;
&lt;p&gt;It was at this point I started looking around to see what other people have come up with and before long I found
&lt;a class="reference external" href="https://www.reddit.com/r/neovim/comments/v45zkv/any_solution_for_isolated_neovimvim_environments/"&gt;this reddit thread&lt;/a&gt;
which linked
&lt;a class="reference external" href="https://git.sr.ht/~whynothugo/dotfiles/tree/e7c0e701/item/v/flake.nix"&gt;this flake&lt;/a&gt;
that looked very promising.
Not only did it provide a way of creating an isolated config but it also showed how to manage plugins and external binaries!&lt;/p&gt;
&lt;p&gt;Following its example I was able to come up with the following definition&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="ss"&gt;initVim =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;      set number&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;paths =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;makeBinPath &lt;span class="p"&gt;[&lt;/span&gt;
      pkgs&lt;span class="o"&gt;.&lt;/span&gt;neovim
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="ss"&gt;pluginList =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;vimPlugins&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      nvim-lspconfig
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="ss"&gt;plugins =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;stdenv&lt;span class="o"&gt;.&lt;/span&gt;mkDerivation &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;esbonio-nvim-plugins&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;buildCommand =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        mkdir -p $out/nvim/site/pack/plugins/start/&lt;/span&gt;
&lt;span class="s1"&gt;        &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;concatMapStringsSep &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;path&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ln -s &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;path&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; $out/nvim/site/pack/plugins/start/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  pluginList &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="ss"&gt;neovim =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;writeShellScriptBin &lt;span class="s2"&gt;&amp;quot;nvim&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;      export PATH=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;paths&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:$PATH&lt;/span&gt;
&lt;span class="s1"&gt;      export XDG_CONFIG_DIRS=&lt;/span&gt;
&lt;span class="s1"&gt;      export XDG_DATA_DIRS=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;plugins&lt;span class="o"&gt;.&lt;/span&gt;outPath&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s1"&gt;      nvim --clean --cmd source &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;writeText &lt;span class="s2"&gt;&amp;quot;init.vim&amp;quot;&lt;/span&gt; initVim&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; &amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     apps&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="ss"&gt;type =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="ss"&gt;program =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;neovim&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/nvim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And trying &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;run&lt;/span&gt; &lt;span class="pre"&gt;.&lt;/span&gt;&lt;/code&gt; once more&lt;/p&gt;
&lt;figure class="align-center" id="id2"&gt;
&lt;img alt="https://www.alcarney.me/_images/nix-nvim-isolated.png" src="https://www.alcarney.me/_images/nix-nvim-isolated.png" style="width: 50%;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Success!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not only did I end up with the correct configuration, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;runtimepath&lt;/span&gt;&lt;/code&gt; finally contains just the paths that are necessary!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="integrating-esboino"&gt;
&lt;h2&gt;Integrating Esboino&lt;/h2&gt;
&lt;p&gt;Next we need to make sure the esbonio language server is available in this environment and include the necessary configuration for it in the config.&lt;/p&gt;
&lt;p&gt;Including the server should be pretty straightforward as we get to reuse the overlay defined &lt;a class="reference internal" href="2023/nix-overlays-p2/"&gt;&lt;span class="doc"&gt;previously&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight-diff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; inputs = {
&lt;span class="w"&gt; &lt;/span&gt;   nixpkgs.url = &amp;quot;github:NixOS/nixpkgs/nixpkgs-unstable&amp;quot;;
&lt;span class="gi"&gt;+   esbonio.url = &amp;quot;path:lib/esbonio&amp;quot;;&lt;/span&gt;
&lt;span class="gi"&gt;+   esbonio.inputs.nixpkgs.follows = &amp;quot;nixpkgs&amp;quot;;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;   utils.url = &amp;quot;github:numtide/flake-utils&amp;quot;;
&lt;span class="w"&gt; &lt;/span&gt; };

&lt;span class="gd"&gt;- outputs = { self, nixpkgs, utils }:&lt;/span&gt;
&lt;span class="gi"&gt;+ outputs = { self, nixpkgs, esbonio, utils }:&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;utils.lib.eachDefaultSystem (system:
&lt;span class="w"&gt; &lt;/span&gt;  let
&lt;span class="gd"&gt;-    pkgs = import nixpkgs { inherit system ; };&lt;/span&gt;
&lt;span class="gi"&gt;+    pkgs = import nixpkgs { inherit system ; overlays = [ esbonio.overlays.default ];};&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    initVim = &amp;#39;&amp;#39;
&lt;span class="w"&gt; &lt;/span&gt;      set number
&lt;span class="w"&gt; &lt;/span&gt;    &amp;#39;&amp;#39;;
&lt;span class="w"&gt; &lt;/span&gt;    paths = pkgs.lib.makeBinPath [
&lt;span class="w"&gt; &lt;/span&gt;      pkgs.neovim
&lt;span class="gi"&gt;+      pkgs.python310Packages.esbonio&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    ];
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Should&lt;/strong&gt; being the key word here…&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio-nix&amp;#39; is dirty&lt;/span&gt;
&lt;span class="go"&gt;warning: updating lock file &amp;#39;/var/home/alex/Projects/esbonio-nix/flake.lock&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;• Added input &amp;#39;esbonio&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    &amp;#39;path:lib/esbonio?lastModified=1&amp;amp;narHash=sha256-WiFypw4lUZo7P9h82NMudwb5DFV0Nde5cOu1SqDmhVQ=&amp;#39; (1970-01-01)&lt;/span&gt;
&lt;span class="go"&gt;• Added input &amp;#39;esbonio/nixpkgs&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    follows &amp;#39;nixpkgs&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;• Added input &amp;#39;esbonio/pytest-lsp&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    &amp;#39;github:swyddfa/lsp-devtools/6ae80a24b55d2b6943b9d30805cf02440ebbaf5c?dir=lib%2fpytest-lsp&amp;#39; (2023-04-02)&lt;/span&gt;
&lt;span class="go"&gt;• Added input &amp;#39;esbonio/pytest-lsp/nixpkgs&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    follows &amp;#39;esbonio/nixpkgs&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;• Added input &amp;#39;esbonio/pytest-lsp/utils&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    &amp;#39;github:numtide/flake-utils/93a2b84fc4b70d9e089d029deacc3583435c2ed6&amp;#39; (2023-03-15)&lt;/span&gt;
&lt;span class="go"&gt;• Added input &amp;#39;esbonio/utils&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    &amp;#39;github:numtide/flake-utils/5aed5285a952e0b949eb3ba02c12fa4fcfef535f&amp;#39; (2022-11-02)&lt;/span&gt;
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio-nix&amp;#39; is dirty&lt;/span&gt;
&lt;span class="go"&gt;error: undefined variable &amp;#39;pytest-lsp&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;       at /nix/store/96z740kkay7j0cbgmccj2mzbn5z8agvp-source/nix/esbonio-overlay.nix:22:11:&lt;/span&gt;

&lt;span class="go"&gt;           21|           mock&lt;/span&gt;
&lt;span class="go"&gt;           22|           pytest-lsp&lt;/span&gt;
&lt;span class="go"&gt;             |           ^&lt;/span&gt;
&lt;span class="go"&gt;           23|           pytest-timeout&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The overlay exported by the language server’s flake doesn’t include its dependency &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; which is provided through an overlay of its own.
A quick “fix” would be to also pull in the flake for pytest-lsp, but really the language server’s flake should be exporting all of its dependencies.&lt;/p&gt;
&lt;section id="composing-overlays"&gt;
&lt;h3&gt;Composing Overlays&lt;/h3&gt;
&lt;p&gt;Thankfully, nixpkgs provides a function
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/3eb57ca9451406a7131f54b8a90b82462ad89252/lib/fixed-points.nix#L86"&gt;composeManyExtensions&lt;/a&gt;
that handles this for us.
When exporting the overlay from within the language server’s flake we can use it to merge the overlay from pytest-lsp with the overlay containing esbonio.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In lib/esbonio/flake.nix&lt;/span&gt;
&lt;span class="n"&gt;overlays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nixpkgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;composeManyExtensions&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lsp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;
  &lt;span class="n"&gt;esbonio&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;overlay&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, since &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.lock&lt;/span&gt;&lt;/code&gt; freezes the language server’s flake as it was before we made this change we need to also update the lock file before trying again&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;flake&lt;span class="w"&gt; &lt;/span&gt;lock&lt;span class="w"&gt; &lt;/span&gt;--update-input&lt;span class="w"&gt; &lt;/span&gt;esbonio
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio-nix&amp;#39; is dirty&lt;/span&gt;
&lt;span class="go"&gt;warning: updating lock file &amp;#39;/var/home/alex/Projects/esbonio-nix/flake.lock&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;• Updated input &amp;#39;esbonio&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    &amp;#39;path:lib/esbonio?lastModified=1&amp;amp;narHash=sha256-WiFypw4lUZo7P9h82NMudwb5DFV0Nde5cOu1SqDmhVQ=&amp;#39; (1970-01-01)&lt;/span&gt;
&lt;span class="go"&gt;  → &amp;#39;path:lib/esbonio?lastModified=1&amp;amp;narHash=sha256-QgSDxOPSrtsaqjeStalef07+bUE3qkzz7pJC4y43ltw=&amp;#39; (1970-01-01)&lt;/span&gt;
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio-nix&amp;#39; is dirty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now trying &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;run&lt;/span&gt; &lt;span class="pre"&gt;.&lt;/span&gt;&lt;/code&gt; again neovim launches as before, running the command &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:r&lt;/span&gt; &lt;span class="pre"&gt;!python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;esbonio&lt;/span&gt; &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/code&gt; we can verify that the language server is indeed available to the editor.&lt;/p&gt;
&lt;figure class="align-center" id="id3"&gt;
&lt;img alt="https://www.alcarney.me/_images/nix-nvim-esbonio-help.png" src="https://www.alcarney.me/_images/nix-nvim-esbonio-help.png" style="width: 50%;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Almost there!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="admonition-editor-s-note admonition"&gt;
&lt;p class="admonition-title"&gt;Editor’s Note&lt;/p&gt;
&lt;p&gt;Since writing this section and taking the above screenshot, I have been unable to re-produce it!
Now &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:r&lt;/span&gt; &lt;span class="pre"&gt;!python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;esbonio&lt;/span&gt; &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/code&gt; results in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio:&lt;/span&gt; &lt;span class="pre"&gt;Module&lt;/span&gt; &lt;span class="pre"&gt;not&lt;/span&gt; &lt;span class="pre"&gt;found&lt;/span&gt;&lt;/code&gt; error…&lt;/p&gt;
&lt;p&gt;When debugging this, I’m not sure how the original ever worked since the flake definition does not include
a Python interpreter meaning that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;esbonio&lt;/span&gt; &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/code&gt; is running under the system Python.&lt;/p&gt;
&lt;p&gt;The fix then, was to switch from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;esbonio&lt;/span&gt; &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/code&gt; to calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt; &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/code&gt; directly, which thankfully, did not require me to change any of the Nix code.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="configuring-neovim"&gt;
&lt;h3&gt;Configuring Neovim&lt;/h3&gt;
&lt;p&gt;Now all that’s left to do is updating our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;initVim&lt;/span&gt;&lt;/code&gt; variable to contain the relevant configuration for the language server.
Thanks to the
&lt;a class="reference external" href="https://swyddfa.github.io/esbonio/docs/latest/en/lsp/getting-started.html?editor=neovim-lspconfig#examples"&gt;example configuration&lt;/a&gt;
available in the documentation, this can be as straightforward as replacing our hardcoded configuration with a call to Nix (the language’s) builtin
&lt;a class="reference external" href="https://nixos.org/manual/nix/stable/language/builtins.html#builtins-readFile"&gt;readFile&lt;/a&gt;
function.&lt;/p&gt;
&lt;div class="highlight-diff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;utils.lib.eachDefaultSystem (system:
&lt;span class="w"&gt; &lt;/span&gt;  let
&lt;span class="w"&gt; &lt;/span&gt;    pkgs = import nixpkgs { inherit system ; overlays = [ esbonio.overlays.default ];};
&lt;span class="gd"&gt;-    initVim = &amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="gd"&gt;-      set number&lt;/span&gt;
&lt;span class="gd"&gt;-    &amp;#39;&amp;#39;;&lt;/span&gt;
&lt;span class="gi"&gt;+    initVim = builtins.readFile ./docs/lsp/editors/nvim-lspconfig/init.vim;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    paths = pkgs.lib.makeBinPath [
&lt;span class="w"&gt; &lt;/span&gt;      pkgs.neovim
&lt;span class="w"&gt; &lt;/span&gt;      pkgs.python310Packages.esbonio
&lt;span class="w"&gt; &lt;/span&gt;    ];
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And try opening a Sphinx project with it&lt;/p&gt;
&lt;figure class="align-center" id="id4"&gt;
&lt;img alt="https://www.alcarney.me/_images/nix-nvim-esbonio-minimal.png" src="https://www.alcarney.me/_images/nix-nvim-esbonio-minimal.png" style="width: 50%;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;It’s not pretty, but it works!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;The experience as is currently stands is not that inspiring however, with the nix foundations laid it’s now more of a configuring neovim problem rather than a nix one!
I am mildly disappointed that this required to dive so deep on the specifics of how neovim is configured, since that probably means you’d have to go to a similar depth to incorporate other editors.
That said, once you’ve solved it for a given editor it’s probably solved “forever”.&lt;/p&gt;
&lt;p&gt;Next I think I’d be interested in exploring how (or if it’s even possible) to make these Nix definitions more dynamic e.g.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Using the language server from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$EDITOR&lt;/span&gt;&lt;/code&gt; using Python &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;3.x&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the language server tests, but with a local checkout of &lt;a class="reference external" href="https://github.com/openlawlibrary/pygls"&gt;pygls&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit docs for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$PROJECT&lt;/span&gt;&lt;/code&gt; using Sphinx &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vX&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, you could achieve a lot of that by just editing the Nix definitions and rebuilding but I wonder if it’s possible to build in support for swapping parts out that can be wrapped up in a Makefile or similar 🤔&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2023/integrate-esboino-nvim-with-nix/" rel="alternate"/>
    <summary>So far I’ve been learning how to use Nix by trying to package and define development shells for esbonio (see here if you are interested).
While useful, the end result is not too dissimilar to what you can get with standard Python tooling.
Indeed, the main reason I started looking into Nix was the promise of it being able to manage more than just Python libraries.Since esbonio is a language server, it would be useful for Nix to create standardised environments where the language server is pre-configured for a given editor - great for debugging and demos!In this blog post I try to define an environment in which Neovim is installed and configured to use the esbonio language server for reStructuredText files.</summary>
    <category term="esbonio" label="esbonio"/>
    <category term="nix" label="nix"/>
    <category term="python" label="python"/>
    <published>2023-04-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2023/nix-overlays-p2/</id>
    <title>Nix Overlays: A follow up</title>
    <updated>2023-04-02T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="nix-overlays-a-follow-up"&gt;

&lt;p&gt;It turns out there were a few issues with the setup I put together in my &lt;a class="reference internal" href="2023/nix-overlays/"&gt;&lt;span class="doc"&gt;previous post&lt;/span&gt;&lt;/a&gt;.
This time I try and resolve them and get to the point where I have working overlays for both
&lt;a class="reference external" href="https://github.com/swyddfa/lsp-devtools/tree/develop/lib/pytest-lsp"&gt;pytest-lsp&lt;/a&gt;
and
&lt;a class="reference external" href="https://github.com/swyddfa/esbonio"&gt;esbonio&lt;/a&gt;.&lt;/p&gt;
&lt;section id="dependency-is-not-of-valid-type"&gt;
&lt;h2&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Dependency&lt;/span&gt; &lt;span class="pre"&gt;is&lt;/span&gt; &lt;span class="pre"&gt;not&lt;/span&gt; &lt;span class="pre"&gt;of&lt;/span&gt; &lt;span class="pre"&gt;valid&lt;/span&gt; &lt;span class="pre"&gt;type&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;At the end of the previous post, I was left scratching my head after encountering a cryptic error message&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: Dependency is not of a valid type: element 4 of nativeBuildInputs for py310&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which was coming from the following &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;description =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Esbonio language server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;inputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixpkgs-unstable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="hll"&gt;    pytest-lsp&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:swyddfa/lsp-devtools?dir=lib/pytest-lsp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;    utils&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:numtide/flake-utils&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="hll"&gt;  &lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; pytest-lsp&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;
&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;
      &lt;span class="ss"&gt;esbonio-overlay =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/esbonio-overlay.nix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; versions&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;listToAttrs &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;version&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; f version&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; versions&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    overlays&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default =&lt;/span&gt; esbonio-overlay&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; pytest-lsp&lt;span class="o"&gt;.&lt;/span&gt;overlays&lt;span class="o"&gt;.&lt;/span&gt;pytest-lsp esbonio-overlay &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;in&lt;/span&gt;
        eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; mkShell &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              esbonio
              mock
              pytest
&lt;span class="hll"&gt;              pytest-lsp
&lt;/span&gt;              pytest-timeout
            &lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Originally, I thought this was caused by naming conflicts introduced by using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; to reference both &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; the flake, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; the Python package.
Indeed, changing the name of the flake input to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytestlsp&lt;/span&gt;&lt;/code&gt; seemed to at least change the error message I was seeing…&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: undefined variable &amp;#39;pytest-lsp&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;       at /nix/store/dihmz79kgwxj1v5mqvxrj0f3ifgvpm9f-source/lib/esbonio/flake.nix:38:15:&lt;/span&gt;

&lt;span class="go"&gt;           37|               pytest&lt;/span&gt;
&lt;span class="go"&gt;           38|               pytest-lsp&lt;/span&gt;
&lt;span class="go"&gt;             |               ^&lt;/span&gt;
&lt;span class="go"&gt;           39|               pytest-timeout&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;How can that be?!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conflicting-overlays"&gt;
&lt;h2&gt;Conflicting Overlays&lt;/h2&gt;
&lt;p&gt;It turns out that the overlays &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytestlsp.overlays.pytest-lsp&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio-overlay&lt;/span&gt;&lt;/code&gt; conflict with each other!
I am not sure what originally led me to try it, but by reversing their order in the array passed to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nixpkgs&lt;/span&gt;&lt;/code&gt; I could produce a similar error for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: undefined variable &amp;#39;esbonio&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;       at /nix/store/vqff8bn03r11m1fg4f0b7ixnj731g9br-source/lib/esbonio/flake.nix:34:15:&lt;/span&gt;

&lt;span class="go"&gt;           33|             packages = with pkgs.&amp;quot;python${pyVersion}Packages&amp;quot;; [&lt;/span&gt;
&lt;span class="go"&gt;           34|               esbonio&lt;/span&gt;
&lt;span class="go"&gt;             |               ^&lt;/span&gt;
&lt;span class="go"&gt;           35|&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But why? 🤔
I thought the whole point of overlays were so that they could be… well, overlayed on an underlying package set without conflicting with each other??&lt;/p&gt;
&lt;/section&gt;
&lt;section id="use-the-source-luke"&gt;
&lt;h2&gt;Use the Source Luke&lt;/h2&gt;
&lt;p&gt;To find the answer, I had to remind myself that Nix is &lt;strong&gt;not&lt;/strong&gt; magic (although it can appear to be!) and instead, at it’s core, Nix is a programming language.
Which means this concept of “overlays” must be implemented in code &lt;em&gt;somewhere&lt;/em&gt; and we can look for ourselves to see how they are handled.
Sure enough, after some splunking through the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nixpkgs&lt;/span&gt;&lt;/code&gt; repo I was able to track down
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/commit/f5dfe78a1eb5ff8dfcc7ab37cfc132c5f31d3cef"&gt;the commit&lt;/a&gt;
introducing the concept.&lt;/p&gt;
&lt;p&gt;The majority of that commit appears to be just passing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;overlays&lt;/span&gt;&lt;/code&gt; array through to all the places that require it and updating the documentation.
The interesting part is where the overlays are actually applied at the bottom of
&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/f5dfe78a1eb5ff8dfcc7ab37cfc132c5f31d3cef/pkgs/top-level/stage.nix#L84-L96"&gt;pkgs/top-level/stage.nix&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="c1"&gt;# The complete chain of package set builders, applied from top to bottom&lt;/span&gt;
  &lt;span class="ss"&gt;toFix =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;foldl&amp;#39; &lt;span class="p"&gt;(&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;flip lib&lt;span class="o"&gt;.&lt;/span&gt;extends&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;self&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;
    stdenvBootstappingAndPlatforms
    stdenvAdapters
    trivialBuilders
    allPackages
    aliases
    stdenvOverrides
    configOverrides
    &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; overlays&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="c1"&gt;# Return the complete set of packages.&lt;/span&gt;
  lib&lt;span class="o"&gt;.&lt;/span&gt;fix toFix
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From what I understand&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/f5dfe78a1eb5ff8dfcc7ab37cfc132c5f31d3cef/lib/lists.nix#L61"&gt;lib.foldl’&lt;/a&gt;
applies some combination function - &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(lib.flip&lt;/span&gt; &lt;span class="pre"&gt;lib.extends)&lt;/span&gt;&lt;/code&gt; in this case, to a list resulting in a single aggregated value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/f5dfe78a1eb5ff8dfcc7ab37cfc132c5f31d3cef/lib/trivial.nix#L82"&gt;lib.flip&lt;/a&gt;
switches the order of the arguments given to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lib.extends&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/f5dfe78a1eb5ff8dfcc7ab37cfc132c5f31d3cef/lib/trivial.nix#L54"&gt;lib.extends&lt;/a&gt;
is the function we’re actually interested in as it is responsible for applying the overlays.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/f5dfe78a1eb5ff8dfcc7ab37cfc132c5f31d3cef/lib/trivial.nix#L29"&gt;lib.fix&lt;/a&gt;
appears to resolve all references to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;self&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;toFix&lt;/span&gt;&lt;/code&gt; to a “proper” value, but I’m not entirely sure how.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the implementation of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lib.extends&lt;/span&gt;&lt;/code&gt; as of the commit introducing overlays&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;extends =&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt; rattrs&lt;span class="p"&gt;:&lt;/span&gt; self&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="ss"&gt;super =&lt;/span&gt; rattrs self&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; super &lt;span class="o"&gt;//&lt;/span&gt; f self super&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As with most things in Nix, I don’t really understand the fine details but it’s interesting to see that it uses the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//&lt;/span&gt;&lt;/code&gt; operator to merge the result of an overlay (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;f&lt;/span&gt; &lt;span class="pre"&gt;self&lt;/span&gt; &lt;span class="pre"&gt;super&lt;/span&gt;&lt;/code&gt;) with the current state of the package set (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;super&lt;/span&gt;&lt;/code&gt;).
One thing that’s interesting to note, when combining attribute sets with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//&lt;/span&gt;&lt;/code&gt; operator, if both sets contain the same key, then the value from the original set is replaced with the value provided by the second.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;repl
&lt;span class="go"&gt;Welcome to Nix 2.11.1. Type :? for help.&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; x = {a = 1 ; b = 2; c = 3;}&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; y = {d = 4; c = 5;}&lt;/span&gt;

&lt;span class="go"&gt;nix-repl&amp;gt; x // y&lt;/span&gt;
&lt;span class="go"&gt;{ a = 1; b = 2; c = 5; d = 4; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Foreshadowing…&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Armed with my new found knowledge I had another look at the definitions of the problematic overlays.&lt;/p&gt;
&lt;div class="flex flex-col md-flex-row justify-between gap-4 docutils container"&gt;
&lt;div class="overflow-x-auto highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pytest-lsp-overlay.nix&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt;

self&lt;span class="p"&gt;:&lt;/span&gt; super&lt;span class="p"&gt;:&lt;/span&gt;

eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;  super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span class="ss"&gt;packageOverrides =&lt;/span&gt; pyself&lt;span class="p"&gt;:&lt;/span&gt; pysuper&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="overflow-x-auto highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# esbonio-overlay.nix&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt;

self&lt;span class="p"&gt;:&lt;/span&gt; super&lt;span class="p"&gt;:&lt;/span&gt;

eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;  super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span class="ss"&gt;packageOverrides =&lt;/span&gt; pyself&lt;span class="p"&gt;:&lt;/span&gt; pysuper&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;esbonio =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well no wonder they conflict with each other, they’re overriding the base &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pythonXY&lt;/span&gt;&lt;/code&gt; package directly!
Any &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;packageOverrides&lt;/span&gt;&lt;/code&gt; provided by the first overlay would be wiped out when the second is applied.
Surely then there must be a better way to provide your own Python package definitions 🤔&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Somewhat buried on the &lt;a class="reference external" href="https://nixos.org/manual/nixpkgs/stable/#python"&gt;Python page&lt;/a&gt; in the Nixpkgs manual is this handy FAQ question&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;div&gt;&lt;p&gt;17.27.3.9. How to override a Python package for all Python versions using extensions?&lt;/p&gt;
&lt;p&gt;The following overlay overrides the call to buildPythonPackage for the foo package for all interpreters by appending a Python extension to the pythonPackagesExtensions list of extensions.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pythonPackagesExtensions =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;pythonPackagesExtensions &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
       python-final&lt;span class="p"&gt;:&lt;/span&gt; python-prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="ss"&gt;foo =&lt;/span&gt; python-prev&lt;span class="o"&gt;.&lt;/span&gt;foo&lt;span class="o"&gt;.&lt;/span&gt;overridePythonAttrs &lt;span class="p"&gt;(&lt;/span&gt;oldAttrs&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This might be just what we need!
Not only do we avoid messing with the base Python package, we also get our packages automatically added to each Python version without the need to roll our own &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachPythonVerison&lt;/span&gt;&lt;/code&gt; helper!&lt;/p&gt;
&lt;p&gt;Converting my &lt;a class="reference internal" href="2023/nix-overlays/#nix-overlays-sharing"&gt;&lt;span class="std std-ref"&gt;previous overlay attempts&lt;/span&gt;&lt;/a&gt; to the above approach results in overlay definitions that are a lot more straight forward.
Notice that I was even able to enable tests for them now!&lt;/p&gt;
&lt;div class="flex flex-col md-flex-row justify-between gap-4 docutils container"&gt;
&lt;div class="overflow-x-auto highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pytest-lsp-overlay.nix&lt;/span&gt;
final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pythonPackagesExtensions =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;pythonPackagesExtensions &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;
    python-final&lt;span class="p"&gt;:&lt;/span&gt; python-prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; python-prev&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;pname =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pytest-lsp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.2.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;src =&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/..&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; python-prev&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          pygls
          pytest
          pytest-asyncio
        &lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="ss"&gt;doCheck =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;nativeCheckInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; python-prev&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          pytestCheckHook
        &lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="ss"&gt;pythonImportsCheck =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pytest_lsp&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="overflow-x-auto highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# esbonio-overlay.nix&lt;/span&gt;
final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pythonPackagesExtensions =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;pythonPackagesExtensions &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;
    python-final&lt;span class="p"&gt;:&lt;/span&gt; python-prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;esbonio =&lt;/span&gt; python-prev&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;pname =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;esbonio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.16.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;src =&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/..&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; python-prev&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          appdirs
          pygls
          pyspellchecker
          sphinx
          &lt;span class="c1"&gt;# typing-extensions; only required for Python 3.7&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="ss"&gt;doCheck =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;nativeCheckInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; python-prev&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          mock
          pytest-lsp
          pytest-timeout
          pytestCheckHook
        &lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="ss"&gt;pythonImportsCheck =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;esbonio.lsp&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All that is left to do is to try and enter the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; for esbonio again&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: builder for &amp;#39;/nix/store/027wakjv9wvws6190c66nf5gxc6smc54-python3.10-esbonio-0.16.1.drv&amp;#39; failed with exit code 2;&lt;/span&gt;
&lt;span class="go"&gt;       last 10 log lines:&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; /nix/store/l69b9xl4pnqqgdx9vp1yg1cbckgcjsfx-python3.10-pytest-7.2.0/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:168: in exec_module&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt;     exec(co, module.__dict__)&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; tests/sphinx-default/conftest.py:53: in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt;     ClientServerConfig(&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; E   TypeError: ClientServerConfig.__init__() got an unexpected keyword argument &amp;#39;client&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; =========================== short test summary info ============================&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; ERROR  - TypeError: ClientServerConfig.__init__() got an unexpected keyword argument...&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; !!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; =============================== 1 error in 0.60s ===============================&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; /nix/store/3yfs41f4b60jya2gk6xikx4s97zsxjr0-stdenv-linux/setup: line 1573: pop_var_context: head of shell_variables not a function context&lt;/span&gt;
&lt;span class="go"&gt;For full logs, run &amp;#39;nix log /nix/store/027wakjv9wvws6190c66nf5gxc6smc54-python3.10-esbonio-0.16.1.drv&amp;#39;.&lt;/span&gt;
&lt;span class="go"&gt;error: 1 dependencies of derivation &amp;#39;/nix/store/nms3hs5pz1fmyki4k547gfs1281klgl3-py310-env.drv&amp;#39; failed to build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hey! At least the Nix part is finally working!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="disabling-tests"&gt;
&lt;span id="nix-overlays-disable-tests"&gt;&lt;/span&gt;&lt;h2&gt;Disabling Tests&lt;/h2&gt;
&lt;p&gt;There’s one final detail left to clear up.&lt;/p&gt;
&lt;p&gt;Of course, if you are consuming a package (like how &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; is pulling in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt;) it’s good to have the tests run so that you can verify everything is working as expected.
However, when you are setting up a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; to work on a package, you don’t really want the tests to run since they will prevent you entering the shell if they fail - as is the case here.&lt;/p&gt;
&lt;p&gt;Thankfully, it should just be a case of setting the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doCheck&lt;/span&gt;&lt;/code&gt; flag for esbonio to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;false&lt;/span&gt;&lt;/code&gt; when using it within the flake’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; definition.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; pytest-lsp-overlay esbonio-overlay &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt;
    eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
      pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          esbonio&lt;span class="o"&gt;.&lt;/span&gt;overridePythonAttrs &lt;span class="p"&gt;(&lt;/span&gt;_&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;doCheck =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

          mock
          &lt;span class="c1"&gt;# Still necessary to avoid a naming conflict with pytest-lsp, the flake&lt;/span&gt;
          pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;pytest-lsp
          pytest-timeout
        &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And activating the shell as normal.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: Dependency is not of a valid type: element 1 of nativeBuildInputs for py310&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;No! Not again! 😭&lt;/p&gt;
&lt;p&gt;To be honest, I nearly gave up on the whole idea then and there but in a last ditch attempt I moved the overriden &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; package out into a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;let&lt;/span&gt;&lt;/code&gt; binding.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt;
     &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; pytest-lsp-overlay esbonio-overlay &lt;span class="p"&gt;];&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="k"&gt;in&lt;/span&gt;
     eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;

       &lt;span class="k"&gt;let&lt;/span&gt;
&lt;span class="hll"&gt;         &lt;span class="ss"&gt;esbonio =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;esbonio&lt;span class="o"&gt;.&lt;/span&gt;overridePythonAttrs &lt;span class="p"&gt;(&lt;/span&gt;_&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;doCheck =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/span&gt;       &lt;span class="k"&gt;in&lt;/span&gt;

       pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

         &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           esbonio

           mock
           pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;pytest-lsp
           pytest-timeout
         &lt;span class="p"&gt;];&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And tried again&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# -L = enable verbose logging, useful to actually see what the builds are doing.&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Sourcing python-remove-tests-dir-hook&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Sourcing python-catch-conflicts-hook.sh&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Sourcing python-remove-bin-bytecode-hook.sh&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Sourcing setuptools-build-hook&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Using setuptoolsBuildPhase&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Using setuptoolsShellHook&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Sourcing pip-install-hook&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Using pipInstallPhase&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; patching script interpreter paths in /nix/store/a9xjjxv1zh3dmhfaxgph8kq0zaxl92g3-python3.10-esbonio-0.16.1-dist&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Rewriting #!/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/bin/python3.10 to #!/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; wrapping `/nix/store/91b7mh7ib0fxwn2kgv47v0sdpl05xqh1-python3.10-esbonio-0.16.1/bin/esbonio&amp;#39;...&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Rewriting #!/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/bin/python3.10 to #!/nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; wrapping `/nix/store/91b7mh7ib0fxwn2kgv47v0sdpl05xqh1-python3.10-esbonio-0.16.1/bin/esbonio-sphinx&amp;#39;...&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Executing pythonRemoveTestsDir&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Finished executing pythonRemoveTestsDir&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; pythonCatchConflictsPhase&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; pythonRemoveBinBytecodePhase&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; pythonImportsCheckPhase&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Executing pythonImportsCheckPhase&lt;/span&gt;
&lt;span class="go"&gt;python3.10-esbonio&amp;gt; Check whether the following modules can be imported: esbonio.lsp&lt;/span&gt;

&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And it actually worked! 🤯&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have no idea why Nix needed me to move the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;overridePythonAttrs&lt;/span&gt;&lt;/code&gt; call out into a separate &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;let&lt;/span&gt;&lt;/code&gt; binding, but hey it works!&lt;/p&gt;
&lt;p&gt;I’ve finally managed to recreate the setup I had in my &lt;a class="reference internal" href="2022/first-steps-with-nix/"&gt;&lt;span class="doc"&gt;original&lt;/span&gt;&lt;/a&gt; blog post, spinning up &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt; in order to test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; against a range of Python versions - just with the added flexibility that working with overlays can bring.&lt;/p&gt;
&lt;p&gt;If you’re interested you can find the final version of all my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*.nix&lt;/span&gt;&lt;/code&gt; files
&lt;a class="reference external" href="https://github.com/swyddfa/lsp-devtools/commit/6ae80a24b55d2b6943b9d30805cf02440ebbaf5c"&gt;here (pytest-lsp)&lt;/a&gt;
and
&lt;a class="reference external" href="https://github.com/alcarney/esbonio/commit/6830a5fd0fe4c4f197d591d35d189a17fc561146"&gt;here (esbonio)&lt;/a&gt;.
Hopefully next time we can build on this and finally use Nix for something you can’t get out of standard Python tooling! 😅&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2023/nix-overlays-p2/" rel="alternate"/>
    <summary>It turns out there were a few issues with the setup I put together in my previous post.
This time I try and resolve them and get to the point where I have working overlays for both
pytest-lsp
and
esbonio.</summary>
    <category term="esbonio" label="esbonio"/>
    <category term="nix" label="nix"/>
    <category term="pytest-lsp" label="pytest-lsp"/>
    <category term="python" label="python"/>
    <published>2023-04-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2023/nix-overlays/</id>
    <title>My Next Steps with Nix: Overlays</title>
    <updated>2023-01-25T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="my-next-steps-with-nix-overlays"&gt;

&lt;p&gt;&lt;a class="reference internal" href="2022/first-steps-with-nix/"&gt;&lt;span class="doc"&gt;Last time&lt;/span&gt;&lt;/a&gt;, I experimented with writing a flake that defined development environments for the &lt;a class="reference external" href="https://pypi.org/project/esbonio"&gt;esbonio&lt;/a&gt; package spanning multiple Python versions.
During that process I also packaged &lt;a class="reference external" href="https://pypi.org/project/pytest-lsp"&gt;pytest-lsp&lt;/a&gt; using an ad-hoc nix expression as part of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; repo.&lt;/p&gt;
&lt;p&gt;In this post I look into writing a similar flake for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; package itself, but this time using overlays to override and extend the nixpkgs package set.&lt;/p&gt;
&lt;p&gt;If you are interested, you can find the final version of the code
&lt;a class="reference external" href="https://github.com/swyddfa/lsp-devtools/commit/a7b8d545364cc14c1cd054fd56831d0bd3517659"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;section id="packaging-pytest-lsp"&gt;
&lt;h2&gt;Packaging &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Adapting the
&lt;a class="reference external" href="https://github.com/alcarney/esbonio/commit/f62e1d486bb7899d802bfd668f98f21b71702317#diff-12d8883e85761c056008578af1202737eabc12dbdb4cee164b96cdb77a8be96b"&gt;flake.nix&lt;/a&gt;
file and using the
&lt;a class="reference external" href="https://github.com/alcarney/esbonio/commit/f62e1d486bb7899d802bfd668f98f21b71702317#diff-592a771a0632b893c90066d07d7b260e4847eff70e8b47e9dcd0806014dcfc6d"&gt;package definition&lt;/a&gt;
from the previous post, it’s easy enough to sketch out a flake that should give us a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; to work on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;However, trying to activate one we encounter a problem.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: builder for &amp;#39;/nix/store/dfd5bixdgkvfcnfa7f9z0ibp4m5zlhkz-python3.10-pytest-lsp-0.2.1.drv&amp;#39; failed with exit code 1;&lt;/span&gt;
&lt;span class="go"&gt;       last 10 log lines:&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; installing&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Executing pipInstallPhase&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; /build/pytest-lsp/dist /build/pytest-lsp&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Processing ./pytest_lsp-0.2.1-py3-none-any.whl&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Requirement already satisfied: appdirs in /nix/store/yidjmqc5q1j0fz2dk79qgk1fy7dqcliy-python3.10-appdirs-1.4.4/lib/python3.10/site-packages (from pytest-lsp==0.2.1) (1.4.4)&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Requirement already satisfied: pytest-asyncio in /nix/store/dvz12bivdc0dkn6849zm58754ga06hs6-python3.10-pytest-asyncio-0.20.3/lib/python3.10/site-packages (from pytest-lsp==0.2.1) (0.20.3)&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Requirement already satisfied: pytest in /nix/store/z5pkmmsdg3bmb35pmsv4rjca1qi7dbnf-python3.10-pytest-7.2.0/lib/python3.10/site-packages (from pytest-lsp==0.2.1) (7.2.0)&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="go"&gt;       &amp;gt; ERROR: Could not find a version that satisfies the requirement pygls&amp;gt;=1.0.0 (from pytest-lsp) (from versions: none)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;       &amp;gt; ERROR: No matching distribution found for pygls&amp;gt;=1.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span class="go"&gt;       &amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;       For full logs, run &amp;#39;nix log /nix/store/dfd5bixdgkvfcnfa7f9z0ibp4m5zlhkz-python3.10-pytest-lsp-0.2.1.drv&amp;#39;.&lt;/span&gt;
&lt;span class="go"&gt;error: 1 dependencies of derivation &amp;#39;/nix/store/kfzlz750xdk71fxwvsgpdbw1w00jbvf9-py310-env.drv&amp;#39; failed to build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the time between writing the previous blog post and this one, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; package has been migrated to the latest version of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pygls&lt;/span&gt;&lt;/code&gt;.
The version available through nixpkgs however, is still the previous release.&lt;/p&gt;
&lt;p&gt;While there is an open &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/pull/204457"&gt;pull request&lt;/a&gt; updating &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pygls&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.0&lt;/span&gt;&lt;/code&gt;, at the time of writing it’s blocked on downstream packages which haven’t migrated yet.&lt;/p&gt;
&lt;p&gt;That said, we don’t have to wait for nixpkgs but can instead use an overlay to update it just for this project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="overriding-pygls-version"&gt;
&lt;h2&gt;Overriding pygls’ version&lt;/h2&gt;
&lt;p&gt;Overlays can be used to override sections of an existing package definition.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;As I mentioned in the previous post, I’m probably not the best person to learn Nix from.
Instead, here are some resources you might useful which go into more detail.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The NixOS &lt;a class="reference external" href="https://nixos.wiki/wiki/Overlays"&gt;wiki page&lt;/a&gt; on Overlays&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nix Pills: &lt;a class="reference external" href="https://nixos.org/guides/nix-pills/override-design-pattern.html"&gt;Chapter 14. Override design pattern&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;As far as I understand it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Overlays are a useful design pattern, rather than a fundamental concept of the Nix language.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They are “just” a nix function that have access to both the modified version (usually called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;self&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;final&lt;/span&gt;&lt;/code&gt;) of the “thing” they’re modifying, as well as the unmodified version of it (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;super&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;prev&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These functions make use of attributes like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;override&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;overrideAttrs&lt;/span&gt;&lt;/code&gt; to make their modifications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have no idea how to make something overridable 😅&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After reading through the &lt;a class="reference external" href="https://nixos.wiki/wiki/Overlays"&gt;wiki page&lt;/a&gt; on overlays a few times, particuarly the sections on overriding a version and python package overlays, I was able to put together an overlay which looked like it should work.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="c1"&gt;# In ./nix/pygls-overlay.nix&lt;/span&gt;
 self&lt;span class="p"&gt;:&lt;/span&gt; super&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="ss"&gt;python3 =&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;python3&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="ss"&gt;packageOverrides =&lt;/span&gt; pyself&lt;span class="p"&gt;:&lt;/span&gt; pysuper&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

       &lt;span class="ss"&gt;pygls =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;pygls&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;old&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="ss"&gt;src =&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;fetchFromGitHub &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="ss"&gt;owner =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openlawlibrary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="ss"&gt;repo =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pygls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="ss"&gt;rev =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;v&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="ss"&gt;hash =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-31J4+giK1RDBS52Q/Ia3Y/Zak7fp7gRVTQ7US/eFjtM=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;};&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;python3Packages =&lt;/span&gt; python3&lt;span class="o"&gt;.&lt;/span&gt;pkgs&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using this in the flake is a matter of importing it and passing it to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;overlays&lt;/span&gt;&lt;/code&gt; attribute when importing nixpkgs&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In flake.nix&lt;/span&gt;
&lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;

 &lt;span class="k"&gt;let&lt;/span&gt;
&lt;span class="hll"&gt;   &lt;span class="ss"&gt;pygls-overlay =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pygls-overlay.nix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;   &lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; pygls-overlay &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;   &lt;span class="k"&gt;in&lt;/span&gt;
     eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;37&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;let&lt;/span&gt;
         &lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pytest-lsp.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;pythonPackages =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
       &lt;span class="k"&gt;in&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With some luck, running &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; this time should bring in the latest &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pygls&lt;/span&gt;&lt;/code&gt; version&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: builder for &amp;#39;/nix/store/1sha5j0dfyn2g4z82rpk4yqv32awmjfr-python3.10-pytest-lsp-0.2.1.drv&amp;#39; failed with exit code 1;&lt;/span&gt;
&lt;span class="go"&gt;       ...&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; ERROR: No matching distribution found for pygls&amp;gt;=1.0.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Huh, same error… 🤔&lt;/p&gt;
&lt;p&gt;Let’s take a closer look at where we pull in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; package definition in the flake…&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pytest-lsp.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pythonPackages =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assuming we’re trying to enter the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python310&lt;/span&gt;&lt;/code&gt; devShell, then we’re passing in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python310Packages&lt;/span&gt;&lt;/code&gt; package set.
But in the overlay, we’re overriding the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python3Packages&lt;/span&gt;&lt;/code&gt; package set, I wonder if we change the overlay to match the flake…&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/pygls-overlay.nix&lt;/span&gt;
self&lt;span class="p"&gt;:&lt;/span&gt; super&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;python310 =&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;python310&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="ss"&gt;python310Packages =&lt;/span&gt; python310&lt;span class="o"&gt;.&lt;/span&gt;pkgs&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And try again&lt;/p&gt;
&lt;div class="highlight-console notranslate" id="nix-overlays-build-pygls-output"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: builder for &amp;#39;/nix/store/jl23ai588n2b6amaicy5532bdxjiciyy-python3.10-pygls-0.13.0.drv&amp;#39; failed with exit code 1;&lt;/span&gt;
&lt;span class="go"&gt;       last 10 log lines:&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; removing build/bdist.linux-x86_64/wheel&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Finished executing setuptoolsBuildPhase&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; installing&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Executing pipInstallPhase&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; /build/source/dist /build/source&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Processing ./pygls-0.13.0-py3-none-any.whl&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Requirement already satisfied: typeguard&amp;lt;3,&amp;gt;=2.10.0 in /nix/store/m4jjcrvbi928pi2d14qh8np1miqfvc0b-python3.10-typeguard-2.13.3/lib/python3.10/site-packages (from pygls==0.13.0) (2.13.3)&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="go"&gt;       &amp;gt; ERROR: Could not find a version that satisfies the requirement lsprotocol (from pygls) (from versions: none)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;       &amp;gt; ERROR: No matching distribution found for lsprotocol&lt;/span&gt;
&lt;/span&gt;&lt;span class="go"&gt;       &amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;       For full logs, run &amp;#39;nix log /nix/store/jl23ai588n2b6amaicy5532bdxjiciyy-python3.10-pygls-0.13.0.drv&amp;#39;.&lt;/span&gt;
&lt;span class="go"&gt;error: 1 dependencies of derivation &amp;#39;/nix/store/f5vasy4x9zpdhcq9jh9rz06qpvriblwp-python3.10-pytest-lsp-0.2.1.drv&amp;#39; failed to build&lt;/span&gt;
&lt;span class="go"&gt;error: 1 dependencies of derivation &amp;#39;/nix/store/86v8bcxvjq1g9dhpx1wgmckba8bnag7h-py310-env.drv&amp;#39; failed to build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Progress!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="packaging-lsprotocol"&gt;
&lt;h2&gt;Packaging &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lsprotocol&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;pygls is failing to build as the package definition in nixpkgs is missing the new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lsprotcol&lt;/span&gt;&lt;/code&gt; dependency, easy enough to fix - if it was available in nixpkgs.
Thankfully, overlays can do more than just override attributes on existing packages, they can be used to extend a package set with entirely new definitions!&lt;/p&gt;
&lt;p&gt;We just need to know how to package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lsprotocol&lt;/span&gt;&lt;/code&gt; itself and thanks to the PR linked above we get to cheat a little.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/pygls-overlay.nix&lt;/span&gt;
&lt;span class="ss"&gt;lsprotocol =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pname =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lsprotocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2022.0.0a9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;format =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pyproject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;src =&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;fetchFromGitHub &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;owner =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;microsoft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;repo =&lt;/span&gt; pname&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;rev =&lt;/span&gt; version&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;hash =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-6XecPKuBhwtkmZrGozzO+VEryI5wwy9hlvWE1oV6ajk=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;nativeBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;python310Packages&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    flit-core
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;python310Packages&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    cattrs
    attrs
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;# Disable tests&lt;/span&gt;
  &lt;span class="ss"&gt;doCheck =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that I’ve cut some corners by disabling any tests, but it allows me to dodge packaging anything else 😅&lt;/p&gt;
&lt;p&gt;Then we can also override pygls’ dependencies and reference the newly created &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lsprotocol&lt;/span&gt;&lt;/code&gt; package from the modified version of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python310Packages&lt;/span&gt;&lt;/code&gt; set.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;pygls =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;pygls&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;_&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; self&lt;span class="o"&gt;.&lt;/span&gt;python310Packages&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    lsprotocol
    typeguard
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With that taken care of, we should be good to go right?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="unlucky-0-13"&gt;
&lt;h2&gt;Unlucky &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0.13&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Attempting to enter the devShell yet again we encounter a familiar error message&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;error: builder for &amp;#39;/nix/store/s5xp7fr2r9faxgqw7rvs6ffah10f2fz7-python3.10-pytest-lsp-0.2.1.drv&amp;#39; failed with exit code 1;&lt;/span&gt;
&lt;span class="go"&gt;       last 10 log lines:&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Finished executing setuptoolsBuildPhase&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; installing&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Executing pipInstallPhase&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; /build/pytest-lsp/dist /build/pytest-lsp&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Processing ./pytest_lsp-0.2.1-py3-none-any.whl&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Requirement already satisfied: pytest-asyncio in /nix/store/dvz12bivdc0dkn6849zm58754ga06hs6-python3.10-pytest-asyncio-0.20.3/lib/python3.10/site-packages (from pytest-lsp==0.2.1) (0.20.3)&lt;/span&gt;
&lt;span class="go"&gt;       &amp;gt; Requirement already satisfied: pytest in /nix/store/z5pkmmsdg3bmb35pmsv4rjca1qi7dbnf-python3.10-pytest-7.2.0/lib/python3.10/site-packages (from pytest-lsp==0.2.1) (7.2.0)&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="go"&gt;       &amp;gt; ERROR: Could not find a version that satisfies the requirement pygls&amp;gt;=1.0.0 (from pytest-lsp) (from  versions: none)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;       &amp;gt; ERROR: No matching distribution found for pygls&amp;gt;=1.0.0&lt;/span&gt;
&lt;/span&gt;&lt;span class="go"&gt;       &amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;       For full logs, run &amp;#39;nix log /nix/store/s5xp7fr2r9faxgqw7rvs6ffah10f2fz7-python3.10-pytest-lsp-0.2.1.drv&amp;#39;.&lt;/span&gt;
&lt;span class="go"&gt;error: 1 dependencies of derivation &amp;#39;/nix/store/a0smpmj63fw1fzp78i3z53xvd0zsvvhp-py310-env.drv&amp;#39; failed to build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But we just upgraded pygls to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.0&lt;/span&gt;&lt;/code&gt; right? That’s why we had to package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lsprotocol&lt;/span&gt;&lt;/code&gt; in the previous section?&lt;/p&gt;
&lt;p&gt;You might have already noticed in the log output &lt;a class="reference internal" href="2023/nix-overlays/#nix-overlays-build-pygls-output"&gt;&lt;span class="std std-ref"&gt;above&lt;/span&gt;&lt;/a&gt;, that despite overriding the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;version&lt;/span&gt;&lt;/code&gt; field to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.0&lt;/span&gt;&lt;/code&gt; the Python package was still coming out as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0.13.0&lt;/span&gt;&lt;/code&gt; - despite it containing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.0&lt;/span&gt;&lt;/code&gt; version of the codebase!&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; Processing ./pygls-0.13.0-py3-none-any.whl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Plenty of head scratching later, I finally remembered that pygls uses &lt;a class="reference external" href="https://github.com/pypa/setuptools_scm"&gt;setuptools_scm&lt;/a&gt; to automatically derive the version number based on tags in its git repository.
But the build is not taking place in a git repo… so nix must be setting that version somehow right?&lt;/p&gt;
&lt;p&gt;Yep. A quick trip to the actual file containing pygls’ package definition on nixpkgs (and not just the diff view in the PR!) reveals an additional attribute that needed to be overriden&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/pygls-overlay.nix&lt;/span&gt;
&lt;span class="ss"&gt;pygls =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;pygls&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;_&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="ss"&gt;SETUPTOOLS_SCM_PRETEND_VERSION =&lt;/span&gt; version&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now if we try activating that devShell?&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;pytest
&lt;span class="go"&gt;================================== test session starts =================================&lt;/span&gt;
&lt;span class="go"&gt;platform linux -- Python 3.10.9, pytest-7.2.0, pluggy-1.0.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: /var/home/alex/Projects/lsp-devtools/lib/pytest-lsp, configfile: pyproject.toml&lt;/span&gt;
&lt;span class="go"&gt;plugins: lsp-0.2.1, typeguard-2.13.3, asyncio-0.20.3&lt;/span&gt;
&lt;span class="go"&gt;asyncio: mode=auto&lt;/span&gt;
&lt;span class="go"&gt;collected 27 items&lt;/span&gt;

&lt;span class="go"&gt;tests/test_client.py ...                                    [ 11%]&lt;/span&gt;
&lt;span class="go"&gt;tests/test_client_methods.py ...................            [ 81%]&lt;/span&gt;
&lt;span class="go"&gt;tests/test_plugin.py ....                                   [ 96%]&lt;/span&gt;
&lt;span class="go"&gt;tests/test_server.py .                                      [100%]&lt;/span&gt;

&lt;span class="go"&gt;================================= 27 passed in 8.57s ==================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I’m not 100% sure if I’ve overriden the pygls’ version number correctly, since inspecting the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PYTHONPATH&lt;/span&gt;&lt;/code&gt; the devShell is using shows that the version number of the nix package is &lt;em&gt;still&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0.13.0&lt;/span&gt;&lt;/code&gt;!&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PYTHONPATH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;pygls
&lt;span class="go"&gt;/nix/store/s5jh5s9m5f1163hxzj8768jc5li7cdfg-python3.10-pygls-0.13.0/lib/python3.10/site-packages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But in Python land, everything appears at least, to be consistent, so I’m going with it for now.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="mutliple-python-versions"&gt;
&lt;h2&gt;Mutliple Python Versions&lt;/h2&gt;
&lt;p&gt;Now that we’ve got it working for Python 3.10, we need to generalise the overlay so that we can use it with any of the Python versions supported by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ideally, what we’d want is to write an expression like the following&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/pygls-overlay.nix&lt;/span&gt;
self&lt;span class="p"&gt;:&lt;/span&gt; super&lt;span class="p"&gt;:&lt;/span&gt;

eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;37&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
  super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;packageOverrides =&lt;/span&gt; pyself&lt;span class="p"&gt;:&lt;/span&gt; pysuper&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

       &lt;span class="ss"&gt;lsprotocol =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="o"&gt;...&lt;/span&gt;
         &lt;span class="ss"&gt;nativeBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           flit-core
         &lt;span class="p"&gt;];&lt;/span&gt;

         &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           cattrs
           attrs
         &lt;span class="p"&gt;];&lt;/span&gt;
       &lt;span class="p"&gt;};&lt;/span&gt;

       &lt;span class="ss"&gt;pygls =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;pygls&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;_&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="o"&gt;...&lt;/span&gt;
         &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; self&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           lsprotocol
           typeguard
         &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And have the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachPythonVersion&lt;/span&gt;&lt;/code&gt; function handle the details of performing all the overrides.&lt;/p&gt;
&lt;p&gt;To start with, let’s define a helper &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doPythonOverride&lt;/span&gt;&lt;/code&gt; that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachPythonVersion&lt;/span&gt;&lt;/code&gt; can use.
It should take a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;version&lt;/span&gt;&lt;/code&gt; and a function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;f&lt;/span&gt;&lt;/code&gt; and use it to perform the override for a single Python version, something like the following pseudo code.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;doPythonOverride(version, f) = { &amp;quot;python${version}&amp;quot; = f(version);
                                 &amp;quot;python${version}Packages&amp;quot; = &amp;quot;python${version}&amp;quot;.pkgs; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The only issue is that (as far as I can tell), you can’t use strings as keys in a nix attribute set.
However, you can use the
&lt;a class="reference external" href="https://nixos.org/manual/nix/stable/language/builtins.html#builtins-listToAttrs"&gt;builtins.listToAttrs&lt;/a&gt;
function to build an attribute set from a list of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{&lt;/span&gt; &lt;span class="pre"&gt;name&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;xxx&amp;quot;;&lt;/span&gt; &lt;span class="pre"&gt;value&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;123;&lt;/span&gt; &lt;span class="pre"&gt;}&lt;/span&gt;&lt;/code&gt; attribute sets, which allows us to define &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doPythonOverride&lt;/span&gt;&lt;/code&gt; as follows.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;doPythonOverride =&lt;/span&gt; version&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;overridenPython =&lt;/span&gt; f version&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;listToAttrs &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; overridenPython&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; overridenPython&lt;span class="o"&gt;.&lt;/span&gt;pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From there, we can define &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachPythonVersion&lt;/span&gt;&lt;/code&gt; to map the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doPythonOverride&lt;/span&gt;&lt;/code&gt; helper across each of the given Python versions and merge the results into a single attribute set using the
&lt;a class="reference external" href="https://nixos.org/manual/nix/stable/language/builtins.html#builtins-foldl'"&gt;foldl’&lt;/a&gt;
function.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; versions&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;foldl&amp;#39; &lt;span class="p"&gt;(&lt;/span&gt;a&lt;span class="p"&gt;:&lt;/span&gt; b&lt;span class="p"&gt;:&lt;/span&gt; a &lt;span class="o"&gt;//&lt;/span&gt; b&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;version&lt;span class="p"&gt;:&lt;/span&gt; doPythonOverride version f&lt;span class="p"&gt;)&lt;/span&gt; versions&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we should have successfully overriden pygls’ version across all supported Python versions!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="sharing-overlays"&gt;
&lt;span id="nix-overlays-sharing"&gt;&lt;/span&gt;&lt;h2&gt;Sharing Overlays&lt;/h2&gt;
&lt;p&gt;Up until now, I’ve been mostly focusing on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt; output of a flake.
There are, however, &lt;a class="reference external" href="https://nixos.wiki/wiki/Flakes#Output_schema"&gt;many other&lt;/a&gt; items that can be exported from a flake - including overlays.
Following the same pattern as the previous section it’s easy enough to convert the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; package definition into an overlay&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/pytest-lsp-overlay.nix&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="ss"&gt;doPythonOverride =&lt;/span&gt; version&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;
      &lt;span class="ss"&gt;overridenPython =&lt;/span&gt; f version&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt;
      &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;listToAttrs &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; overridenPython &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; overridenPython&lt;span class="o"&gt;.&lt;/span&gt;pkgs &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; versions&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;foldl&amp;#39; &lt;span class="p"&gt;(&lt;/span&gt;a&lt;span class="p"&gt;:&lt;/span&gt; b&lt;span class="p"&gt;:&lt;/span&gt; a &lt;span class="o"&gt;//&lt;/span&gt; b&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;version&lt;span class="p"&gt;:&lt;/span&gt; doPythonOverride version f&lt;span class="p"&gt;)&lt;/span&gt; versions&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt;

self&lt;span class="p"&gt;:&lt;/span&gt; super&lt;span class="p"&gt;:&lt;/span&gt;

eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;37&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
  super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;override &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;packageOverrides =&lt;/span&gt; pyself&lt;span class="p"&gt;:&lt;/span&gt; pysuper&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pysuper&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;pname =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pytest-lsp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.2.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;src =&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/..&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; super&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          pygls
          pytest
          pytest-asyncio
        &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can then include it in the main &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; file just as we did with the pygls overlay, but also assign it to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;overlays&lt;/span&gt;&lt;/code&gt; output to make it available to other projects.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In flake.nix&lt;/span&gt;
&lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt;
   &lt;span class="ss"&gt;pygls-overlay =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pygls-overlay.nix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="hll"&gt;   &lt;span class="ss"&gt;pytest-lsp-overlay =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pytest-lsp-overlay.nix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="hll"&gt; overlays&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pytest-lsp-overlay&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;
 &lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; pygls-overlay pytest-lsp-overlay &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;   &lt;span class="k"&gt;in&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In theory, we can update the flake we previously wrote for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; to use this overlay to provide the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; package definition&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In esbonio/flake.nix&lt;/span&gt;

&lt;span class="ss"&gt;inputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixpkgs-unstable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="hll"&gt;  pytest-lsp&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:swyddfa/lsp-devtools?dir=lib/pytest-lsp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;  utils&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:numtide/flake-utils&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; pytest-lsp&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;pygls-overlay =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pygls-overlay.nix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;
&lt;span class="hll"&gt;      &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; pygls-overlay pytest-lsp&lt;span class="o"&gt;.&lt;/span&gt;overlays&lt;span class="o"&gt;.&lt;/span&gt;pytest-lsp &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;    &lt;span class="k"&gt;in&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we should be able to activate a devShell for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; as before.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310
&lt;span class="go"&gt;error: Dependency is not of a valid type: element 5 of nativeBuildInputs for py310&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ah, well, perhaps that’s a job for another day! 😅&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2023/nix-overlays/" rel="alternate"/>
    <summary>Last time, I experimented with writing a flake that defined development environments for the esbonio package spanning multiple Python versions.
During that process I also packaged pytest-lsp using an ad-hoc nix expression as part of the esbonio repo.In this post I look into writing a similar flake for the pytest-lsp package itself, but this time using overlays to override and extend the nixpkgs package set.If you are interested, you can find the final version of the code
here.</summary>
    <category term="nix" label="nix"/>
    <category term="pytest-lsp" label="pytest-lsp"/>
    <category term="python" label="python"/>
    <published>2023-01-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2022/first-steps-with-nix/</id>
    <title>My First Steps with Nix</title>
    <updated>2022-12-27T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="my-first-steps-with-nix"&gt;

&lt;p&gt;Nix, depending on the context, can refer to a &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/language/index.html"&gt;programming language&lt;/a&gt;, a &lt;a class="reference external" href="https://nixos.org/manual/nixpkgs/stable/#preface"&gt;package manager&lt;/a&gt; or a &lt;a class="reference external" href="https://nixos.org/manual/nixos/stable/#sec-installation"&gt;Linux Distro&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I’m most insterested in the package manager aspect and the promise of it being able to create declarative, reproducable development environments.
With a configuration file and the &lt;a class="reference external" href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-develop.html"&gt;nix develop&lt;/a&gt; command you can activate a kind of “virtual environment” that contains not just your Python packages - but &lt;em&gt;any&lt;/em&gt; program defined by the configuration!&lt;/p&gt;
&lt;p&gt;I find that idea particuarly exciting when working on a language server like &lt;a class="reference external" href="https://github.com/swyddfa/esbonio/"&gt;esbonio&lt;/a&gt;, since it needs to be able to work against a variety of Python versions, Sphinx versions, as well as various code editors and all their versions!
Having the ability to define a particular configuration and have some tool automatically recreate it would be amazing.&lt;/p&gt;
&lt;p&gt;But I’m getting ahead of myself, let’s see if I can get to a point where I can easily test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; against a range of Python versions.&lt;/p&gt;
&lt;section id="intalling-nix"&gt;
&lt;h2&gt;Intalling Nix&lt;/h2&gt;
&lt;p&gt;What a nightmare! 😭&lt;/p&gt;
&lt;p&gt;I should say though, my issues aren’t really Nix’s fault.
Trying to install Nix directly on &lt;a class="reference external" href="https://kinoite.fedoraproject.org/"&gt;Fedora Kinoite&lt;/a&gt; means dealing with issues caused by SELinux (which the Nix installer does &lt;a class="reference external" href="https://github.com/NixOS/nix/issues/2374"&gt;not support&lt;/a&gt;) and working around the immutable root filesystem.&lt;/p&gt;
&lt;p&gt;Basically, don’t do as I do! 😄&lt;/p&gt;
&lt;p&gt;If you do find yourself in my situation though, here’s a few things you might find useful&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/matthewpi/08c3d652e7879e4c4c30bead7021ff73"&gt;This guide&lt;/a&gt; will get you 90% of the way, I was able to piece together the remaining steps from links in the comments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Nix installer has been updated since the guide was written to bail if it detects that SELinux has been enabled.
You will need to patch out the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;check_selinux&lt;/span&gt;&lt;/code&gt; function in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;install-multi-user&lt;/span&gt;&lt;/code&gt; script in the release tarball that the Nix installer downloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you get a cryptic&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error: could not set permissions on &amp;#39;/nix/var/nix/profiles/per-user&amp;#39; to 755: Operation not permitted
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;message whenever you run a nix command, chances are the nix-daemon is not running.
Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;systemctl&lt;/span&gt; &lt;span class="pre"&gt;status&lt;/span&gt; &lt;span class="pre"&gt;nix-daemon.service&lt;/span&gt;&lt;/code&gt; to check its status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you see an error in the output of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;systemctl&lt;/span&gt; &lt;span class="pre"&gt;status&lt;/span&gt; &lt;span class="pre"&gt;nix-daemon.service&lt;/span&gt;&lt;/code&gt; along the lines of:&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nix-daemon.service: Failed to locate executable /nix/store/xdlpraypxdimjyfrr4k06narrv8nmfgh-nix-2.11.1/bin/nix-daemon: Permission denied
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;you need to re-apply the SELinux policies defined in the guide linked above by running &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sudo&lt;/span&gt; &lt;span class="pre"&gt;restorecon&lt;/span&gt; &lt;span class="pre"&gt;-RF&lt;/span&gt; &lt;span class="pre"&gt;/nix&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="a-simple-flake"&gt;
&lt;h2&gt;A Simple Flake&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I’m not the best person to learn how to use Nix from - I’m still trying to figure it out myself!
Instead here are a few resources that I’ve found useful which go into more detail.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://xeiaso.net/blog/nix-flakes-1-2022-02-21"&gt;Nix Flakes: An Introduction&lt;/a&gt;, part one of a &lt;a class="reference external" href="https://xeiaso.net/blog/series/nix-flakes"&gt;series&lt;/a&gt; of posts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jon Ringer’s &lt;a class="reference external" href="https://www.youtube.com/&amp;#64;elitespartan117j27"&gt;Youtube Channel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;From what I can gather, &lt;a class="reference external" href="https://nixos.wiki/wiki/Flakes"&gt;flakes&lt;/a&gt; are a good starting point as they have a well defined structure and seem to be where things are going when it comes to Nix based workflows.&lt;/p&gt;
&lt;p&gt;As mentioned in the intro I’d like to get to the point where I can easily test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; against a range of Python versions, so let’s start off by writing a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; that provides a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; containing Python.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;description =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Esbonio language server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;inputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixpkgs-unstable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    utils&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:numtide/flake-utils&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;
    utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystem &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="ss"&gt;devShell =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt;
         mkShell &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; python3 &lt;span class="p"&gt;];&lt;/span&gt;
         &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;flake&lt;/span&gt; &lt;span class="pre"&gt;show&lt;/span&gt;&lt;/code&gt; we can see what outputs are produced by this flake&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;flake&lt;span class="w"&gt; &lt;/span&gt;show
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio&amp;#39; is dirty&lt;/span&gt;
&lt;span class="go"&gt;error: getting status of &amp;#39;/nix/store/9s8zs1hrqiingklv86fd18x2mbgsfw0w-source/lib/esbonio/flake.nix&amp;#39;: No such file or directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oh! I always forget, when working with flakes nix will only see a file if it is tracked by git - we don’t need to commit it, but it needs to at least be staged.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;flake.nix
&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;flake&lt;span class="w"&gt; &lt;/span&gt;show
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio&amp;#39; is dirty&lt;/span&gt;
&lt;span class="gp"&gt;git+file:///var/home/alex/Projects/esbonio?dir=lib%&lt;/span&gt;2fesbonio
&lt;span class="go"&gt;└───devShell&lt;/span&gt;
&lt;span class="go"&gt;   ├───aarch64-darwin: development environment &amp;#39;nix-shell&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;   ├───aarch64-linux: development environment &amp;#39;nix-shell&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;   ├───x86_64-darwin: development environment &amp;#39;nix-shell&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;   └───x86_64-linux: development environment &amp;#39;nix-shell&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This shows that we’ve already defined development environments for MacOS and Linux on both x86 and Arm platforms!
To “activate” the correct environment we only need to run &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;.
Nix is smart enough to choose the one compatible with our current system and will proceed to setup all the packages required for that environment.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop
&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;python
&lt;span class="go"&gt;/nix/store/qc8rlhdcdxaf6dwbvv0v4k50w937fyzj-python3-3.10.8/bin/python&lt;/span&gt;

&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;python
&lt;span class="go"&gt;Python 3.10.8 (main, Oct 11 2022, 11:35:05) [GCC 11.3.0] on linux&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/alcarney/dotfiles/blob/90d90d1d2f67a03a7f8b73803784b13362027e13/bash/20-prompt#L12-L20"&gt;here&lt;/a&gt; for details on how I configured my bash prompt to detect if I’m in a nix shell or not.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="adding-python-packages"&gt;
&lt;h2&gt;Adding Python Packages&lt;/h2&gt;
&lt;p&gt;Of course, this environment isn’t that useful at the moment as any of the packages required for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; and its test suite are not available&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;pytest
&lt;span class="go"&gt;bash: pytest: command not found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we’re lucky, the packages we need are already part of &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs"&gt;nixpkgs&lt;/a&gt; and we just need to add them to the devShell’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;packages&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;devShell =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt;
  mkShell &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      python3

      &lt;span class="c1"&gt;# esbonio&amp;#39;s dependencies&lt;/span&gt;
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;appdirs
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;sphinx
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;pygls
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;typing-extensions

      &lt;span class="c1"&gt;# test suite dependencies&lt;/span&gt;
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;mock
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;pytest
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;pytest-lsp
      python3Packages&lt;span class="o"&gt;.&lt;/span&gt;pytest-timeout
    &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And reactivate the environment&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop
&lt;span class="go"&gt;warning: Git tree &amp;#39;/var/home/alex/Projects/esbonio&amp;#39; is dirty&lt;/span&gt;
&lt;span class="go"&gt;error: attribute &amp;#39;pytest-lsp&amp;#39; missing&lt;/span&gt;

&lt;span class="go"&gt;      at /nix/store/ll2pir6ii65n4cplan9iykxy7cksw6k8-source/lib/esbonio/flake.nix:27:13:&lt;/span&gt;

&lt;span class="go"&gt;         26|             python3Packages.pytest&lt;/span&gt;
&lt;span class="go"&gt;         27|             python3Packages.pytest-lsp&lt;/span&gt;
&lt;span class="go"&gt;           |             ^&lt;/span&gt;
&lt;span class="go"&gt;         28|             python3Packages.pytest-timeout&lt;/span&gt;
&lt;span class="gp gp-VirtualEnv"&gt;(use &amp;#39;--show-trace&amp;#39; to show detailed location information)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; is not available through nixpkgs but since it’s an unknown library I wrote to help test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; I can’t say I’m surprised! 😄
It should however, be relatively straightforward to package it ourselves, especially if we use &lt;a class="reference external" href="https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/development/python-modules/pytest-timeout/default.nix"&gt;an example&lt;/a&gt; from the nixpkgs repo as a guide.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/pytest-lsp.nix&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; pythonPackages &lt;span class="p"&gt;}:&lt;/span&gt;

pythonPackages&lt;span class="o"&gt;.&lt;/span&gt;buildPythonPackage &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;pname =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pytest-lsp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;src =&lt;/span&gt; pythonPackages&lt;span class="o"&gt;.&lt;/span&gt;fetchPypi &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; pname version&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;sha256 =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-WxTh9G3tWyGzYx1uHufkwg3hN6jTbRjlGLKJR1eUNtY=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;buildInputs =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    pythonPackages&lt;span class="o"&gt;.&lt;/span&gt;appdirs
    pythonPackages&lt;span class="o"&gt;.&lt;/span&gt;pygls
    pythonPackages&lt;span class="o"&gt;.&lt;/span&gt;pytest
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="ss"&gt;propagatedBuildInputs =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    pythonPackages&lt;span class="o"&gt;.&lt;/span&gt;pytest-asyncio
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;# Disable tests&lt;/span&gt;
  &lt;span class="ss"&gt;doCheck =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You probably don’t want to use this as an example of packaging a Python package with Nix, as I don’t fully understand what I’m doing and I’ve taken a few shortcuts (like disabling tests), but here’s a few notes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{&lt;/span&gt; &lt;span class="pre"&gt;pythonPackages&lt;/span&gt; &lt;span class="pre"&gt;}&lt;/span&gt; &lt;span class="pre"&gt;:&lt;/span&gt;&lt;/code&gt; syntax at the top of the file is defining a function that accepts &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pythonPackages&lt;/span&gt;&lt;/code&gt; as an argument.
This is what allows this definition to be used with multiple Python versions later on in this blog post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the name implies, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fetchPypi&lt;/span&gt;&lt;/code&gt; function is used to pull the sources for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest-lsp&lt;/span&gt;&lt;/code&gt; straight from PyPi.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;propagtedBuildInputs&lt;/span&gt;&lt;/code&gt; are also available for use at runtime, while &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;buildInputs&lt;/span&gt;&lt;/code&gt; are “hidden” from the final runtime environment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, to use this package definition in our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake.nix&lt;/span&gt;&lt;/code&gt; file we use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;callPackage&lt;/span&gt;&lt;/code&gt; function and pass it the correct python package set.&lt;/p&gt;
&lt;div class="highlight-nix notranslate" id="first-steps-nix-call-pytest-lsp"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./flake.nix&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt;
   &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pytest-lsp.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;pythonPackages =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;python3Packages&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="ss"&gt;devShell =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt;
     mkShell &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;
         pytest-lsp
       &lt;span class="p"&gt;];&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hopefully, we now have all we need to run the test suite.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp gp-VirtualEnv"&gt;(nix-shell)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;pytest
&lt;span class="go"&gt;=========================================================================================================== test session starts ============================================================================================================&lt;/span&gt;
&lt;span class="go"&gt;platform linux -- Python 3.10.8, pytest-7.1.3, pluggy-1.0.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: /var/home/alex/Projects/esbonio/lib/esbonio, configfile: pyproject.toml&lt;/span&gt;
&lt;span class="go"&gt;plugins: typeguard-2.13.3, lsp-0.1.3, asyncio-0.19.0, timeout-2.1.0&lt;/span&gt;
&lt;span class="go"&gt;asyncio: mode=auto&lt;/span&gt;
&lt;span class="go"&gt;collected 0 items / 1 error&lt;/span&gt;

&lt;span class="go"&gt;================================================================================================================== ERRORS ==================================================================================================================&lt;/span&gt;
&lt;span class="go"&gt;______________________________________________________________________________________________________ ERROR collecting test session _______________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="go"&gt;/nix/store/qc8rlhdcdxaf6dwbvv0v4k50w937fyzj-python3-3.10.8/lib/python3.10/importlib/__init__.py:126: in import_module&lt;/span&gt;
&lt;span class="go"&gt;   ...&lt;/span&gt;
&lt;span class="go"&gt;tests/sphinx-default/conftest.py:12: in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   from esbonio.lsp.sphinx import InitializationOptions&lt;/span&gt;
&lt;span class="go"&gt;E   ModuleNotFoundError: No module named &amp;#39;esbonio&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;========================================================================================================= short test summary info ==========================================================================================================&lt;/span&gt;
&lt;span class="go"&gt;ERROR  - ModuleNotFoundError: No module named &amp;#39;esbonio&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ah… looks like we have to package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esbonio&lt;/span&gt;&lt;/code&gt; itself, but we already know how to do that, aside from dependencies the only major difference is where we fetch the sources from.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ./nix/esbonio.nix&lt;/span&gt;

&lt;span class="ss"&gt;src =&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we should have everything setup correctly! 🤞&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;==================================== test session starts =====================================&lt;/span&gt;
&lt;span class="go"&gt;platform linux -- Python 3.10.8, pytest-7.1.3, pluggy-1.0.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: /var/home/alex/Projects/esbonio/lib/esbonio, configfile: pyproject.toml&lt;/span&gt;
&lt;span class="go"&gt;plugins: typeguard-2.13.3, lsp-0.1.3, asyncio-0.19.0, timeout-2.1.0&lt;/span&gt;
&lt;span class="go"&gt;asyncio: mode=auto&lt;/span&gt;
&lt;span class="go"&gt;collected 2487 items&lt;/span&gt;

&lt;span class="go"&gt;...&lt;/span&gt;

&lt;span class="go"&gt;=============== 2475 passed, 4 skipped, 8 xfailed in 132.96s (0:02:12) =======================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="multiple-python-versions"&gt;
&lt;span id="first-steps-nix-multiple-python-versions"&gt;&lt;/span&gt;&lt;h2&gt;Multiple Python Versions&lt;/h2&gt;
&lt;p&gt;Switching to a Nix-ish style of pseudo code for a moment, let’s summarize how our flake is currently defined.
We defined a function which takes a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;system&lt;/span&gt;&lt;/code&gt; and produces an attribute set (think Python dictionary) with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; field&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f(system) = { devShell = &amp;lt;devShell for system&amp;gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We then passed that function to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachDefaultSystem&lt;/span&gt;&lt;/code&gt; helper from the &lt;a class="reference external" href="https://github.com/numtide/flake-utils"&gt;flake-utils&lt;/a&gt; repo.
This calls our function with each of the &lt;a class="reference external" href="https://github.com/numtide/flake-utils/blob/5aed5285a952e0b949eb3ba02c12fa4fcfef535f/default.nix#L3-L8"&gt;default system architectures&lt;/a&gt; before transforming it into a structure compatible with the flake &lt;a class="reference external" href="https://nixos.wiki/wiki/Flakes#Output_schema"&gt;output schema&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eachDefaultSystem(f) = applyTransform { aarch64-linux = f(aarch64-linux), ... }
                     = applyTransform { aarch64-linux = { devShell = &amp;lt;devShell for aarch64-linux&amp;gt; }, ... }
                     = { devShell.aarch64-linux.default = &amp;lt;devShell for aarch64-linux&amp;gt;, ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we want to support multiple Python versions however, we want to define a function that returns an attribute set with a devShell for each Python version&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f(system) = { py37 = &amp;lt;py37 devShell for system&amp;gt;, py38 = &amp;lt;py38 devShell for system&amp;gt;, ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which we can then pass to a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mysteryHelper&lt;/span&gt;&lt;/code&gt; function to perform a similar (but structurally distinct!) transformation on the results of our function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;f&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;devShells = mysteryHelper(f)
          = applyTransform { aarch64-linux = f(aarch64-linux), ... }
          = applyTransform {
                             aarch64-linux  = { py37 = &amp;lt;py37 devShell for aarch64-linux&amp;gt;,
                                                py38 = &amp;lt;py38 devShell for aarch64-linux&amp;gt;,
                                                ...
                                              },
                             ...,
                           }
          = {
              aarch64-linux.py37 = &amp;lt;py37 devShell for aarch64-linux&amp;gt;,
              aarch64-linux.py38 = &amp;lt;py38 devShell for aarch64-linux&amp;gt;,
              ...
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s the idea at least, now to translate it into real Nix code.&lt;/p&gt;
&lt;p&gt;Thankfully, finding an implementation for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mysteryHelper&lt;/span&gt;&lt;/code&gt; isn’t too difficult as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake-utils&lt;/span&gt;&lt;/code&gt; repo provides &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachDefaultSystemMap&lt;/span&gt;&lt;/code&gt; which does precisely what we want.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;
  &lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
    f system&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now to replace our imaginary function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;f&lt;/span&gt;&lt;/code&gt; with an expression that defines our devShells.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;Notice that we now assign to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;It turns out that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt;&lt;/code&gt; the command line tool does a little
&lt;a class="reference external" href="https://github.com/NixOS/nix/blob/3dbf9b5af5950b615ec685c1f4155b1c8698bb78/src/nix/flake.cc#L517"&gt;transformation&lt;/a&gt;
to turn a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShell&lt;/span&gt;&lt;/code&gt; entry into a valid &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt; entry.
Unfortunately, this transformation only works when you define a single shell per system!&lt;/p&gt;
&lt;p&gt;Now that we’re defining multiple shells per system, we have to make sure to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;devShells&lt;/span&gt;&lt;/code&gt; - it took me a &lt;em&gt;long&lt;/em&gt; time to spot this!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We could simply copy-paste the devShell definition from the previous section a bunch of times and switch out the Python version.&lt;/p&gt;
&lt;p&gt;However, since the definitions for each Python version are going to be so similar, a better approach would be to define our own helper that would map a function over a list of versions and have it build the attribute set for us.&lt;/p&gt;
&lt;p&gt;It turns out that the
&lt;a class="reference external" href="https://github.com/numtide/flake-utils/blob/5aed5285a952e0b949eb3ba02c12fa4fcfef535f/default.nix#L150"&gt;implementation&lt;/a&gt;
of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eachDefaultSystemMap&lt;/span&gt;&lt;/code&gt; is almost identical to what we need, so it was easy enough to adapt it to this use case.&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; versions&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;listToAttrs &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;version&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; f version&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; versions&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bringing it all together gives us this final flake definition&lt;/p&gt;
&lt;div class="highlight-nix notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; utils &lt;span class="p"&gt;}:&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;eachPythonVersion =&lt;/span&gt; versions&lt;span class="p"&gt;:&lt;/span&gt; f&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;listToAttrs &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;version&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;version&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;value =&lt;/span&gt; f version&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; versions&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="ss"&gt;devShells =&lt;/span&gt; utils&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="o"&gt;.&lt;/span&gt;eachDefaultSystemMap &lt;span class="p"&gt;(&lt;/span&gt;system&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;
      &lt;span class="ss"&gt;pkgs =&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt;
      eachPythonVersion &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;37&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;38&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;310&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;311&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pyVersion&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;
          &lt;span class="ss"&gt;pytest-lsp =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/pytest-lsp.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;pythonPackages =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
          &lt;span class="ss"&gt;esbonio =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;callPackage &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/nix/esbonio.nix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;pythonPackages =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;in&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; mkShell &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;py&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="ss"&gt;packages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

            esbonio

            &lt;span class="c1"&gt;# test suite dependencies&lt;/span&gt;
            pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;mock
            pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;pytest
            pytest-lsp
            pkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pyVersion&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;pytest-timeout
          &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With any luck, we should now see a per-python version devShell appear in the output of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;flake&lt;/span&gt; &lt;span class="pre"&gt;show&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;flake&lt;span class="w"&gt; &lt;/span&gt;show
&lt;span class="gp"&gt;git+file:///var/home/alex/Projects/esbonio?dir=lib%2fesbonio&amp;amp;ref=refs%2fheads%&lt;/span&gt;2fnix&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4a548327974dff1750099df4d793638a64b663e6
&lt;span class="go"&gt;└───devShells&lt;/span&gt;
&lt;span class="go"&gt;    ├───aarch64-darwin&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py310: development environment &amp;#39;py310&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py311: development environment &amp;#39;py311&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py37: development environment &amp;#39;py37&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py38: development environment &amp;#39;py38&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   └───py39: development environment &amp;#39;py39&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    ├───aarch64-linux&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py310: development environment &amp;#39;py310&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py311: development environment &amp;#39;py311&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py37: development environment &amp;#39;py37&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py38: development environment &amp;#39;py38&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   └───py39: development environment &amp;#39;py39&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    ├───x86_64-darwin&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py310: development environment &amp;#39;py310&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py311: development environment &amp;#39;py311&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py37: development environment &amp;#39;py37&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   ├───py38: development environment &amp;#39;py38&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    │   └───py39: development environment &amp;#39;py39&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;    └───x86_64-linux&lt;/span&gt;
&lt;span class="go"&gt;        ├───py310: development environment &amp;#39;py310&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;        ├───py311: development environment &amp;#39;py311&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;        ├───py37: development environment &amp;#39;py37&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;        ├───py38: development environment &amp;#39;py38&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;        └───py39: development environment &amp;#39;py39&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To reference a given environment we’d use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.#&amp;lt;envname&amp;gt;&lt;/span&gt;&lt;/code&gt; syntax when calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nix&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;.
The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--command&lt;/span&gt;&lt;/code&gt; flag also allows us to run a command within the named environment without having to activate it first!&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py310&lt;span class="w"&gt; &lt;/span&gt;--command&lt;span class="w"&gt; &lt;/span&gt;pytest
&lt;span class="go"&gt;=========================== test session starts ================================&lt;/span&gt;
&lt;span class="go"&gt;platform linux -- Python 3.10.8, pytest-7.1.3, pluggy-1.0.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: /var/home/alex/Projects/esbonio/lib/esbonio, configfile: pyproject.toml&lt;/span&gt;
&lt;span class="go"&gt;plugins: typeguard-2.13.3, lsp-0.1.3, asyncio-0.19.0, timeout-2.1.0&lt;/span&gt;
&lt;span class="go"&gt;asyncio: mode=auto&lt;/span&gt;
&lt;span class="go"&gt;collected 2508 items&lt;/span&gt;

&lt;span class="go"&gt;...&lt;/span&gt;

&lt;span class="go"&gt;======== 2496 passed, 4 skipped, 8 xfailed in 344.10s (0:05:27) ================&lt;/span&gt;

&lt;span class="gp"&gt;$ &lt;/span&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.#py39&lt;span class="w"&gt; &lt;/span&gt;--command&lt;span class="w"&gt; &lt;/span&gt;pytest
&lt;span class="go"&gt;=========================== test session starts ================================&lt;/span&gt;
&lt;span class="go"&gt;platform linux -- Python 3.9.15, pytest-7.1.3, pluggy-1.0.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: /var/home/alex/Projects/esbonio/lib/esbonio, configfile: pyproject.toml&lt;/span&gt;
&lt;span class="go"&gt;plugins: typeguard-2.13.3, lsp-0.1.3, asyncio-0.19.0, timeout-2.1.0&lt;/span&gt;
&lt;span class="go"&gt;asyncio: mode=auto&lt;/span&gt;
&lt;span class="go"&gt;collected 2508 items&lt;/span&gt;

&lt;span class="go"&gt;...&lt;/span&gt;

&lt;span class="go"&gt;======== 2496 passed, 4 skipped, 8 xfailed in 344.10s (0:05:44) ================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Achievement unlocked! 🏆&lt;/p&gt;
&lt;/section&gt;
&lt;section id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This was mainly a “Hello, World” type exercise looking to see if I could get Nix up and running in a real project, but so far I haven’t achieved anything you can’t already do with traditional Python tools like &lt;a class="reference external" href="https://tox.wiki/en/latest/index.html"&gt;tox&lt;/a&gt;.
However, this should hopefully serve as a good foundation on which I can explore&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Changing the source where dependent libraries are fetched from (e.g. local vs git vs PyPi)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using overlays (these might help with the previous point?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Defining environments that contain particular text editor configurations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested, you can find the final Nix definitions
&lt;a class="reference external" href="https://github.com/alcarney/esbonio/commit/f62e1d486bb7899d802bfd668f98f21b71702317"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2022/first-steps-with-nix/" rel="alternate"/>
    <summary>Nix, depending on the context, can refer to a programming language, a package manager or a Linux Distro.Personally, I’m most insterested in the package manager aspect and the promise of it being able to create declarative, reproducable development environments.
With a configuration file and the nix develop command you can activate a kind of “virtual environment” that contains not just your Python packages - but any program defined by the configuration!I find that idea particuarly exciting when working on a language server like esbonio, since it needs to be able to work against a variety of Python versions, Sphinx versions, as well as various code editors and all their versions!
Having the ability to define a particular configuration and have some tool automatically recreate it would be amazing.But I’m getting ahead of myself, let’s see if I can get to a point where I can easily test esbonio against a range of Python versions.</summary>
    <category term="esbonio" label="esbonio"/>
    <category term="nix" label="nix"/>
    <category term="python" label="python"/>
    <published>2022-12-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2021/bringing-esbonio-to-the-browser/</id>
    <title>Bringing Esbonio to the Browser</title>
    <updated>2021-10-25T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="bringing-esbonio-to-the-browser"&gt;

&lt;p&gt;For the past year or so I’ve been working on a language server called &lt;a class="reference external" href="https://github.com/swyddfa/esbonio"&gt;Esbonio&lt;/a&gt;.
It’s a language server designed to streamline the process of working with your
&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; documentation projects. Currently its feature set is quite limited, but I
think it does a good job of providing you with completion suggestions for all your
roles, directives and cross-references.&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="https://github.com/swyddfa/esbonio/raw/develop/resources/images/completion-demo.gif" src="https://github.com/swyddfa/esbonio/raw/develop/resources/images/completion-demo.gif" style="width: 80%;" /&gt;
&lt;/figure&gt;
&lt;p&gt;Anyway with the recent releases of &lt;a class="reference external" href="https://github.com/github/dev"&gt;github.dev&lt;/a&gt; and &lt;a class="reference external" href="https://code.visualstudio.com/blogs/2021/10/20/vscode-dev"&gt;vscode.dev&lt;/a&gt; I really want to
see if I can bring Esbonio into the browser version of VSCode. There’s only one
problem… Esbonio is written in Python! 😬&lt;/p&gt;
&lt;section id="the-approach"&gt;
&lt;h2&gt;The Approach&lt;/h2&gt;
&lt;p&gt;I’m sure there will be plenty of problems that need to be solved in order to
make this work, but my gut instinct is that it &lt;em&gt;is&lt;/em&gt; possible. First of all there is
&lt;a class="reference external" href="https://pyodide.org/en/stable/index.html"&gt;Pyodide&lt;/a&gt; which, if you’ve not come across it before, is the Python interpreter,
(&lt;a class="reference external" href="https://pyodide.org/en/stable/usage/wasm-constraints.html"&gt;most of&lt;/a&gt;) the standard library and the “scientific stack” compiled down to
WebAssembly which can then be executed in a browser.&lt;/p&gt;
&lt;p&gt;Also, as part of the vscode.dev &lt;a class="reference external" href="https://www.youtube.com/watch?v=sy3TUb_iVJM&amp;amp;t=1447"&gt;announcement stream&lt;/a&gt; they demo’d the &lt;a class="reference external" href="https://marketplace.visualstudio.com/items?itemName=joyceerhl.vscode-pyodide"&gt;vscode-pyodide&lt;/a&gt;
extension which builds on Pyodide and &lt;a class="reference external" href="https://github.com/jupyterlite/jupyterlite"&gt;JupyterLite&lt;/a&gt; to allow for executable Python
notebooks from a web browser! This proves that it’s possible to run Python code via
Pyodide from within VSCode running in a web browser.&lt;/p&gt;
&lt;p&gt;All that’s left to do is “just” to connect the dots! 😃&lt;/p&gt;
&lt;p&gt;Of course, the devil is in the details and there’s going to be all sorts of gotchas on
the way to making this work. But I think a rough plan of attack would be to tackle the
following steps.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Setup a basic VSCode extension that runs in a browser composed of placeholder language
client and server components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Expand on the language server to include a server implemented with &lt;a class="reference external" href="https://github.com/openlawlibrary/pygls"&gt;pygls&lt;/a&gt;
(the library that Esbonio is built on).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure Sphinx works in a browser context. I’m fairly sure Sphinx is a pure Python
project so in theory should “just work” but file I/O could prove a challenge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bring all of the above together and get the Esbonio language server running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ship it!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-setup"&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;Using the &lt;a class="reference external" href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-web-extension-sample"&gt;lsp-web-extension-sample&lt;/a&gt; as a guide, the remainder of this blog post is
going to be dedicated to setting up the rough structure of a web-enabled lsp VSCode
extension. You can browse the completed extension &lt;a class="reference internal" href="../code/hello-lsp-web/"&gt;&lt;span class="doc"&gt;here&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But before we get too far into it, it’s probably worth zooming out a bit and roughly
sketch out all the pieces and how they fit together.&lt;/p&gt;
&lt;section id="architecture"&gt;
&lt;h3&gt;Architecture&lt;/h3&gt;
&lt;p&gt;At the core we have two components, a language client (e.g. our VSCode extension) and
a language server (e.g. the &lt;a class="reference external" href="https://pypi.org/project/esbonio"&gt;esbonio&lt;/a&gt; Python package) which communicate by sending
messages between each other.&lt;/p&gt;
&lt;svg
  width="100%"
  viewBox="0 0 350 100"
  class="bg-gray-100 dark:bg-gray-900 border dark:border-gray-600 rounded"
  fill="currentColor"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:svg="http://www.w3.org/2000/svg"&gt;

  &lt;defs&gt;
    &lt;marker id="arrowhead" markerWidth="10" markerHeight="10" refX="0" refY="3" orient="auto" markerUnits="strokeWidth"&gt;
      &lt;path d="M0,0 L0,6 L9,3 z"&gt;&lt;/path&gt;
    &lt;/marker&gt;
  &lt;/defs&gt;

  &lt;rect class="text-green-600" x="30" y="25" width="100" height="50"/&gt;
  &lt;rect class="text-green-600" x="220" y="25" width="100" height="50"/&gt;

  &lt;text class="text-white" y="55" x="47"&gt;LSP Client&lt;/text&gt;
  &lt;text class="text-white" y="55" x="237"&gt;LSP Server&lt;/text&gt;

  &lt;path marker-end="url(#arrowhead)" stroke="currentColor" d="M135 40 L205 40"&gt;&lt;/path&gt;
  &lt;path marker-end="url(#arrowhead)" stroke="currentColor" d="M215 60 L145 60"&gt;&lt;/path&gt;
&lt;/svg&gt;&lt;p&gt;In a web browser context, the client runs as a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;Web Worker&lt;/a&gt; that it managed by VSCode’s
Extension Host. The client in turn manages its own Web Worker which hosts the language
server. Hopefully, this server web worker will eventually contain an instance of Pyodide
running Esbonio managed by a bit of JavaScript glue code.&lt;/p&gt;
&lt;svg
  width="100%"
  viewBox="0 0 700 200"
  class="bg-gray-100 dark:bg-gray-900 border dark:border-gray-600 rounded"
  fill="currentColor"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:svg="http://www.w3.org/2000/svg"&gt;

  &lt;defs&gt;
    &lt;marker id="arrowright" markerWidth="10" markerHeight="10" refX="0" refY="3" orient="0deg" markerUnits="strokeWidth"&gt;
      &lt;path d="M0,0 L0,6 L9,3 z"&gt;&lt;/path&gt;
    &lt;/marker&gt;
    &lt;marker id="arrowleft" markerWidth="10" markerHeight="10" refX="0" refY="3" orient="180deg" markerUnits="strokeWidth"&gt;
      &lt;path d="M0,0 L0,6 L9,3 z"&gt;&lt;/path&gt;
&lt;/defs&gt;

  &lt;rect class="text-green-600" fill="none" stroke="currentColor" x="30" y="50" width="150" height="100"/&gt;
  &lt;rect class="text-green-600" fill="none" stroke="currentColor" x="225" y="50" width="150" height="100"/&gt;
  &lt;rect class="text-green-600" fill="none" stroke="currentColor" x="420" y="50" width="250" height="100"/&gt;

  &lt;rect class="text-green-600" x="50" y="75" width="110" height="50"/&gt;
  &lt;rect class="text-green-600" x="250" y="75" width="100" height="50"/&gt;
  &lt;rect class="text-green-600" x="435" y="75" width="100" height="50"/&gt;
  &lt;rect class="text-green-600" x="565" y="75" width="80" height="50"/&gt;

  &lt;text y="45" x="70"&gt;vscode.dev&lt;/text&gt;
  &lt;text y="45" x="260"&gt;Web Worker&lt;/text&gt;
  &lt;text y="45" x="465"&gt;LSP Server (Web Worker)&lt;/text&gt;
  &lt;text y="95" x="166"&gt;Starts&lt;/text&gt;

  &lt;text class="text-white" y="105" x="57"&gt;Extension Host&lt;/text&gt;
  &lt;text class="text-white" y="105" x="267"&gt;LSP Client&lt;/text&gt;
  &lt;text class="text-white" y="105" x="450"&gt;JS Wrapper&lt;/text&gt;
  &lt;text class="text-white" y="105" x="580"&gt;Pyodide&lt;/text&gt;

  &lt;path marker-end="url(#arrowright)" stroke="currentColor" d="M162 100 L240 100"&gt;&lt;/path&gt;
  &lt;path marker-start="url(#arrowleft)" marker-end="url(#arrowright)" stroke="currentColor" d="M360 100 L425 100"&gt;&lt;/path&gt;
  &lt;path marker-start="url(#arrowleft)" marker-end="url(#arrowright)" stroke="currentColor" d="M545 100 L555 100"&gt;&lt;/path&gt;
&lt;/svg&gt;&lt;/section&gt;
&lt;section id="writing-the-language-client"&gt;
&lt;h3&gt;Writing the Language Client&lt;/h3&gt;
&lt;p&gt;The language client code is pretty straightforward as all the heavy lifting is done
by the &lt;a class="reference external" href="https://www.npmjs.com/package/vscode-languageclient"&gt;vscode-languageclient&lt;/a&gt; library.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--save&lt;span class="w"&gt; &lt;/span&gt;vscode-languageclient
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The client code is pretty much identical to code found in the &lt;a class="reference external" href="https://github.com/microsoft/vscode-extension-samples/blob/355d5851a8e87301cf814a3d20f3918cb162ff73/lsp-web-extension-sample/client/src/browserClientMain.ts"&gt;sample extension&lt;/a&gt;
I used as reference. All that we have to do it tell the language client which documents
we’re interested in&lt;/p&gt;
&lt;div class="highlight-typescript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clientOptions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;LanguageClientOptions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;documentSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;plaintext&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;outputChannelName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello Language Server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and since we’re building this for the web, we need to start a web worker that hosts the
language server and pass that to the client also.&lt;/p&gt;
&lt;div class="highlight-typescript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;joinPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extensionUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dist/server.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LanguageClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello-lsp-web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello LSP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clientOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onReady&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello-lsp-web server is ready&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="writing-the-language-server"&gt;
&lt;h3&gt;Writing the Language Server&lt;/h3&gt;
&lt;p&gt;The goal of this post is just to get the simplest end-to-end concept working so the
“language server” in this case does barely anything except prove that&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We can communicate with the client&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can load Pyodide and execute some Python code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Communication with web workers is achieved through &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#sending_messages_to_and_from_a_dedicated_worker"&gt;sending messages&lt;/a&gt;, so to handle
incoming messages from the client we create an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;onmessage&lt;/span&gt;&lt;/code&gt; event handler and use the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;postMessage&lt;/span&gt;&lt;/code&gt; to send our responses.&lt;/p&gt;
&lt;p&gt;To prove that the communication works, our “language server” handles the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;initialize&lt;/span&gt;&lt;/code&gt;
request to establish the session, but ignores everything else.&lt;/p&gt;
&lt;div class="highlight-typescript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Client message:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;initialize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;jsonrpc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;event.data.id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;serverInfo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, LSP&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the communication taken care of, we can focus on setting up Pyodide. Adapting one
of the &lt;a class="reference external" href="https://pyodide.org/en/stable/usage/quickstart.html#complete-example"&gt;getting started examples&lt;/a&gt; from the Pyodide documentation and using the
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#importing_scripts_and_libraries"&gt;importScripts&lt;/a&gt; function that’s available to web workers it’s relatively
straightforward to load Pyodide from a CDN and initialize it.&lt;/p&gt;
&lt;div class="highlight-typescript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;initPyodide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Initing pyodide.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* @ts-ignore */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pyodide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loadPyodide&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;indexURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.18.1/full/&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pyodide&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pyodideReady&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;initPyodide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pyodide isn’t exactly a small component to download and especially when we start
pulling in packages, will take some time to initialize. Using a global &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyodideReady&lt;/span&gt;&lt;/code&gt;
promise we can make any code that depends on pyodide wait until it’s ready to use.&lt;/p&gt;
&lt;div class="highlight-typescript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pyodide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pyodideReady&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pyodide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import sys;sys.version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="packaging-for-the-web"&gt;
&lt;h3&gt;Packaging for the Web&lt;/h3&gt;
&lt;p&gt;You may have noticed that the code above was written in TypeScript which needs to be
compiled into JavaScript in order to run in the browser. Additionally, due
to the way VSCode &lt;a class="reference external" href="https://code.visualstudio.com/api/extension-guides/web-extensions#web-extension-main-file"&gt;handles web extensions&lt;/a&gt; all the code that comprises the language
client (including the dependencies!) needs to be bundled into a single JavaScript file.&lt;/p&gt;
&lt;p&gt;To do this we’ll use &lt;a class="reference external" href="https://webpack.js.org/"&gt;webpack&lt;/a&gt; along with a few other tools.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--save-dev&lt;span class="w"&gt; &lt;/span&gt;webpack&lt;span class="w"&gt; &lt;/span&gt;webpack-cli&lt;span class="w"&gt; &lt;/span&gt;typescript&lt;span class="w"&gt; &lt;/span&gt;ts-loader&lt;span class="w"&gt; &lt;/span&gt;@types/vscode&lt;span class="w"&gt; &lt;/span&gt;path-browserify
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Like most of this setup, the webpack configuration was based on the
&lt;a class="reference external" href="https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-web-extension-sample"&gt;lsp-web-extension-sample&lt;/a&gt;  where we export 2 configurations, one for the client and
one for the server.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clientConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webworker&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./src/client&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path-browserify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;...,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;externals&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commonjs vscode&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serverConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webworker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./src/server&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serverConfig&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’ve omitted most of the more standard configuration fields for brevity but you can
look at the &lt;a class="reference internal" href="../code/hello-lsp-web/"&gt;&lt;span class="doc"&gt;code&lt;/span&gt;&lt;/a&gt; for full details though there are a few
things worth mentioning&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Both client and server will be running in web workers so we need to make sure we tell
webpack to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;target:&lt;/span&gt; &lt;span class="pre"&gt;webworker&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The client depends on the VSCode API but it’s not available at build time, so we use
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;externals&lt;/span&gt;&lt;/code&gt; field to tell webpack to translate any &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;{}&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;'vscode'&lt;/span&gt;&lt;/code&gt;
statements into a CommonJS import.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node libraries like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;path&lt;/span&gt;&lt;/code&gt;  are not available in the browser, so we use the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fallback&lt;/span&gt;&lt;/code&gt; field to replace calls to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;path&lt;/span&gt;&lt;/code&gt; library, will calls to the
&lt;a class="reference external" href="https://www.npmjs.com/package/path-browserify"&gt;path-browserify&lt;/a&gt; library which implements the same API, but works within the browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally to invoke webpack we can add a couple of scripts to our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;package.json&lt;/span&gt;&lt;/code&gt; for
convenience.&lt;/p&gt;
&lt;div class="highlight-json notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;compile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;webpack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;webpack --watch&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="trying-it-out"&gt;
&lt;h3&gt;Trying it out&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I don’t fully understand how this section works, thankfully the VSCode devs figured
out these steps and &lt;a class="reference external" href="https://code.visualstudio.com/api/extension-guides/web-extensions#test-your-web-extension-in-on-vscode.dev"&gt;wrote them up&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The last step is to actually try to run this extension in the web version of VSCode and
see if it works. Unfortunately testing a web extension is not as straightforward as a
desktop one, but with a few &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;npm&lt;/span&gt;&lt;/code&gt; commands  &lt;em&gt;✨magic happens✨&lt;/em&gt; and the web version
of VSCode is able to install our extension from a simple web server running on
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;localhost&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;First we start by adding a few more scripts to our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;package.json&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-json notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npx serve --cors -l 5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tunnel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npx localtunnel -p 5000&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now assuming that we’ve already run &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;npm&lt;/span&gt; &lt;span class="pre"&gt;run&lt;/span&gt; &lt;span class="pre"&gt;watch&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;npm&lt;/span&gt; &lt;span class="pre"&gt;run&lt;/span&gt; &lt;span class="pre"&gt;compile&lt;/span&gt;&lt;/code&gt; from the
previous section, we run both the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;serve&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tunnel&lt;/span&gt;&lt;/code&gt; scripts from &lt;strong&gt;two separate
terminals&lt;/strong&gt;&lt;/p&gt;
&lt;div class="flex flex-col lg-flex-row justify-around docutils container"&gt;
&lt;div class="overflow-auto highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="go"&gt;&amp;gt; hello-lsp-web@ serve blog/code/hello-lsp-web&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; npx serve --cors -l 5000&lt;/span&gt;

&lt;span class="go"&gt;npx: installed 88 in 6.613s&lt;/span&gt;

&lt;span class="go"&gt;┌──────────────────────────────────────────────────┐&lt;/span&gt;
&lt;span class="go"&gt;│                                                  │&lt;/span&gt;
&lt;span class="go"&gt;│   Serving!                                       │&lt;/span&gt;
&lt;span class="go"&gt;│                                                  │&lt;/span&gt;
&lt;span class="go"&gt;│   - Local:            http://localhost:5000      │&lt;/span&gt;
&lt;span class="go"&gt;│   - On Your Network:  http://192.168.0.31:5000   │&lt;/span&gt;
&lt;span class="go"&gt;│                                                  │&lt;/span&gt;
&lt;span class="go"&gt;│   Copied local address to clipboard!             │&lt;/span&gt;
&lt;span class="go"&gt;│                                                  │&lt;/span&gt;
&lt;span class="go"&gt;└──────────────────────────────────────────────────┘&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="overflow-auto lg-ml-2 highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;tunnel

&lt;span class="go"&gt;&amp;gt; hello-lsp-web@ tunnel blog/code/hello-lsp-web&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; npx localtunnel -p 5000&lt;/span&gt;

&lt;span class="go"&gt;npx: installed 22 in 3.043s&lt;/span&gt;
&lt;span class="go"&gt;your url is: https://xxxx-yyyy-zzzz.loca.lt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then to enable the tunnel we have to visit the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;https://xxxx-yyyy-zzz.loca.lt&lt;/span&gt;&lt;/code&gt;
URL printed by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tunnel&lt;/span&gt;&lt;/code&gt; script, which takes us to a “Friendly Reminder” screen
and we click the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Click&lt;/span&gt; &lt;span class="pre"&gt;to&lt;/span&gt; &lt;span class="pre"&gt;Continue&lt;/span&gt;&lt;/code&gt; button.&lt;/p&gt;
&lt;figure class="align-default"&gt;
&lt;img alt="https://www.alcarney.me/_images/tunnel_warning.png" src="https://www.alcarney.me/_images/tunnel_warning.png" /&gt;
&lt;/figure&gt;
&lt;p&gt;Now we can finally open the &lt;a class="reference external" href="https://vscode.dev/github/alcarney/blog"&gt;web version&lt;/a&gt; of VSCode itself, open the command palette
with &lt;kbd class="kbd docutils literal notranslate"&gt;F1&lt;/kbd&gt; and pick the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Developer:&lt;/span&gt; &lt;span class="pre"&gt;Install&lt;/span&gt; &lt;span class="pre"&gt;Web&lt;/span&gt; &lt;span class="pre"&gt;Extension...&lt;/span&gt;&lt;/code&gt; command. When asked
for the URL to install from, we paste the URL given to us from the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tunnel&lt;/span&gt;&lt;/code&gt;  script
above.&lt;/p&gt;
&lt;figure class="align-default"&gt;
&lt;img alt="https://www.alcarney.me/_images/install_extension.png" src="https://www.alcarney.me/_images/install_extension.png" /&gt;
&lt;/figure&gt;
&lt;p&gt;With any luck, VSCode should install the extension show it in the installed extensions
list in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Extensions&lt;/span&gt;&lt;/code&gt; tab. All that’s left us to do is actually test the extension!&lt;/p&gt;
&lt;p&gt;As you can probably guess from the code we wrote above, there’s actually not much for
us to test. However, we can open the dev tools as you would on any other website and
create a file &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;test.txt&lt;/span&gt;&lt;/code&gt; if everything works as expected, we should see the following
messages printed to console.&lt;/p&gt;
&lt;figure class="align-center" id="id1"&gt;
&lt;img alt="https://www.alcarney.me/_images/hello-lsp-web.png" src="https://www.alcarney.me/_images/hello-lsp-web.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Success!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;That’s it! We have a very simple proof of concept web extension setup where the language
server component is able to run Python code and communicate with the client. In the next
post I hope to be able to stand up a simple &lt;a class="reference external" href="https://github.com/openlawlibrary/pygls"&gt;pygls&lt;/a&gt; language server and have it work
with the online version of VSCode 🤞&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2021/bringing-esbonio-to-the-browser/" rel="alternate"/>
    <summary>For the past year or so I’ve been working on a language server called Esbonio.
It’s a language server designed to streamline the process of working with your
Sphinx documentation projects. Currently its feature set is quite limited, but I
think it does a good job of providing you with completion suggestions for all your
roles, directives and cross-references.Anyway with the recent releases of github.dev and vscode.dev I really want to
see if I can bring Esbonio into the browser version of VSCode. There’s only one
problem… Esbonio is written in Python! 😬</summary>
    <category term="esbonio" label="esbonio"/>
    <category term="lsp" label="lsp"/>
    <category term="vscode" label="vscode"/>
    <published>2021-10-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2021/ast-python-frontend/</id>
    <title>Creating a CPython Extension</title>
    <updated>2021-01-13T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="creating-a-cpython-extension"&gt;

&lt;p&gt;&lt;a class="reference internal" href="2020/ast-simple-eval/"&gt;&lt;span class="doc"&gt;Previously&lt;/span&gt;&lt;/a&gt;, as part of my exploration
into how programming languages are implemented, I wrote a very simple AST
evaluator that knew how to add and multiply floats together. Since constructing
these ASTs by hand is quite painful I thought it would be fun to come up with a
frontend to my “programming language” which could do it for me.&lt;/p&gt;
&lt;p&gt;Now your typical frontend would be some kind of parser built into the
compiler/interpreter. However, while I’m definitely interested in parsing I
don’t quite feel like tackling that just yet. Instead I’m going to have Python
be the frontend and embed my toy language into it via a &lt;a class="reference external" href="https://docs.python.org/3/extending/extending.html"&gt;CPython Extension&lt;/a&gt;&lt;/p&gt;
&lt;section id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Before diving into the detail I think it would be worth keeping in mind what we
want the end result to be. By the end of this post, we want to have a CPython
extension that allows us to write normal-ish Python code to construct a
representation of some expression&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;
&lt;span class="go"&gt;Multiply&amp;lt;Plus&amp;lt;Literal&amp;lt;1.0&amp;gt;, Literal&amp;lt;2.0&amp;gt;&amp;gt;, Literal&amp;lt;3.0&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and then be able to pass this expression to the AST evaluator we wrote in the
previous post and have it compute the result&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_ast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;9.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you’d rather skip all the exposition you can find the final codebase&lt;/p&gt;
&lt;p&gt;We can break the implementation down into 3 main steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="2021/ast-python-frontend/#ast-python-frontend-ast-repr"&gt;&lt;span class="std std-ref"&gt;Constructing an AST Representation&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We need an equivalent Python representation to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode&lt;/span&gt;&lt;/code&gt; structure,
allowing the user to express the expression they want computed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="2021/ast-python-frontend/#ast-python-frontend-ext-setup"&gt;&lt;span class="std std-ref"&gt;Setting up the C Extension&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before we can get to the fun part, there’s some setup required to get a
CPython extension up and running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="2021/ast-python-frontend/#ast-python-frontend-conversions"&gt;&lt;span class="std std-ref"&gt;Converting Between Python and C&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally we need to write the code that converts the Python representation into
the C representation, passing it off to the evaluator before converting the
result back into Python.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="constructing-an-ast-representation"&gt;
&lt;span id="ast-python-frontend-ast-repr"&gt;&lt;/span&gt;&lt;h2&gt;Constructing an AST Representation&lt;/h2&gt;
&lt;p&gt;To represent the AST in Python code we can create a class that captures the same
information as our &lt;a class="reference internal" href="2020/ast-simple-eval/#ast-simple-eval-ast-repr"&gt;&lt;span class="std std-ref"&gt;AstNode&lt;/span&gt;&lt;/a&gt; struct from the C code&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

   &lt;span class="n"&gt;LITERAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="n"&gt;PLUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="n"&gt;MULTIPLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From there it’s simple enough to create some subclasses that help us fill out
the correct fields.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LITERAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PLUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Technically that’s all we need but we haven’t really gained anything in terms of
usability, constructing an AST from the classes we have defined so far would be
just as painful as it was in C.&lt;/p&gt;
&lt;p&gt;Thankfully though, we don’t have to stop here, by taking advantage of being able
to define implementations for arithmetic operations on our custom types we can
introduce a much nicer method of constructing expressions.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

      &lt;span class="c1"&gt;# Automatically convert python numbers to Literal(x) AST nodes&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__radd__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__mul__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__rmul__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now if we wanted to construct an expression we can do so with fairly
straightforward Python code.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccalc&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="go"&gt;Multiply&amp;lt;Plus&amp;lt;Literal&amp;lt;1.0&amp;gt;, Literal&amp;lt;2.0&amp;gt;&amp;gt;, Literal&amp;lt;3.0&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;Plus&amp;lt;Literal&amp;lt;1.0&amp;gt;, Literal&amp;lt;6.0&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, as shown with the second example above we need to be careful when
choosing the number to wrap in our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccalc.Literal&lt;/span&gt;&lt;/code&gt; class if we want to “catch”
the expression and construct our AST rather than have Python compute the value
directly&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;Plus&amp;lt;Literal&amp;lt;1.0&amp;gt;, Multiply&amp;lt;Literal&amp;lt;2.0&amp;gt;, Literal&amp;lt;3.0&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="setting-up-the-c-extension"&gt;
&lt;span id="ast-python-frontend-ext-setup"&gt;&lt;/span&gt;&lt;h2&gt;Setting up the C Extension&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://realpython.com/build-python-c-extension-module/"&gt;this tutorial&lt;/a&gt; from Real Python as a guide I was able
to get a C Extension up and running surprisingly easily. Be sure to check out
the article for details but in short I ended up creating the following directory
structure&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── ccalc
│   └── __init__.py
├── ccalcmodule.c
└── setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Where the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init__.py&lt;/span&gt;&lt;/code&gt; file contains the Python code we wrote in the previous
section and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccalcmodule.c&lt;/span&gt;&lt;/code&gt; contains the boilerplate needed to define a Python
module&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define PY_SSIZE_T_CLEAN&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;Python.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PyModuleDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ccalcmodule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;PyModuleDef_HEAD_INIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_ccalc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Simple calculator implemented in C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ccalc_methods&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;PyMODINIT_FUNC&lt;/span&gt;
&lt;span class="nf"&gt;PyInit__ccalc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyModule_Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ccalcmodule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyModuleDef&lt;/span&gt;&lt;/code&gt; struct as the name implies, defines some basic information
about the module&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;It’s name &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ccalc&lt;/span&gt;&lt;/code&gt;, specifies what our module is called when we &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;import&lt;/span&gt;&lt;/code&gt;
it in regular Python code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next argument is the module’s docstring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/code&gt; is something to do with sub-interpreters?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccalc_methods&lt;/span&gt;&lt;/code&gt; is an array of structs delcaring all the functions this module
exposes to the interpreter.️&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Something that caught me out is that the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyInit_&amp;lt;module&lt;/span&gt; &lt;span class="pre"&gt;name&amp;gt;&lt;/span&gt;&lt;/code&gt; function &lt;em&gt;must&lt;/em&gt;
match the name we gave the module in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyModuleDef&lt;/span&gt;&lt;/code&gt;,  since the module name is
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ccalc&lt;/span&gt;&lt;/code&gt; I needed an additional &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_&lt;/span&gt;&lt;/code&gt; character in the name so that the module can
be registered correctly.&lt;/p&gt;
&lt;p&gt;The methods declared in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccalc_methods&lt;/span&gt;&lt;/code&gt; array follow a similar pattern&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyMethodDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ccalc_methods&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello_world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method_hello_world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Print &amp;#39;Hello, World!&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// I think this is required so that Python knows when&lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="c1"&gt;// it&amp;#39;s reached the end of the array&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hello_world&lt;/span&gt;&lt;/code&gt; is the name we want regular Python code to use when calling this
method&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;method_hello_world&lt;/span&gt;&lt;/code&gt; is the name of the function in our C code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;METH_VARARGS&lt;/span&gt;&lt;/code&gt; tells Python the kinds of arguments our function should be
called with. Check out the &lt;a class="reference external" href="https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The final parameter sets the docstring for the function&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally we need the the actual method definition itself.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;method_hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Py_RETURN_NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section id="building-the-extension"&gt;
&lt;h3&gt;Building the Extension&lt;/h3&gt;
&lt;p&gt;To my surprise, this was the easiest step of them all. Rather than worrying
about writing a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; or providing the right flags to link against my
version of Python, it turns out that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;setuptools&lt;/span&gt;&lt;/code&gt; takes care of all those
details.&lt;/p&gt;
&lt;p&gt;All I had to do was write a standard &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;setup.py&lt;/span&gt;&lt;/code&gt; file, just with some additional
information about the extension itself&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;

&lt;span class="n"&gt;ccalcmod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_ccalc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ccalcmodule.c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ccalc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A simple calculator implemented in C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ccalc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;ext_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ccalcmod&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the packaging defined a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; was all that was needed
to build and install the extension into my virtual environment.&lt;/p&gt;
&lt;div class="dropdown highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(.env) $ python setup.py install

running install
running bdist_egg
running egg_info
creating ccalc.egg-info
writing ccalc.egg-info/PKG-INFO
writing dependency_links to ccalc.egg-info/dependency_links.txt
writing top-level names to ccalc.egg-info/top_level.txt
writing manifest file &amp;#39;ccalc.egg-info/SOURCES.txt&amp;#39;
reading manifest file &amp;#39;ccalc.egg-info/SOURCES.txt&amp;#39;
writing manifest file &amp;#39;ccalc.egg-info/SOURCES.txt&amp;#39;
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
creating build
creating build/lib.linux-x86_64-3.8
creating build/lib.linux-x86_64-3.8/ccalc
copying ccalc/__init__.py -&amp;gt; build/lib.linux-x86_64-3.8/ccalc
running build_ext
building &amp;#39;_ccalc&amp;#39; extension
creating build/temp.linux-x86_64-3.8
x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/home/alex/Projects/scratch/.env/include -I/usr/include/python3.8 -c ccalcmodule.c -o build/temp.linux-x86_64-3.8/ccalcmodule.o
x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 build/temp.linux-x86_64-3.8/ccalcmodule.o -o build/lib.linux-x86_64-3.8/_ccalc.cpython-38-x86_64-linux-gnu.so
creating build/bdist.linux-x86_64
creating build/bdist.linux-x86_64/egg
creating build/bdist.linux-x86_64/egg/ccalc
copying build/lib.linux-x86_64-3.8/ccalc/__init__.py -&amp;gt; build/bdist.linux-x86_64/egg/ccalc
copying build/lib.linux-x86_64-3.8/_ccalc.cpython-38-x86_64-linux-gnu.so -&amp;gt; build/bdist.linux-x86_64/egg
byte-compiling build/bdist.linux-x86_64/egg/ccalc/__init__.py to __init__.cpython-38.pyc
creating stub loader for _ccalc.cpython-38-x86_64-linux-gnu.so
byte-compiling build/bdist.linux-x86_64/egg/_ccalc.py to _ccalc.cpython-38.pyc
creating build/bdist.linux-x86_64/egg/EGG-INFO
copying ccalc.egg-info/PKG-INFO -&amp;gt; build/bdist.linux-x86_64/egg/EGG-INFO
copying ccalc.egg-info/SOURCES.txt -&amp;gt; build/bdist.linux-x86_64/egg/EGG-INFO
copying ccalc.egg-info/dependency_links.txt -&amp;gt; build/bdist.linux-x86_64/egg/EGG-INFO
copying ccalc.egg-info/top_level.txt -&amp;gt; build/bdist.linux-x86_64/egg/EGG-INFO
writing build/bdist.linux-x86_64/egg/EGG-INFO/native_libs.txt
zip_safe flag not set; analyzing archive contents...
__pycache__._ccalc.cpython-38: module references __file__
creating dist
creating &amp;#39;dist/ccalc-1.0.0-py3.8-linux-x86_64.egg&amp;#39; and adding &amp;#39;build/bdist.linux-x86_64/egg&amp;#39; to it
removing &amp;#39;build/bdist.linux-x86_64/egg&amp;#39; (and everything under it)
Processing ccalc-1.0.0-py3.8-linux-x86_64.egg
removing &amp;#39;/home/alex/Projects/scratch/.env/lib/python3.8/site-packages/ccalc-1.0.0-py3.8-linux-x86_64.egg&amp;#39; (and everything under it)
creating /home/alex/Projects/scratch/.env/lib/python3.8/site-packages/ccalc-1.0.0-py3.8-linux-x86_64.egg
Extracting ccalc-1.0.0-py3.8-linux-x86_64.egg to /home/alex/Projects/scratch/.env/lib/python3.8/site-packages
ccalc 1.0.0 is already the active version in easy-install.pth

Installed /home/alex/Projects/scratch/.env/lib/python3.8/site-packages/ccalc-1.0.0-py3.8-linux-x86_64.egg
Processing dependencies for ccalc==1.0.0
Finished processing dependencies for ccalc==1.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the C code sorted and building, we can import it in Python code and call
functions from it just as we would with any other module.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;_ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;_ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Hello, World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="converting-between-python-and-c"&gt;
&lt;span id="ast-python-frontend-conversions"&gt;&lt;/span&gt;&lt;h2&gt;Converting Between Python and C&lt;/h2&gt;
&lt;p&gt;Now for the fun part! It’s time to write a method for our extension module
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;method_eval_ast&lt;/span&gt;&lt;/code&gt; that takes a Python representation of the AST and converts it
into our C representation before executing it and passing the result back up to
Python.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;method_eval_ast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Be sure to expose the new method to the module&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyMethodDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ccalc_methods&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eval_ast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method_eval_ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Evaluate the given ast.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This can be broken down into a three step process&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="2021/ast-python-frontend/#ast-python-frontend-function-args"&gt;&lt;span class="std std-ref"&gt;Parsing Function Arguments&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="2021/ast-python-frontend/#ast-python-frontend-c-ast"&gt;&lt;span class="std std-ref"&gt;Constructing the C AST&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="2021/ast-python-frontend/#ast-python-frontend-return"&gt;&lt;span class="std std-ref"&gt;Returning the Result&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="parsing-function-arguments"&gt;
&lt;span id="ast-python-frontend-function-args"&gt;&lt;/span&gt;&lt;h3&gt;Parsing Function Arguments&lt;/h3&gt;
&lt;p&gt;When writing a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;METH_VARARGS&lt;/span&gt;&lt;/code&gt; style function, it gets called with 2 parameters
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;self&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;args&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;self&lt;/span&gt;&lt;/code&gt; in this case is a reference to our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ccalc&lt;/span&gt;&lt;/code&gt; module and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;args&lt;/span&gt;&lt;/code&gt; is a reference to a tuple containing the arguments that were passed to
our function.&lt;/p&gt;
&lt;p&gt;As the contents of this tuple can be arbitrary it’s up to our code to correctly
interpret the values that have been given to it. Thankfully Python provides a
handy function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyArg_ParseTuple&lt;/span&gt;&lt;/code&gt; that can take care of this for us.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyArg_ParseTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;O&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This function takes a &lt;a class="reference external" href="https://docs.python.org/3/c-api/arg.html#parsing-arguments"&gt;format string&lt;/a&gt; that specifies the
number and type of arguments we expect to be given. In this case &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;O&amp;quot;&lt;/span&gt;&lt;/code&gt; says that
we want to take a single object - our AST. We also need to pass the correct
number of pointers into this function so that it can “return” the parsed values
to us.&lt;/p&gt;
&lt;p&gt;In the case of invalid arguments being given, this function will set the global
error indicator for us with the correct error message. So all that would be left
for us to do is to return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NULL&lt;/span&gt;&lt;/code&gt; which indicates to the code calling us that
there was an error. See the documentation on &lt;a class="reference external" href="https://docs.python.org/3/c-api/exceptions.html"&gt;error handling&lt;/a&gt; for more details&lt;/p&gt;
&lt;/section&gt;
&lt;section id="constructing-the-c-ast"&gt;
&lt;span id="ast-python-frontend-c-ast"&gt;&lt;/span&gt;&lt;h3&gt;Constructing the C AST&lt;/h3&gt;
&lt;p&gt;With a reference to the Python object that (hopefully!) represents a valid AST
it’s time to do the conversion into our C representation. To do this we’ll write
a function dedicated to handling the conversion and call it from
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;method_eval_ast&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AstTree_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first step is to dynamically allocate enough memory to store the C
representation. Easy enough to do, assuming that you know the size of the
tree…&lt;/p&gt;
&lt;section id="allocating-memory"&gt;
&lt;h4&gt;Allocating Memory&lt;/h4&gt;
&lt;p&gt;It took me a while to realise it, but even though we’re writing C code we are
still within the Python interpreter. This means we still have access to all the standard
Python functions - we just need to look up their C equivalents. Why not just ask the
tree itself how big it is by calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;len()&lt;/span&gt;&lt;/code&gt; on it?&lt;/p&gt;
&lt;p&gt;After a quick trip to the documentation I discover that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;len&lt;/span&gt;&lt;/code&gt; is “spelt”
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject_Length&lt;/span&gt;&lt;/code&gt; in the C API, add some of the required book keeping and we
should be able to allocate enough space&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;AstTree_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject_Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Something important to note here, up until now we’ve been calling into the
Python C API which has been taking care of reporting any errors it encounters.
However, the call to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt; is now our code and it’s our responsibility to
correctly report any errors we counter.&lt;/p&gt;
&lt;p&gt;If we were to leave the code as is and this call to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt; fails, Python would
know that an error had occured but not be able to tell the user what was wrong.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;_ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;_ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_ast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="gr"&gt;   File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;SystemError&lt;/span&gt;: &lt;span class="n"&gt;&amp;lt;built-in function eval_ast&amp;gt; returned NULL without setting an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Instead we also need to call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyErr_SetString&lt;/span&gt;&lt;/code&gt; to raise the appropriate
exception that describes our error.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_MemoryError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to allocate memory for the AST.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the information set, Python is able to report a much better error
message to the user&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;_ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;_ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_ast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="gr"&gt;   File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;MemoryError&lt;/span&gt;: &lt;span class="n"&gt;Unable to allocate memory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally let’s not forget to jump back to the Python code and implement &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__len__&lt;/span&gt;&lt;/code&gt;
on our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode&lt;/span&gt;&lt;/code&gt; class.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="inspecting-nodes"&gt;
&lt;h4&gt;Inspecting Nodes&lt;/h4&gt;
&lt;p&gt;With the memory to hold the tree allocated it’s time to start on the actual
conversion. To handle this we’ll write another function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;/code&gt;
that we can recursively call whenever we need to descend down a branch. This
function will take a reference &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;obj&lt;/span&gt;&lt;/code&gt; to the Python representation of the node
we’re currently converting, another reference &lt;cite&gt;ast&lt;/cite&gt; to the memory we allocated
and finally an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;index&lt;/span&gt;&lt;/code&gt; into the array that we should write the node to.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;astindex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first step in the process is to determine the type of node we are
converting, which we can do by inspecting the value of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/code&gt; field.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject_GetAttrString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyLong_AsLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The call to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject_GetAttrString&lt;/span&gt;&lt;/code&gt; is equivalent to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;obj.type&lt;/span&gt;&lt;/code&gt; in Python and
returns a &lt;strong&gt;new reference&lt;/strong&gt; to a generic Python object. In order to get an
actual number we need to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyLong_AsLong&lt;/span&gt;&lt;/code&gt; to convert it.&lt;/p&gt;
&lt;p&gt;In theory &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/code&gt; could be a reference to anything, so there’s always the chance
that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyLong_AsLong&lt;/span&gt;&lt;/code&gt; could fail in which case it would return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/code&gt;. As stated in
&lt;a class="reference external" href="https://docs.python.org/3/c-api/long.html?highlight=aslong#c.PyLong_AsLong"&gt;the documentation&lt;/a&gt; we should really be performing extra checks here to determine
if the value is actually &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/code&gt; or if there was an error but I’ve decided to omit
those for now.&lt;/p&gt;
&lt;p&gt;Something else to note is that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/code&gt; was a &lt;strong&gt;new reference&lt;/strong&gt; and since Python
uses &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Reference_counting"&gt;Reference Counting&lt;/a&gt; internally it’s our responsibility to decrement the
count (using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Py_DECREF&lt;/span&gt;&lt;/code&gt;) when we are finished with it - at least that’s what I
think should be done based on what I found in the documentation on &lt;a class="reference external" href="https://docs.python.org/3/extending/extending.html#ownership-rules"&gt;ownership&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="converting-the-node"&gt;
&lt;h3&gt;Converting the Node&lt;/h3&gt;
&lt;p&gt;Now that we have an integer &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;node_type&lt;/span&gt;&lt;/code&gt; that corresponds with one of the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNodeType&lt;/span&gt;&lt;/code&gt; enum entries we can use a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;switch&lt;/span&gt;&lt;/code&gt; statement and start writing the
conversion code for each type in turn.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject_GetAttrString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyFloat_AsDouble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Considering the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Literal&lt;/span&gt;&lt;/code&gt; node types first, we can follow a very similar process
to the previous section to extract the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;value&lt;/span&gt;&lt;/code&gt; field from the node giving us
enough information to fill out our first &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode&lt;/span&gt;&lt;/code&gt; instance!&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As this node type has no children there’s no further work to do and we can
return successfully. However, in the case of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AST_PLUS&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AST_MULTIPLY&lt;/span&gt;&lt;/code&gt;
things aren’t as straightforward…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="traversing-the-tree"&gt;
&lt;h3&gt;Traversing the Tree&lt;/h3&gt;
&lt;p&gt;Handling the other node types starts off easy enough, since  they are almost
identical we can handle their differences in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;switch&lt;/span&gt;&lt;/code&gt; statement and then use
the remainder of the function to handle recursing down both the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;left&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;right&lt;/span&gt;&lt;/code&gt; branches.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;AST_PLUS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_PLUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;AST_MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can then get references to the child nodes in the same way we’ve been
referencing all the other fields so far&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject_GetAttrString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject_GetAttrString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then “all” that is left to do is set the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;left&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;right&lt;/span&gt;&lt;/code&gt; pointers on the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode&lt;/span&gt;&lt;/code&gt; struct and call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;/code&gt; on each branch - remembering to
adjust the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;index&lt;/span&gt;&lt;/code&gt; value accordingly.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At least… that’s what I wanted to do initially, unfortunately this solution
wouldn’t work in practice,. If &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;left&lt;/span&gt;&lt;/code&gt; is a reference to anything other than an
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AST_LITERAL&lt;/span&gt;&lt;/code&gt; then it’s children would be overwritten when we start processing
nodes on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;right&lt;/span&gt;&lt;/code&gt; branch!&lt;/p&gt;
&lt;p&gt;This had me scratching my head for quite a while, trying to come up with a way
to compute the correct offset for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;right&lt;/span&gt;&lt;/code&gt; branch - without success.&lt;/p&gt;
&lt;p&gt;Instead, since this is C I ended up changing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;index&lt;/span&gt;&lt;/code&gt; argument from an actual
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Py_ssize_t&lt;/span&gt;&lt;/code&gt; to a pointer to one. This allows recursive calls to increment the
index as needed and by the time execution returns to the top level function, the
value referenced by the pointer is automatically the correct value.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I have no idea if this is a terrible idea for real world scenarios, but it seems
to work well enough for this at least.&lt;/p&gt;
&lt;p&gt;To complete the conversion code, all that remains is to make the initial call to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode_FromPyObject&lt;/span&gt;&lt;/code&gt; from our main &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstTree_FromPyObject&lt;/span&gt;&lt;/code&gt;  function&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;AstTree_FromPyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="returning-the-result"&gt;
&lt;span id="ast-python-frontend-return"&gt;&lt;/span&gt;&lt;h3&gt;Returning the Result&lt;/h3&gt;
&lt;p&gt;Phew! That was a lot of work but we’re almost there. We just need to add a few
more lines to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;method_eval_ast&lt;/span&gt;&lt;/code&gt; that takes the newly constructed AST and
evaluates it, before converting the result into a Python float and returning it.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyFloat_FromDouble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s the C Extension finished, the only thing we could do is import the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ccalc&lt;/span&gt;&lt;/code&gt; module from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccalc&lt;/span&gt;&lt;/code&gt; and expose the methods we want to present a unified
interface to users of the module.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In ccalc/__init__.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;_ccalc&lt;/span&gt;

&lt;span class="n"&gt;eval_ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_ast&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And that way we can now make the example code from the start of this post
actually work!&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccalc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;
&lt;span class="go"&gt;Multiply&amp;lt;Plus&amp;lt;Literal&amp;lt;1.0&amp;gt;, Literal&amp;lt;2.0&amp;gt;&amp;gt;, Literal&amp;lt;3.0&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ccalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_ast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;9.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;There was a lot of code flying around in this post, if you want to see the final
result in its entirety you can find it&lt;/p&gt;
&lt;section id="best-practice"&gt;
&lt;h3&gt;Best Practice?&lt;/h3&gt;
&lt;p&gt;This was my first CPython extension so I might be missing out on some best
practices, for example a question I had was around my use of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;free&lt;/span&gt;&lt;/code&gt;. While writing this section I found the documentation on &lt;a class="reference external" href="https://docs.python.org/3/c-api/memory.html"&gt;memory management&lt;/a&gt;
and it appears that the recommendation is to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyMem_*&lt;/span&gt;&lt;/code&gt; family of
functions, even for allocations that are not &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObjects&lt;/span&gt;&lt;/code&gt;. However it looks
like there is a learning curve to these as some functions require holding
the &lt;a class="reference external" href="https://docs.python.org/3/glossary.html#term-global-interpreter-lock"&gt;GIL&lt;/a&gt; and some don’t.&lt;/p&gt;
&lt;p&gt;Hmm… speaking of the GIL, should this extension be acquiring it at any point?
🤔&lt;/p&gt;
&lt;/section&gt;
&lt;section id="another-approach"&gt;
&lt;h3&gt;Another approach&lt;/h3&gt;
&lt;p&gt;Another note worth mentioning is that it looks like it’s possible to
&lt;a class="reference external" href="https://docs.python.org/3/extending/newtypes_tutorial.html"&gt;define custom types&lt;/a&gt; directly in C. This means it should be possible to extend
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode&lt;/span&gt;&lt;/code&gt; C struct to be an object than can be manipulated directly from
Python code - bypassing the need for all the conversion code we had to write.&lt;/p&gt;
&lt;p&gt;However, I decided against this approach mainly because the “convert between the
representations” approach means we get to evolve the Python and C
representations semi independently. Assuming that the Python representation
exposes the correct fields then any method of generating the AST from Python is
perfectly valid.&lt;/p&gt;
&lt;p&gt;Anyway, I think this post has gone on long enough I hope you found it useful and
I’ll see you in the next one!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2021/ast-python-frontend/" rel="alternate"/>
    <summary>Previously, as part of my exploration
into how programming languages are implemented, I wrote a very simple AST
evaluator that knew how to add and multiply floats together. Since constructing
these ASTs by hand is quite painful I thought it would be fun to come up with a
frontend to my “programming language” which could do it for me.Now your typical frontend would be some kind of parser built into the
compiler/interpreter. However, while I’m definitely interested in parsing I
don’t quite feel like tackling that just yet. Instead I’m going to have Python
be the frontend and embed my toy language into it via a CPython Extension</summary>
    <category term="c" label="c"/>
    <category term="prog-langs" label="prog-langs"/>
    <category term="python" label="python"/>
    <published>2021-01-13T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2020/ast-simple-eval/</id>
    <title>Evaluating a Simple Abstract Syntax Tree</title>
    <updated>2020-12-17T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="evaluating-a-simple-abstract-syntax-tree"&gt;

&lt;p&gt;Programming languages and their implementation is a topic I’ve been interested
in for a long time and I thought it would be worth trying to get a bit more
hands on and play with some of the ideas in this space. Choosing a topic
somewhat at random I’ve chosen to take a look at implementing an Abstract Syntax
Tree (AST).&lt;/p&gt;
&lt;section id="what-is-an-abstract-syntax-tree"&gt;
&lt;h2&gt;What is an Abstract Syntax Tree?&lt;/h2&gt;
&lt;p&gt;An &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree&lt;/a&gt; is a way to represent a program’s source
code within an interpreter/compiler. Consider an expression like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt;, it
could be represented by the following tree.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;graph TD
   + --- 1
   + --- 2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;One of the nice things about ASTs is that they remove some of the ambiguity that
can exist in plain text. Consider the expression &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;3&lt;/span&gt;&lt;/code&gt;, there are two ways
to interpret it and depending on which you choose you will get a different
result - either &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(1&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2)&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;3&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;9&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;(2&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;3)&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;7&lt;/span&gt;&lt;/code&gt; (rules like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Order_of_operations#Mnemonics"&gt;BODMAS&lt;/a&gt;
dictate that we should choose the second version but there’s still a choice).
This choice gets encoded into the structure of tree itself&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;graph TD
   subgraph &amp;quot;1 + (2 * 3)&amp;quot;
   p2[+] --- u1[1]
   p2[+] --- m2[x]
   m2[*] --- u2[2]
   m2[*] --- u3[3]
   end
   subgraph &amp;quot;(1 + 2) * 3&amp;quot;
   m1[*] --- p1[+]
   m1[*] --- v3[3]
   p1[+] --- v1[1]
   p1[+] --- v2[2]
   end
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Encoding a program in this way allows the interpreter/compiler to focus on the
semantic meaning of the program without having to worry about the finer details
of how that program happens to be written down.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="representing-an-ast"&gt;
&lt;span id="ast-simple-eval-ast-repr"&gt;&lt;/span&gt;&lt;h2&gt;Representing an AST&lt;/h2&gt;
&lt;p&gt;For no particular reason other I fancied trying it, I decided to use C to
represent my AST where each node is represented by the following struct.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;_ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* The type of node this represents e.g.&lt;/span&gt;
&lt;span class="cm"&gt;       a literal, an operator etc. */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AstNodeType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* In the case of a literal value, this field&lt;/span&gt;
&lt;span class="cm"&gt;       holds the actual value */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* In the case of an operator, this pointer&lt;/span&gt;
&lt;span class="cm"&gt;       refers to the left child node */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;_ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* In the case of an operator, this pointer&lt;/span&gt;
&lt;span class="cm"&gt;       refers to the right child node */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;_ast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Although the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;typedef&lt;/span&gt;&lt;/code&gt; will let us refer to this struct using the name &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AstNode&lt;/span&gt;&lt;/code&gt;
from here on out, this name does not exist within the body of the struct
definition itself. In order to have the struct hold pointers to other instances
of the same type it’s necessary to also name the struct definition &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ast&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to express the example trees above we only need to specify a few node
types&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AST_PLUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AST_MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AstNodeType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With our AST node representation defined, it’s easy enough to construct a tree
for the two examples we outlined earlier&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.0f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plus1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_PLUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;example1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;plus1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mul1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;example2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AST_PLUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mul1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="evaluating-the-ast"&gt;
&lt;h2&gt;Evaluating the AST&lt;/h2&gt;
&lt;p&gt;To evaluate an instance of the AST we have defined we can take a simple approach&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the node we are evaluating is an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AST_LITERAL&lt;/span&gt;&lt;/code&gt; then all we have to do is
return the value stored in that node&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;
&lt;span class="nf"&gt;ast_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AstNode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;AST_LITERAL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the case of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AST_PLUS&lt;/span&gt;&lt;/code&gt;, we recursively call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast_evaluate&lt;/span&gt;&lt;/code&gt; on
both the left and right branches of the tree and then add the resulting values
together&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;AST_PLUS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simiarly for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AST_MULTIPLY&lt;/span&gt;&lt;/code&gt;, but returing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;b&lt;/span&gt;&lt;/code&gt; in this case.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;AST_MULTIPLY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ast_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calling this function on each of our example trees and printing the result we
see that we indeed compute the values we would expect in each case&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Example 1: 9.00
Example 1: 7.00
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And there you have it, a calculator that only knows how to add and multiply
floats! 😃 If you want to see the entire source file you can find it here.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2020/ast-simple-eval/" rel="alternate"/>
    <summary>Programming languages and their implementation is a topic I’ve been interested
in for a long time and I thought it would be worth trying to get a bit more
hands on and play with some of the ideas in this space. Choosing a topic
somewhat at random I’ve chosen to take a look at implementing an Abstract Syntax
Tree (AST).</summary>
    <category term="c" label="c"/>
    <category term="prog-langs" label="prog-langs"/>
    <published>2020-12-17T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2020/passing-strings-between-tinygo-wasm/</id>
    <title>Passing strings between TinyGo and JavaScript</title>
    <updated>2020-05-06T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="passing-strings-between-tinygo-and-javascript"&gt;

&lt;p&gt;After getting a &lt;a class="reference internal" href="2020/hello-world-tinygo-wasm/"&gt;&lt;span class="doc"&gt;“Hello, World!”&lt;/span&gt;&lt;/a&gt; WebAssembly
application working I thought it would be fun to try and implement a toy programming
language in the browser. However before I could even start thinking about parsers,
abstract syntax trees and the like I had to be able to pass strings between my
WebAssembly module and the surrounding JavaScript.&lt;/p&gt;
&lt;p&gt;Turns out that is much trickier than I expected.&lt;/p&gt;
&lt;div class="admonition-disclaimer admonition"&gt;
&lt;p class="admonition-title"&gt;Disclaimer&lt;/p&gt;
&lt;p&gt;I definitely don’t know what I’m doing, if there’s a better way of doing this I’d love
to know about it! 🙂&lt;/p&gt;
&lt;/div&gt;
&lt;section id="the-interface"&gt;
&lt;h2&gt;The Interface&lt;/h2&gt;
&lt;figure class="align-center" id="id1"&gt;
&lt;img alt="https://www.alcarney.me/_images/wasm-input-output.png" src="https://www.alcarney.me/_images/wasm-input-output.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;The Interface to our ‘interpreter’&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our WebAssembly module needs a way to interact with the user in order both collect input
and show the output. So to start with I updated the webpage from the previous post to
include a number of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;textarea&lt;/span&gt;&lt;/code&gt; elements and a “Run” button.&lt;/p&gt;
&lt;div class="highlight-html notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Input&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;run-button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Run&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Output&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log-area&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we could just use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;println&lt;/span&gt;&lt;/code&gt; function to do the equivalent of a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;console.log&lt;/span&gt;&lt;/code&gt;
from our TinyGo code but it could be useful to have a log on screen to provide feedback
to the user.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="passing-strings-from-tinygo-to-javascript"&gt;
&lt;h2&gt;Passing strings from TinyGo to JavaScript&lt;/h2&gt;
&lt;p&gt;To achieve this we first need a JavaScript function which takes some text and appends it
to the “log” &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;textarea&lt;/span&gt;&lt;/code&gt; element on screen.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we need some way to reference such a function from our go code. If we define a
function but not implement it TinyGo will recognise it as an external function whose
implementation should be provided by the surrounding JavaScript.&lt;/p&gt;
&lt;div class="highlight-go notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The Go tools inside of VSCode will complain about the missing implementation for the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;log&lt;/span&gt;&lt;/code&gt; function but TinyGo itself will compile this happily.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Lastly all we have to do is adjust our wrapping JavaScript code to pass in the
implementation for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;log&lt;/span&gt;&lt;/code&gt; function to the module’s environment. While we’re at we
might as well wire up that “Run” button.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;onRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main.go.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logText&lt;/span&gt;

&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/js/wisp.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;runButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;runButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;onRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That should be everything connected up, time to give it a whirl!&lt;/p&gt;
&lt;figure class="align-center" id="id2"&gt;
&lt;img alt="https://www.alcarney.me/_images/wasm-addr.png" src="https://www.alcarney.me/_images/wasm-addr.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Not exactly what I had in mind…&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hmm… 🤔&lt;/p&gt;
&lt;p&gt;This result quickly prompted an extended session of searching around for the “right”
way to pass values back and forth between my WebAssembly module and the surrounding
JavaScript code. Unfortunately I didn’t really come across anything that seemed to work
for me.&lt;/p&gt;
&lt;p&gt;I did find that Go has a &lt;a class="reference external" href="https://golang.org/pkg/syscall/js/"&gt;syscall/js&lt;/a&gt; module which seems to handle exactly this kind of
thing along with a &lt;a class="reference external" href="https://www.aaron-powell.com/posts/2019-02-06-golang-wasm-3-interacting-with-js-from-go/"&gt;tutorial series&lt;/a&gt; that makes use of it. The problem is that it seems
to fly in the face of the &lt;a class="reference external" href="https://tinygo.org/webassembly/webassembly/"&gt;examples&lt;/a&gt; (which I did manage to reproduce) on the TinyGo
website where it appears the compiler is handling most of these details.&lt;/p&gt;
&lt;p&gt;Unable to find an example to copy I decided it was time for a peek behind the curtain…&lt;/p&gt;
&lt;section id="digging-deeper"&gt;
&lt;h3&gt;Digging Deeper&lt;/h3&gt;
&lt;p&gt;On my travels I did manage to find out some more information about WebAssembly itself&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;WebAssembly only has basic integer and float &lt;a class="reference external" href="https://webassembly.github.io/spec/core/syntax/types.html"&gt;types&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A module has its own &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory"&gt;memory&lt;/a&gt; and is represented by an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ArrayBuffer&lt;/span&gt;&lt;/code&gt; in
JavaScript code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before long I had a hunch that the random number that was being displayed in the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;textarea&lt;/span&gt;&lt;/code&gt; element was in fact the memory address of the string to be logged. If that
was the case, how should the memory in that location be interpreted so that we’re
able to extract a string from it?&lt;/p&gt;
&lt;p&gt;After some more research I discovered that TinyGo is using the &lt;a class="reference external" href="https://llvm.org/"&gt;LLVM&lt;/a&gt; compiler
toolchain and that you can ask it for the &lt;a class="reference external" href="https://llvm.org/docs/LangRef.html#abstract"&gt;intermediate representation&lt;/a&gt; which it
passes to LLVM in order to generate the WebAssembly code.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;tinygo&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-no-debug&lt;span class="w"&gt; &lt;/span&gt;-target&lt;span class="w"&gt; &lt;/span&gt;wasm&lt;span class="w"&gt; &lt;/span&gt;-printir&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;public/js/wisp.wasm&lt;span class="w"&gt; &lt;/span&gt;main.go&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;debug.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, there is a &lt;em&gt;lot&lt;/em&gt; going on (20,000+ lines) in this file as it includes not just our
simple program but the Go runtime required to execute it. Thankfully with &lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;Ctrl&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;F&lt;/kbd&gt;&lt;/kbd&gt; to
the rescue, it’s easy enough to track down where our “Hello, World!” string is defined&lt;/p&gt;
&lt;div class="highlight-llvm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="vg"&gt;@&amp;quot;main.go.main$string&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;internal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;unnamed_addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;constant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I don’t know the first thing when it comes to LLVM’s IR representation of code but after
looking into how it thinks about &lt;a class="reference external" href="https://llvm.org/docs/LangRef.html#array-type"&gt;arrays&lt;/a&gt; we see that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[13&lt;/span&gt; &lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;i8]&lt;/span&gt;&lt;/code&gt; indicates
that our string is represented by an array of 13, 8-bit integers.&lt;/p&gt;
&lt;p&gt;Awesome, we now know how to interpret the values we see in the WebAssembly module’s
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ArrayBuffer&lt;/span&gt;&lt;/code&gt;, but how will we know how many values to look for?&lt;/p&gt;
&lt;p&gt;Let’s try and find our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;log&lt;/span&gt;&lt;/code&gt; function…&lt;/p&gt;
&lt;div class="highlight-llvm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@main.go.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ah, just like the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;log&lt;/span&gt;&lt;/code&gt; function in our go code it has no implementation since this is
to be provided by the JavaScript wrapper. However instead of a single argument it now
takes 4! Interesting… let’s track down our main function and see how it is used.&lt;/p&gt;
&lt;div class="highlight-llvm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;dso_local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@main.go.main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;%context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;%parentHandle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;unnamed_addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;entry:&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@main.go.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;getelementptr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inbounds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;]*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@&amp;quot;main.go.main$string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Wow. Umm… there’s a lot going on here… what if we try “squinting” at this code a bit&lt;/p&gt;
&lt;div class="highlight-llvm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@main.go.main&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@main.go.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;getelementptr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;@&amp;quot;main.go.main$string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,...),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ok, so it looks like there’s a call being made to our log function and
&lt;a class="reference external" href="https://llvm.org/docs/LangRef.html#i-getelementptr"&gt;getelementptr&lt;/a&gt; appears to be returning the memory address of our
“Hello, World!” string and look! The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;i32&lt;/span&gt; &lt;span class="pre"&gt;13&lt;/span&gt;&lt;/code&gt; argument appears to be passing in its
length! I have no idea what the other arguments are supposed to represent so let’s just
ignore those for now! 😃&lt;/p&gt;
&lt;p&gt;Instead why don’t we tweak our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;logText&lt;/span&gt;&lt;/code&gt; implementation of this function to take a
second argument and see what happens&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;figure class="align-center" id="id3"&gt;
&lt;img alt="https://www.alcarney.me/_images/wasm-addr-length.png" src="https://www.alcarney.me/_images/wasm-addr-length.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;That looks promising!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="extracting-the-string"&gt;
&lt;h3&gt;Extracting the String&lt;/h3&gt;
&lt;p&gt;Assuming our assumptions are correct we should now have all the information we need in
order to extract the string from the WebAssembly module’s memory. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ArrayBuffer&lt;/span&gt;&lt;/code&gt; objects
in JavaScript don’t seem to be the most intuitive to work with but I was eventually able
to come up with this.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After getting the reference to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;memory&lt;/span&gt;&lt;/code&gt; object we use the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice"&gt;slice&lt;/a&gt; method to obtain
a copy of only the bytes that represent our string. Unfortunately bytes on their own are
meaningless unless you know how to interpret them. To enable this there is a whole collection
of &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"&gt;views&lt;/a&gt; that can be wrapped around a given array of bytes to attach meaning to them.
From our explorations above we know that we should use an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Int8Array&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From there we map the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;String.fromCharCode&lt;/span&gt;&lt;/code&gt; function over the array of ints to convert
them to a string. Finally, we should be able to see our “Hello, World!” string output to
the log area&lt;/p&gt;
&lt;figure class="align-center" id="id4"&gt;
&lt;img alt="https://www.alcarney.me/_images/wasm-log-hello.png" src="https://www.alcarney.me/_images/wasm-log-hello.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Success!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This did require a slight tweak to the way we load the module so that we have a global
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasm&lt;/span&gt;&lt;/code&gt; reference that our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;logText&lt;/span&gt;&lt;/code&gt; function is able to use to access the module
instance directly.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/js/wisp.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;runButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;runButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;onRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="passing-strings-from-javascript-to-tinygo"&gt;
&lt;h2&gt;Passing strings from JavaScript to TinyGo&lt;/h2&gt;
&lt;p&gt;Phew, at least we’re halfway there! Now that we’ve figured out how things actually hang
together it’s “just” a matter of doing the inverse process to pass a string from our
JavaScript code into our WebAssembly module. As a proof of concept let’s create an
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;echo&lt;/span&gt;&lt;/code&gt; function in TinyGo that will simply log whatever text it receives.&lt;/p&gt;
&lt;div class="highlight-go notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//go:export echo&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In order to actually pass a string to this function, we need to insert the string into
the memory of the WebAssembly module before calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;echo&lt;/span&gt;&lt;/code&gt; with its address and length.&lt;/p&gt;
&lt;section id="manipulating-memory"&gt;
&lt;h3&gt;Manipulating Memory&lt;/h3&gt;
&lt;p&gt;The problem is, where exactly in the module’s memory should we place the string? We
can’t shove it anywhere as we could corrupt memory required for some other part of the
program. It is possible to &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/grow"&gt;grow&lt;/a&gt; the memory assigned to a module instance
which technically would be free for us to use(?) But it doesn’t exactly &lt;em&gt;feel&lt;/em&gt; right,
having two competing codebases manipulate the same memory layout seems to be asking
for trouble…&lt;/p&gt;
&lt;p&gt;Thankfully I came across &lt;a class="reference external" href="https://github.com/tinygo-org/tinygo/issues/411#issuecomment-503066868"&gt;this comment&lt;/a&gt; on an issue in the TinyGo project
which provides a way we can work around this.&lt;/p&gt;
&lt;div class="highlight-go notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;

&lt;span class="c1"&gt;//go:export getBuffer&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we declare an array of bytes in the module, the TinyGo compiler will allocate space
and manage it for us. Then by exporting the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;getBuffer&lt;/span&gt;&lt;/code&gt; function we provide a way for
our wrapping JavaScript to ask for the address to the region of memory we have reserved
for it. This region of memory should then be safe for us to write to from JavaScript
&lt;strong&gt;provided our go code only reads from this array&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now with some reserved memory to use we can write a function that takes a string and
inserts it into the module’s memory.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;insertText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Get the address of the writable memory.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Return the address we started at.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As with the earlier case, we need to create an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Int8Array&lt;/span&gt;&lt;/code&gt; in order to attach meaning to
the bytes and so that the numbers representing the characters in the string are encoded
correctly. Also note that we’re using the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray"&gt;subarray&lt;/a&gt; method this time so that we’re
modifying the original array and not a copy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="calling-the-echo-function"&gt;
&lt;h3&gt;Calling the Echo Function&lt;/h3&gt;
&lt;p&gt;With a way for us to insert the string we want into the module’s memory we should now
be in a position to call the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;echo&lt;/span&gt;&lt;/code&gt; function passing the starting address and length
of the string we want it to echo. However instead of hardcoding the string this time why
don’t we take it from the input &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;textarea&lt;/span&gt;&lt;/code&gt; we have on the page.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;onRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// First, we need to run the module in order to define everything.&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;inputText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;insertText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Now just pass the memory location to the relevant function.&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;inputText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="https://www.alcarney.me/_images/wasm-echo.gif" src="https://www.alcarney.me/_images/wasm-echo.gif" /&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;That’s about it, if you want to have a look at the final codebase then you can find it
&lt;a class="reference external" href="https://github.com/alcarney/wisp/tree/passing-strings"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This apparently simple task was certainly a lot more work than I expected it to be,
but if nothing else it’s forced me to learn a bit more about some of the lower-level
details of working with WebAssembly modules.&lt;/p&gt;
&lt;p&gt;I don’t think this is necessarily the right approach though.. ok we’re able to pass a
(simple!) string back and forth between our TinyGo code and JavaScript. But there are
more details that still need to be considered&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;This solution does not handle Unicode. There is however a
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"&gt;TextEncoder&lt;/a&gt; API available in the browser that looks like it might
go some way towards fixing this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I thought the fixed buffer size in the go module would be an issue - how would you
handle inputs larger than 1024 bytes? However after a quick test with about 5K of text
it seemed to not matter? 🤷 Though I’m sure there’s ways to break it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, what about more complex data structures? Sure we’d probably be able to encode
them as JSON and pass them around that way but I’m sure that would introduce
unnecessary overhead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And with all that said isn’t this a problem that the toolchain should be solving?
Perhaps I’m just using it wrong 🤔&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2020/passing-strings-between-tinygo-wasm/" rel="alternate"/>
    <summary>After getting a “Hello, World!” WebAssembly
application working I thought it would be fun to try and implement a toy programming
language in the browser. However before I could even start thinking about parsers,
abstract syntax trees and the like I had to be able to pass strings between my
WebAssembly module and the surrounding JavaScript.Turns out that is much trickier than I expected.</summary>
    <category term="go" label="go"/>
    <category term="js" label="js"/>
    <category term="tinygo" label="tinygo"/>
    <category term="wasm" label="wasm"/>
    <published>2020-05-06T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2020/hello-world-tinygo-wasm/</id>
    <title>Saying ‘Hello, World!’ with TinyGo and WebAssembly</title>
    <updated>2020-04-28T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="saying-hello-world-with-tinygo-and-webassembly"&gt;

&lt;p&gt;WebAssembly is something I’ve wanted to play with for quite a while now and
I’ve finally got around to taking a look at it. In this post I describe how I
managed to use &lt;a class="reference external" href="https://tinygo.org/"&gt;TinyGo&lt;/a&gt; to compile a “Hello, World!” Go program into
WebAssembly and execute it in the browser. So that I have something to refer
back to I also describe setting up my development environment as a container
using &lt;a class="reference external" href="https://linuxcontainers.org/"&gt;LXD&lt;/a&gt;.&lt;/p&gt;
&lt;section id="setting-up"&gt;
&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;What I describe here is definitely &lt;em&gt;not&lt;/em&gt; a requirement in order to use TinyGo,
but me wanting to play with yet more technologies so feel free to
&lt;a class="reference internal" href="2020/hello-world-tinygo-wasm/#hello-world-tinygo-wasm-tinygo"&gt;&lt;span class="std std-ref"&gt;skip&lt;/span&gt;&lt;/a&gt; this section if you want! 🙂&lt;/p&gt;
&lt;p&gt;If you’re looking for details on getting started with TinyGo I suggest taking a
look at their &lt;a class="reference external" href="https://tinygo.org/getting-started/"&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The recent release of Ubuntu 20.04 (and my desire to have a computer that works
properly! 😂) has convinced me to switch away from using Arch Linux as my distro of
choice. That said I have been spoiled by how easy it is to grab the latest version
of some programming language and start playing with it…&lt;/p&gt;
&lt;p&gt;Turns out I can have the best of both worlds! Thanks to &lt;a class="reference external" href="https://linuxcontainers.org/"&gt;LXD&lt;/a&gt; and the
interface it provides around the native container technology built into Linux I was
able to spin up an Arch Linux container with all the tools I needed to edit and run
my code.&lt;/p&gt;
&lt;section id="spinning-up-arch-linux"&gt;
&lt;h3&gt;Spinning up Arch Linux&lt;/h3&gt;
&lt;p&gt;Following this`_ article it was easy enough to pull down and
launch an Arch Linux image from the community &lt;a class="reference external" href="https://uk.images.linuxcontainers.org/"&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;snap&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;lxd
&lt;span class="gp"&gt;$ &lt;/span&gt;lxd&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="c1"&gt;# ... and picking all the defaults&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;lxd&lt;span class="w"&gt; &lt;/span&gt;launch&lt;span class="w"&gt; &lt;/span&gt;image:archlinux/amd64&lt;span class="w"&gt; &lt;/span&gt;tinygo&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;#39;tinygo&amp;#39; is the name I&amp;#39;ve given my container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once the container has started it’s easy enough to open a bash shell and start
installing what we need&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;lxc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tinygo&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;/bin/bash
&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;tinygo&lt;span class="w"&gt; &lt;/span&gt;llvm&lt;span class="w"&gt; &lt;/span&gt;lld
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="users-and-project-data"&gt;
&lt;h3&gt;Users and Project Data&lt;/h3&gt;
&lt;p&gt;Even in an unprivileged container (which is what I think LXD uses by default?) its
probably not the best idea to run programs as root so we should create a normal user
account and set a password&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;useradd&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;alex
&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;passwd&lt;span class="w"&gt; &lt;/span&gt;alex
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then its time to share the project folder with the container so that the tools inside
are able to work with it.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;hello-world
&lt;span class="gp"&gt;$ &lt;/span&gt;lxc&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;tinygo&lt;span class="w"&gt; &lt;/span&gt;workdir&lt;span class="w"&gt; &lt;/span&gt;disk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/host/path/to/hello-world/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/alex/hello-world/

&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;/home/alex
&lt;span class="go"&gt;hello-world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="vscode"&gt;
&lt;h3&gt;VSCode&lt;/h3&gt;
&lt;figure class="align-center" id="id2"&gt;
&lt;img alt="https://www.alcarney.me/_images/vscode-remote.gif" src="https://www.alcarney.me/_images/vscode-remote.gif" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Attaching VSCode to ‘tinygo’ container.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Just because the development tools we’re using are isolated in their own container
doesn’t mean we have to give up on all the features of our editor. With VSCode’s
&lt;a class="reference external" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack"&gt;Remote Development Extensions&lt;/a&gt; we can connect to a remote environment where VSCode
will install its server component along with any other extensions we require - all
of which will remain isolated in the container.&lt;/p&gt;
&lt;p&gt;The remote capabilities of VSCode come in a few flavours and while VSCode has an
extension dedicated to containers it appears that it’s hard wired to work with Docker
which isn’t much use in this case… but since each LXC container is assigned a local
IP address I decided to try the SSH method.&lt;/p&gt;
&lt;p&gt;This means we need to enable ssh access from within the container itself.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;openssh
&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--now&lt;span class="w"&gt; &lt;/span&gt;sshd.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then for all the Go related tooling in VSCode to function I also had to install the main
Go implementation.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@tinygo] $ &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;go
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally we can discover the IP address of the container using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lxc&lt;/span&gt; &lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; command and
try to connect VSCode to the container logging in as the &lt;cite&gt;alex&lt;/cite&gt; user we created earlier.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;lxc&lt;span class="w"&gt; &lt;/span&gt;list
&lt;span class="go"&gt;+--------+---------+---------------------+-----------------------------------------------+-----------+-----------+&lt;/span&gt;
&lt;span class="go"&gt;|  NAME  |  STATE  |        IPV4         |                     IPV6                      |   TYPE    | SNAPSHOTS |&lt;/span&gt;
&lt;span class="go"&gt;+--------+---------+---------------------+-----------------------------------------------+-----------+-----------+&lt;/span&gt;
&lt;span class="go"&gt;| tinygo | RUNNING | 10.68.193.81 (eth0) | fd42:56e0:e39c:b4c1:216:3eff:feaa:3b91 (eth0) | CONTAINER | 0         |&lt;/span&gt;
&lt;span class="go"&gt;+--------+---------+---------------------+-----------------------------------------------+-----------+-----------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="access-denied"&gt;
&lt;h3&gt;Access Denied!!&lt;/h3&gt;
&lt;p&gt;Once I started to create the files necessary for the project I very quickly realised that
the project folder we passed into the container was mounted as read-only! It turns
out there is some extra wizardry required to give the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;alex&amp;#64;tinygo&lt;/span&gt;&lt;/code&gt; user permission to
write files back to the host…&lt;/p&gt;
&lt;p&gt;I really don’t quite understand the details of how users and permissions work with these
containers but from what I can gather LXD needs to reuse the ID of my user account on the
host as the ID of the user within the container?..&lt;/p&gt;
&lt;p&gt;Anyway according to &lt;a class="reference external" href="https://tribaal.io/nicer-mounting-home-in-lxd.html"&gt;this post&lt;/a&gt; the incantations needed are&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root:&lt;/span&gt;&lt;span class="nv"&gt;$UID&lt;/span&gt;&lt;span class="s2"&gt;:1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;tee&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;/etc/subuid&lt;span class="w"&gt; &lt;/span&gt;/etc/subgid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which is a one time setup allowing my user ID on the host to be reused. Then on a
per-container basis we also need to tell LXD to reuse my ID within a given container&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;lxc&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tinygo&lt;span class="w"&gt; &lt;/span&gt;raw.idmap&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;both &lt;/span&gt;&lt;span class="nv"&gt;$UID&lt;/span&gt;&lt;span class="s2"&gt; 1000&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Phew! I think, finally, we’re in a position to crack on with the program itself. Was all
of that necessary?.. probably not. Was it interesting? I certainly think so! Is it worth
the effort? Well, I guess only time will tell…&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="tinygo"&gt;
&lt;span id="hello-world-tinygo-wasm-tinygo"&gt;&lt;/span&gt;&lt;h2&gt;TinyGo&lt;/h2&gt;
&lt;p&gt;With the setup out of the way time to write our “Hello, World!” program in Go&lt;/p&gt;
&lt;div class="highlight-go notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="c1"&gt;//go:export main&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//go:export&lt;/span&gt; &lt;span class="pre"&gt;main&lt;/span&gt;&lt;/code&gt; comment. Using comments like these is how we tell TinyGo
which functions we want to be callable from the JavaScript code that will wrap our
WebAssembly module. This is then compiled with the following TinyGo command.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;public/
&lt;span class="gp"&gt;$ &lt;/span&gt;tinygo&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;public/hello.wasm&lt;span class="w"&gt; &lt;/span&gt;-target&lt;span class="w"&gt; &lt;/span&gt;wasm&lt;span class="w"&gt; &lt;/span&gt;main.go
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition-why-tinygo admonition"&gt;
&lt;p class="admonition-title"&gt;Why TinyGo?&lt;/p&gt;
&lt;p&gt;While the standard Go compiler &lt;a class="reference external" href="https://github.com/golang/go/wiki/WebAssembly"&gt;has support&lt;/a&gt; for WebAssembly the binaries it
produces are typically &lt;a class="reference external" href="https://github.com/golang/go/wiki/WebAssembly#reducing-the-size-of-wasm-files"&gt;quite large&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Whereas &lt;a class="reference external" href="https://tinygo.org/"&gt;TinyGo&lt;/a&gt; is an alternate compiler for the Go language that
specifically targets constrained environments such as embedded devices and
microcontrollers. This means the binaries it produces are typically much smaller - at
the expense of &lt;a class="reference external" href="https://tinygo.org/lang-support/"&gt;missing&lt;/a&gt; some features of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="webassembly"&gt;
&lt;h2&gt;WebAssembly&lt;/h2&gt;
&lt;p&gt;With our WebAssembly binary ready to go it’s time to load it into the browser and
execute it.&lt;/p&gt;
&lt;div class="highlight-html notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WASM Test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wasm_exec.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There’s not too much to go into here - I’m surprised at how straightforward this was! 😀
The &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming"&gt;WebAssembly.instantiateStreaming&lt;/a&gt; function is provided by the browser to fetch a
wasm executable over the network and compile it. It also takes an object that describes
details such as how much memory to allocate to the module and which JavaScript functions
should be passed into it.&lt;/p&gt;
&lt;p&gt;Thankfully in our case most of these details are handled by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Go()&lt;/span&gt;&lt;/code&gt; object provided
by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wasm_exec.js&lt;/span&gt;&lt;/code&gt; file from the TinyGo project. All we have to do is make sure that
this file is also accessible by the browser. The file itself should be included as part
of your TinyGo install, mine was located in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/lib/tinygo/targets/wasm_exec.js&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;More details on using the compiled WebAssembly module can be found in the
&lt;a class="reference external" href="https://tinygo.org/webassembly/webassembly/"&gt;TinyGo documentation&lt;/a&gt;&lt;/p&gt;
&lt;figure class="align-center" id="id3"&gt;
&lt;img alt="https://www.alcarney.me/_images/wasm-hello-world.png" src="https://www.alcarney.me/_images/wasm-hello-world.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;This is probably my most convoluted ‘Hello, World!’ program to date!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;All being well, you should be able to open your browser to the webpage we created above
and see the message “Hello, World!” written to the console!&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/blog/blog/blog/2020/hello-world-tinygo-wasm.rst&lt;/span&gt;, line 267); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “tinygo”.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2020/hello-world-tinygo-wasm/" rel="alternate"/>
    <summary>WebAssembly is something I’ve wanted to play with for quite a while now and
I’ve finally got around to taking a look at it. In this post I describe how I
managed to use TinyGo to compile a “Hello, World!” Go program into
WebAssembly and execute it in the browser. So that I have something to refer
back to I also describe setting up my development environment as a container
using LXD.</summary>
    <category term="containers" label="containers"/>
    <category term="go" label="go"/>
    <category term="lxd" label="lxd"/>
    <category term="tinygo" label="tinygo"/>
    <category term="wasm" label="wasm"/>
    <published>2020-04-28T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2020/learning-vulkan-p1/</id>
    <title>Learning Vulkan: Enumerating Physical Devices</title>
    <updated>2020-01-08T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="learning-vulkan-enumerating-physical-devices"&gt;

&lt;p&gt;Being an API for talking to GPUs and other compute devices every Vulkan
program starts off by looking for an appropriate &lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDevice.html"&gt;physical device&lt;/a&gt;
to use. In this post I write a little C program that initialises the Vulkan
API and lists out the available devices in the system.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vkdevice
Device Name:            Intel(R) HD Graphics 520 (Skylake GT2)
  Type:                 Integrated GPU
  Vendor ID:            32902
  Device ID:            6422
  API Version:          v1.1.102
  Driver Version:       v19.3.1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is part of my “Learning Vulkan” series where I try to figure how to use
Vulkan to explore various concepts in graphics programming. As mentioned in
the &lt;a class="reference internal" href="2020/learning-vulkan-p0/"&gt;&lt;span class="doc"&gt;Overview&lt;/span&gt;&lt;/a&gt; I don’t necessarily
know what I’m doing!&lt;/p&gt;
&lt;/div&gt;
&lt;section id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Unlike Python which has tools like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pip&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;venv&lt;/span&gt;&lt;/code&gt; to manage
dependencies and development environments, C projects (as far as I know)
require the environment of your development machine to be “just right”. This means
details such as the host operating system and its libraries are more important
than normal.&lt;/p&gt;
&lt;p&gt;Since this series is a learning exercise, being able to compile and run code
across multiple systems is not a huge concern of mine right now. But here is a rough
overview of what is required to build this project…&lt;/p&gt;
&lt;p&gt;I’m running Arch Linux with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; installed along with the following
Vulkan related packages&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-Q&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;vulkan
&lt;span class="go"&gt;vulkan-extra-layers 1.1.130+10614+a70d5d17e-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-headers 1:1.1.130-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-html-docs 1:1.1.130-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-icd-loader 1.1.130-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-intel 19.3.1-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-man-pages 1:1.0.38-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-trace 1.1.130+10614+a70d5d17e-1&lt;/span&gt;
&lt;span class="go"&gt;vulkan-validation-layers 1.1.130-1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’m not sure however which of these are essential for the code contained in this
post.&lt;/p&gt;
&lt;section id="project-structure"&gt;
&lt;h3&gt;Project Structure&lt;/h3&gt;
&lt;p&gt;I’m intending over the course of this series to build up a repository of Vulkan
examples/utilities and since the API  has a reputation of being verbose I’ll be looking
to reuse as much code as I can! So with that in mind I have opted for the following
project structure&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;--dirsfirst
&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;├── bin&lt;/span&gt;
&lt;span class="go"&gt;│   └── vkdevice&lt;/span&gt;
&lt;span class="go"&gt;├── src&lt;/span&gt;
&lt;span class="go"&gt;│   ├── vkdevice.c&lt;/span&gt;
&lt;span class="go"&gt;│   └── vkdevice.o&lt;/span&gt;
&lt;span class="go"&gt;├── .gitignore&lt;/span&gt;
&lt;span class="go"&gt;└── Makefile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nothing ground breaking, a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;src/&lt;/span&gt;&lt;/code&gt; folder to hold the source and intermediate build files,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bin/&lt;/span&gt;&lt;/code&gt; to hold all the compiled programs and a plain &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; to orchestrate the whole
thing.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-makefile"&gt;
&lt;h3&gt;The Makefile&lt;/h3&gt;
&lt;p&gt;I know that there are tools such as &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt; and &lt;a class="reference external" href="https://www.gnu.org/software/autoconf/"&gt;Autoconf&lt;/a&gt; that are
probably preferable to a plain Makefile since they can be used to abstract over some
differences between platforms. However since I’m not familiar with them and want to
focus on learning Vulkan I’m opting for a simpler approach to start out with.&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gcc
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-Wextra
&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lvulkan
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here I’m declaring that I’m using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc&lt;/span&gt;&lt;/code&gt; compiler, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CFLAGS&lt;/span&gt;&lt;/code&gt; variable contains any
flags that should passed to compile steps (at the moment this just enables some compiler
warnings). Finally &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;LDFLAGS&lt;/span&gt;&lt;/code&gt; contains any flags related to linking, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-lvulkan&lt;/span&gt;&lt;/code&gt; tells the
linker to link our program against the Vulkan SDK.&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vkdevice&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;src/*.o&lt;span class="w"&gt; &lt;/span&gt;bin/*
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next I define the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;default&lt;/span&gt;&lt;/code&gt; target to be &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vkdevice&lt;/span&gt;&lt;/code&gt; so that I can just run &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; and
have it build the project. Then there’s a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clean&lt;/span&gt;&lt;/code&gt; target so that it’s easy to recompile
everything from scratch. Declaring both &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;default&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clean&lt;/span&gt;&lt;/code&gt; to be &lt;a class="reference external" href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"&gt;phony targets&lt;/a&gt; I
think means we’re telling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; not to look for matching files on the filesystem.&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nv"&gt;VKDEVICE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;src/vkdevice.o
&lt;span class="nf"&gt;vkdevice&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VKDEVICE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;bin/vkdevice
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Last but not least we get to the main part of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt;. First there is a generic
&lt;a class="reference external" href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"&gt;pattern rule&lt;/a&gt; that instructs &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; on how to convert any &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.c&lt;/span&gt;&lt;/code&gt; file into
an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.o&lt;/span&gt;&lt;/code&gt; file making use of any of the compiler flags defined earlier. This allows the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; to be extended to compile each program we write by declaring a target that
links the relevant object files (as defined by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VKDEVICE&lt;/span&gt;&lt;/code&gt;) into an executable.&lt;/p&gt;
&lt;p&gt;Then we can compile the project by calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; from the same directory as the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;span class="go"&gt;gcc -c -Wall -Wextra src/vkdevice.c -o src/vkdevice.o&lt;/span&gt;
&lt;span class="go"&gt;gcc -lvulkan src/vkdevice.o -o bin/vkdevice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="creating-an-instance"&gt;
&lt;h2&gt;Creating an instance&lt;/h2&gt;
&lt;p&gt;With all the housekeeping out of the way, time to dive into the code which starts in
a fairly standard way with us including all the header files we need.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;vulkan/vulkan.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Insert code...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then we start by filling out the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VkApplicationInfo&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VkInstanceCreateInfo&lt;/span&gt;&lt;/code&gt; structs.
Unsurprisingly the first is used to provide information about our application such as
the version of the API we wish to use. The application name and version fields are
arbitrary and can be set to whatever we like.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;VkApplicationInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app_info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_STRUCTURE_TYPE_APPLICATION_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pApplicationName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vkDevice Info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_MAKE_VERSION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_API_VERSION_1_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;VkInstanceCreateInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pApplicationInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;app_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vk_info&lt;/span&gt;&lt;/code&gt; struct is then be used to create the instance.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;VkInstance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;VkResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vkCreateInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vk_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create VkInstance!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We also have to be sure to destroy the instance once we have finished with it&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Code omitted...&lt;/span&gt;

&lt;span class="nl"&gt;cleanup_instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;vkDestroyInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is me attempting to apply &lt;a class="reference external" href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#centralized-exiting-of-functions"&gt;this&lt;/a&gt; rule from the Linux kernel style
guide to help manage resources through the lifetime of the program.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="listing-devices"&gt;
&lt;h2&gt;Listing Devices&lt;/h2&gt;
&lt;p&gt;Now that we have an instance we can start querying the API for the physical devices that
are in the system. The issue is however - we don’t know how many devices the system has!
To get around this we first have to call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vkEnumeratePhysicalDevices&lt;/span&gt;&lt;/code&gt; with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NULL&lt;/span&gt;&lt;/code&gt;
pointer, it will then mutate the &lt;cite&gt;count&lt;/cite&gt; variable that we give to be equal to the number
of available devices.&lt;/p&gt;
&lt;p&gt;Note that we skip straight to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cleanup_instance&lt;/span&gt;&lt;/code&gt; label we defined earlier if this
step fails.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vkEnumeratePhysicalDevices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to enumerate physical devices&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cleanup_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we attempt to allocate enough memory to store each of the devices in an array.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;VkPhysicalDevice&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VkPhysicalDevice&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to enumerate physical devices&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cleanup_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally with the array allocated we can call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vkEnumeratePhysicalDevices&lt;/span&gt;&lt;/code&gt; a second time
to populate it. Notice how this time the error path has to jump to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cleanup_devices&lt;/span&gt;&lt;/code&gt;
label so that we can be sure to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;free&lt;/span&gt;&lt;/code&gt; the newly allocated memory.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vkEnumeratePhysicalDevices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to enumerate physical devices&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cleanup_devices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Code omitted...&lt;/span&gt;

&lt;span class="nl"&gt;cleanup_devices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;cleanup_instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;vkDestroyInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition-editor-s-note admonition"&gt;
&lt;p class="admonition-title"&gt;Editor’s Note&lt;/p&gt;
&lt;p&gt;As I was writing this post I looked up the &lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkEnumeratePhysicalDevices.html"&gt;documentation&lt;/a&gt;
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vkEnumeratePhysicalDevices&lt;/span&gt;&lt;/code&gt; and noticed that there is a different way to
approach this section. We could’ve instead decided on a fixed size array&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_DEVICES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;VkPhysicalDevice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_DEVICES&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vkEnumeratePhysicalDevices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MAX_DEVICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this situation the function will return up to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MAX_DEVICES&lt;/span&gt;&lt;/code&gt; and if there more
devices than can fit in the array then &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;res&lt;/span&gt;&lt;/code&gt; will be set to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VK_INCOMPLETE&lt;/span&gt;&lt;/code&gt; giving
us the option to try again with a larger array.&lt;/p&gt;
&lt;p&gt;This creates a dilemma - which approach is better? 🤔&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="device-properties"&gt;
&lt;h2&gt;Device Properties&lt;/h2&gt;
&lt;p&gt;It turns out that a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;VkPhysicalDevice&lt;/span&gt;&lt;/code&gt; on its own is rather useless since it doesn’t
carry any information about itself. In order to find out more about what the device is
and what features of the API it supports you need to call additional functions such as&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetPhysicalDeviceProperties.html"&gt;vkGetPhysicalDeviceProperties&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties.html"&gt;vkGetPhysicalDeviceImageFormatProperties&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html"&gt;vkGetPhysicalDeviceQueueFamilyProperties&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and many more!!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically as part of your program’s setup you would call a number of these to gather
information about support for features that matter to you to help decide which device
is best suited to your use case. However for this toy program we’re only going to call
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vkGetPhysicalDeviceProperties&lt;/span&gt;&lt;/code&gt; for each device which will give us information such as
its name.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;VkPhysicalDeviceProperties&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;vkGetPhysicalDeviceProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;physical_devices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Version numbers (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MAJOR.MINOR.PATCH&lt;/span&gt;&lt;/code&gt;) in the Vulkan API are encoded into a single 32bit
integer as defined in the &lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers"&gt;specification&lt;/a&gt;. Thankfully the spec also defines a number of
macros that make decoding them nice and easy for us.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_major&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_VERSION_MAJOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_minor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_VERSION_MINOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_patch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_VERSION_PATCH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driver_major&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_VERSION_MAJOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driverVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driver_minor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_VERSION_MINOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driverVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driver_patch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VK_VERSION_PATCH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driverVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All that’s left to do is to print out the information we have gathered.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Device Name:     &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deviceName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  Type:          &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vkPhysicalDeviceType_as_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deviceType&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  Vendor ID:     &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vendorID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  Device ID:     &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deviceID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  API Version:   &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;v%d.%d.%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_minor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vk_patch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  Driver Version:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;v%d.%d.%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driver_major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driver_minor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driver_patch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I should also note that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vkPhysicalDeviceType_as_string&lt;/span&gt;&lt;/code&gt; is a helper function I
defined that converts a member of the &lt;a class="reference external" href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceType.html"&gt;VkPhysicalDeviceType&lt;/a&gt; enum
into a string representation with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;switch&lt;/span&gt;&lt;/code&gt; statement.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s that! I’ve taken my first few baby steps with the Vulkan API and I hope that
if you’ve read this far then this post was as useful to you as it was to me! If you are
interested then you can see the full code listing &lt;a class="reference external" href="https://github.com/alcarney/vk/blob/2e7daaa68d79c6467e91bbd9d5ebfcf34729f6a5/src/vkdevice.c"&gt;here&lt;/a&gt; and I’ll see you in the
next one.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2020/learning-vulkan-p1/" rel="alternate"/>
    <summary>Being an API for talking to GPUs and other compute devices every Vulkan
program starts off by looking for an appropriate physical device
to use. In this post I write a little C program that initialises the Vulkan
API and lists out the available devices in the system.This is part of my “Learning Vulkan” series where I try to figure how to use
Vulkan to explore various concepts in graphics programming. As mentioned in
the Overview I don’t necessarily
know what I’m doing!</summary>
    <category term="c" label="c"/>
    <category term="graphics" label="graphics"/>
    <category term="vulkan" label="vulkan"/>
    <published>2020-01-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2020/learning-vulkan-p0/</id>
    <title>Learning Vulkan: Overview</title>
    <updated>2020-01-01T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="learning-vulkan-overview"&gt;

&lt;p&gt;I have always been interested in graphics and have on numerous occasions tried
to dip my toe into the world of OpenGL and more recently Vulkan. However I have
never been able to get past the “Hello, World” of these technologies - drawing a
triangle on screen, I think mostly becuase I never really had a goal in mind
once I got that far…&lt;/p&gt;
&lt;p&gt;But that’s (hopefully) about to change! What better excuse than a new decade to
jump back into this world for the 100th time and try to get to all those
interesting ideas I see people playing with all the time!&lt;/p&gt;
&lt;p&gt;I should say that I don’t really know what I’m doing and will totally be making
it up as I go along. With Python being my favourite language, programming in C
(C++ is just too intimidating) will take some getting used to let alone all the
concepts specific to graphics programming! However that said I’m not a complete
n00b as I have at least played with C on and off over the years - I’m sure I
already know enough to be able to shoot myself in the foot! 😁&lt;/p&gt;
&lt;p&gt;So the only thing left to do is set some goals so I don’t get lost after getting
to the “drawing a triangle on screen” stage again. I imagine this will evolve
into some kind of living document that I’ll use to keep track of my progress - if I
remember to update it that is!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;[ ] Draw a triangle on screen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[x] &lt;a class="reference internal" href="2020/learning-vulkan-p1/"&gt;&lt;span class="doc"&gt;Enumerating available VkPhysicalDevices&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ ] OBJ object viewer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ ] Ray Marching&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ ] Ray Tracing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ ] Python integrations?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2020/learning-vulkan-p0/" rel="alternate"/>
    <summary>I have always been interested in graphics and have on numerous occasions tried
to dip my toe into the world of OpenGL and more recently Vulkan. However I have
never been able to get past the “Hello, World” of these technologies - drawing a
triangle on screen, I think mostly becuase I never really had a goal in mind
once I got that far…But that’s (hopefully) about to change! What better excuse than a new decade to
jump back into this world for the 100th time and try to get to all those
interesting ideas I see people playing with all the time!</summary>
    <category term="c" label="c"/>
    <category term="graphics" label="graphics"/>
    <category term="vulkan" label="vulkan"/>
    <published>2020-01-01T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2019/click-drag-vanilla-js/</id>
    <title>Implementing Click &amp; Drag with Vanilla JS</title>
    <updated>2019-07-07T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="implementing-click-drag-with-vanilla-js"&gt;

&lt;figure&gt;
  &lt;div id="main"&gt;&lt;/div&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Try clicking and dragging on this circle.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;script type="text/javascript" src="/_static/js/click-drag.js"&gt;&lt;/script&gt;&lt;div class="admonition-disclaimer admonition"&gt;
&lt;p class="admonition-title"&gt;Disclaimer&lt;/p&gt;
&lt;p&gt;This post makes use of a number of interactive elements to help illustrate a few
concepts. Unfortunately these do not yet work on mobile devices - sorry mobile
users!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have for quite some time now wanted to play around with web development some
more, particularly using web technologies to build user interfaces of some
kind. However there is just &lt;strong&gt;so much&lt;/strong&gt; out there it’s been impossible for me to
really get anywhere past a “Hello, World!” tutorial before I find myself trying
out the next new shiny.&lt;/p&gt;
&lt;p&gt;So I’ve decided to abandon everything and try a bottom up approach where I see
how far I can push the core web technologies - HTML, CSS and
JavaScript. Hopefully then by the time I start using one of the gazillion
libraries out there I will have a better understanding of why I
needed it in the first place.&lt;/p&gt;
&lt;p&gt;In this post I will be looking at implementing clicking and dragging
functionality using only vanilla JavaScript. Clicking and dragging as a concept
can apply to many kinds of interactions so in this instance I’m specifically
referring to clicking on an SVG element moving it around on the page as
illustrated by the demo above.&lt;/p&gt;
&lt;section id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;All we need to get started is a HTML document that contains some markup which
provides someplace we can reference and attach our image element to, as well as
loading the code we write.&lt;/p&gt;
&lt;div class="highlight-html notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/js/click-drag.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then the first step is to create our SVG image element to act as our “canvas”
that we can draw on.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;svgns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElementNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svgns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;solid 2px #242930&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few things to note:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;By adding our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;&lt;/code&gt; element as a child of some &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;/code&gt; element and setting
both the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;width&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;height&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;100%&lt;/span&gt;&lt;/code&gt; our canvas will be able to
scale responsively based on the styles applied to the parent &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You might already be familiar with the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"&gt;document.createElement()&lt;/a&gt; function for
creating HTML elements using JavaScript. However in order to work with SVG
elements we need to use the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS"&gt;document.createElementNS()&lt;/a&gt; function which allows
us to use the SVG namespace instead of the HTML default.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-view-box"&gt;
&lt;h2&gt;The View Box&lt;/h2&gt;
&lt;p&gt;The next step is to construct an appropriate &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; definition for our
canvas. For more information on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; you can refer to the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox"&gt;documentation&lt;/a&gt;
but to briefly summarise. An SVG image exists on an infinite plane and the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; is the window we use to view a portion of that space, changing the
definition of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; allows you to zoom in and out on particular regions.&lt;/p&gt;
&lt;p&gt;For our purposes what’s important is that we construct a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; that matches
the proportions of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;&lt;/code&gt; element as it is displayed in the browser. If
these proportions do not match then the element being dragged around will not
accurately track the cursor, either racing away from or lagging behind it.&lt;/p&gt;
&lt;p&gt;One minor issue is that in our setup we didn’t explicitly set the dimensions of
our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;&lt;/code&gt; element - so how can we know its proportions? Thankfully once the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;&lt;/code&gt; as been added to the page we can ask the browser for the bounding box
around the element.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Among other properties that are outlined on &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"&gt;this&lt;/a&gt; page we can get the width and
height of the rendered image in pixels from which its easy to calculate the
aspect ratio.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;aspectRatio&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’re free to choose whichever scale we want for the vertical height of the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;&lt;/code&gt; element. I have chosen &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;100&lt;/span&gt;&lt;/code&gt; simply because it feels
like a nice round number. Once we’ve decided on a scale for the height, it’s
easy enough to calculate the corresponding width from our aspect ratio.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;aspectRatio&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the dimensions of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; taken care of all that is left to do is
decide on the coordinates to assign to the top left corner of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;&lt;/code&gt;
element and assign the view box to our canvas.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;minX&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;minY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBoxStr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viewBox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBoxStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="something-to-click-on"&gt;
&lt;h2&gt;Something to Click on&lt;/h2&gt;
&lt;p&gt;By this point we have finished preparing our canvas and it’s time to add
something for us to interact with. To keep things simple I will stick to a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;circle&amp;gt;&lt;/span&gt;&lt;/code&gt;
element, though the method we use here should apply to any SVG element (or any
collection of elements under a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;g&amp;gt;&lt;/span&gt;&lt;/code&gt; tag).&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElementNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svgns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#57cc8a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Of course the way in which you define the position of your interactive element
will depend on the element you have chosen.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="implementing-the-drag"&gt;
&lt;h2&gt;Implementing the Drag&lt;/h2&gt;
&lt;p&gt;We will create an event handler for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mousemove&lt;/span&gt;&lt;/code&gt; event and attach it to
our canvas.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mousemove&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Do something clever here...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function we write will be called every time the cursor moves regardless of
whether the user has clicked or not. This means our event handler has to be able
to cope with two situations, the cursor moving when the user has clicked and the
cursor moving when the user has not clicked.&lt;/p&gt;
&lt;p&gt;To do this we will declare a variable called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clicked&lt;/span&gt;&lt;/code&gt; outside the scope of our
function.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clicked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For the moment we will ignore the details around how this variable is updated
(it is covered in the next section), instead let’s focus on what we do while the
cursor is moving about the page&lt;/p&gt;
&lt;p&gt;Let’s get the simpler case out of the way first&lt;/p&gt;
&lt;section id="not-clicked"&gt;
&lt;h3&gt;Not Clicked&lt;/h3&gt;
&lt;p&gt;When the mouse is moving but the user has not clicked, then there is nothing for
us to do! We can simply check the value of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clicked&lt;/span&gt;&lt;/code&gt; variable and stop the
function if it meets the criteria.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;clicked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="clicked"&gt;
&lt;h3&gt;Clicked&lt;/h3&gt;
&lt;p&gt;Now for the interesting part! The mouse is moving and the user has clicked on
the circle, all we have to do now is update its position to match
the cursor’s current position. The only problem is… where is it?&lt;/p&gt;
&lt;p&gt;Like all mouse related events the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;event&lt;/span&gt;&lt;/code&gt; object passed into the event handler
will contain a number of position related properties.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e.client&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt;: Coordinates of the cursor with respect to the current portion
of the document visible on the page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e.offset&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt;: Coordinates of the cursor with respect to the edge of the
target element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e.page&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt;: Coordinates of the cursor with respect to the entire HTML page,
including any portions of the page not currently visible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e.screen&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt;: Coordinates of the cursor with respect to the user’s display&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reading through those descriptions you would imagine that the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e.offset&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt;
properties would be the best fit for our use case. However it’s not quite as
simple as that.&lt;/p&gt;
&lt;p&gt;Below you should see 2 boxes, the bigger one on the left is our canvas. The
smaller box on the right contains a smaller circle that represents the
calculated position of the cursor based on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;offset&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt; properties like so.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Try moving the mouse across the canvas and keep an eye on the calculated
position.&lt;/p&gt;
&lt;figure&gt;
  &lt;div id="offset-demo"
       style="display:grid;grid-template-columns:50% auto;grid-gap:10px"&gt;
  &lt;h3 id="offset-title" style="margin: 0; padding: 15px; padding-top: 0"&gt;
    Cursor Position: Offset
  &lt;/h3&gt;
    &lt;div&gt;
      &lt;p style="margin:0;padding-left:20px"&gt;Target: &lt;span id="offset-target"&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;p style="margin:0;padding-left:20px"&gt;Position: &lt;span id="offset-position"&gt;&lt;/span&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;svg width="100%"
         id="offset-demo-canvas"
         style="border: solid 2px var(--background-dark)"&gt;
    &lt;/svg&gt;
    &lt;svg width="50%"
         id="offset-posbox"
         style="border: solid 2px var(--background-dark);margin:auto"&gt;&lt;svg&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
    &lt;p&gt;
      Determining the cursor's position using the &lt;code&gt;event.offsetX&lt;/code&gt; and
      &lt;code&gt;event.offsetY&lt;/code&gt; properties
    &lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;script type="text/javascript" src="/_static/js/click-drag-offset.js"&gt;&lt;/script&gt;&lt;p&gt;Notice the issue when we move across the circle? Why does the calculated
position of the cursor suddenly jump whenever we touch it? The answer lies in
the description of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;offset&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt; property “with respect to the edge of the
&lt;strong&gt;target&lt;/strong&gt; element”&lt;/p&gt;
&lt;p&gt;When initially trying to implement this I incorrectly assumed that the target
element meant the element that we attached the event listener to - the canvas. In
fact the target element is whichever element is currently under the cursor&lt;/p&gt;
&lt;p&gt;To work around this we can calculate the offset values we need ourselves. In
order to do this we will make use of both the bounding box returned from the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;canvas.getBoundingClientRect()&lt;/span&gt;&lt;/code&gt; method as well as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;client&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt; properties
found on the mouse event.&lt;/p&gt;
&lt;p&gt;It turns out that the bounding box also returns the coordinates of the top left
corner of the canvas relative to the user’s current view of the document -
exactly the same coordinate system used by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;client&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt; properties! From
those two pieces of information it’s easy enough to recover the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;offset&amp;lt;XY&amp;gt;&lt;/span&gt;&lt;/code&gt;
values ourselves.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By calculating the coordinates using values that are independent of the element
currently underneath the cursor we sidestep any issues that arise from a
changing target. Try the same thing again on the canvas below.&lt;/p&gt;
&lt;figure&gt;
&lt;div id="client-demo"
      style="display:grid;grid-template-columns:50% auto;grid-gap:10px"&gt;
   &lt;h3 id="offset-title" style="margin: 0; padding: 15px; padding-top: 0"&gt;
      Cursor Position: Client
   &lt;/h3&gt;
   &lt;div&gt;
      &lt;p style="margin:0;padding-left:20px"&gt;Target: &lt;span id="client-target"&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;p style="margin:0;padding-left:20px"&gt;Position: &lt;span id="client-position"&gt;&lt;/span&gt;&lt;/p&gt;
   &lt;/div&gt;
   &lt;svg width="100%"
         id="client-demo-canvas"
         style="border: solid 2px var(--background-dark)"&gt;
   &lt;/svg&gt;
      &lt;svg width="50%"
         id="client-posbox"
         style="border: solid 2px var(--background-dark);margin:auto"&gt;&lt;svg&gt;
&lt;/div&gt;
&lt;figcaption&gt;
   &lt;p&gt;
      Determining the cursor's position using the &lt;code&gt;event.clientX&lt;/code&gt; and
      &lt;code&gt;event.clientY&lt;/code&gt; properties
   &lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;script type="text/javascript" src="/_static/js/click-drag-client.js"&gt;&lt;/script&gt;&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;Since the values &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bbox.top&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bbox.left&lt;/span&gt;&lt;/code&gt; are defined relative to the user’s
current view on the document these values are &lt;strong&gt;not&lt;/strong&gt; constant. They will change
whenever the user alters their view of the page, i.e. performing actions like
resizing the window or scrolling. This is why we ask for an updated bounding box
every time our event handler is called.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now that we can reliably know the position of the cursor, we can focus on the
final piece of this puzzle - updating the position of our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;circle&amp;gt;&lt;/span&gt;&lt;/code&gt;
element. There is however one further issue to work through. The position of the
cursor that we’ve just calculated is using a different coordinate system to the
one used to draw our circle!&lt;/p&gt;
&lt;p&gt;Although we have managed to correctly calculate the cursor’s position relative
to our canvas, that position is measured using pixels which makes it highly
dependent on the resolution of the user’s screen. A user who uses a 4K monitor
and positions their cursor at the bottom right of the canvas will have a
calculated position much larger than a user on a smartphone…&lt;/p&gt;
&lt;p&gt;What this means is that if we map this calculated position directly onto the
circle it won’t accurately follow the cursor. The only time the circle would
follow the cursor correctly is when the pixel based coordinates line up with the
coordinate system used in the SVG image. I.e. when the dimensions of the canvas
match up &lt;strong&gt;exactly&lt;/strong&gt; with the scale used to define our &lt;cite&gt;viewBox&lt;/cite&gt; which in this
case would be &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;100px&lt;/span&gt;&lt;/code&gt; tall&lt;/p&gt;
&lt;p&gt;Since the mouse circle and the circle use different coordinate systems, we don’t
actually care about the exact position we have just calculated. What’s more
important is the position of the cursor relative to bounds of the canvas - a
percentage. For example, let’s say that the cursor was halfway down the canvas
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;50%&lt;/span&gt;&lt;/code&gt;) then we could calculate the corresponding coordinate value in the SVG
coordinate system by multiplying the total height by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;50%&lt;/span&gt;&lt;/code&gt;. In our particular
case this would mean setting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;y&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;100&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;0.5&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;50&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can adopt this approach by using the &lt;cite&gt;width&lt;/cite&gt; and &lt;cite&gt;height&lt;/cite&gt; information
returned as part of the bounding box to modify our calculation to produce a
percentage rather than an absolute value.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To then convert this percentage into its corresponding value in the SVG
coordinate system all we have to do is multiply it by the width and height of
that system and assign the result to our circle’s position!&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttriubte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bringing all that together we end up with the following implementation of our
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mousemove&lt;/span&gt;&lt;/code&gt; event handler.&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mousemove&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;clicked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nearly there! The only thing left to do is decide on how we want to update the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clicked&lt;/span&gt;&lt;/code&gt; variable.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="click-detection"&gt;
&lt;h2&gt;Click Detection&lt;/h2&gt;
&lt;p&gt;Finally all that’s left is to do is decide how we want to toggle the dragging
behaviour. This mostly comes down to how you want the user to interact with the
draggable object and will change depending on your use case. To keep things
simple I will go with a fairly simple interaction model&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If the mouse is over the circle and the user clicks then start dragging&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the user releases the mouse button then stop dragging&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mousedown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clicked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mouseup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clicked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Additionally I will impose one final condition&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If the mouse leaves the bounds of the canvas then stop dragging.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mouseleave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clicked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This last point is to work around an issue that arises when the user moves the
cursor out of the bounds of the canvas and releases the mouse button. Since the
cursor is no longer over the circle the handler for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mouseup&lt;/span&gt;&lt;/code&gt; event on the
circle is never fired so when the user brings their cursor back over the canvas
our code still believes the user never released the mouse button and so the
circle will appear “stuck” to their cursor until they click again.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There you have it, those were some of the basics required to get a working proof
of concept of clicking and dragging functionality using only the JavaScript APIs
that come with your web browser. However in writing this blog post I realised
as with anything that the rabbit hole goes deep and there are many
considerations to keep in mind if you wanted to “productionise” this code for
any real usage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Touchscreen Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you were reading this post on a mobile device you will already have noticed
that none of the interactive demos have worked. This is because touchscreens
have their own family of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;touchXXXX&lt;/span&gt;&lt;/code&gt; events that are triggered when a user
interacts with a webpage. While there is some mouse emulation done by the
browsers (e.g. a &lt;cite&gt;touchstart&lt;/cite&gt; event will trigger a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mousedown&lt;/span&gt;&lt;/code&gt; event if not
handled), some key events such as &lt;cite&gt;mousemove&lt;/cite&gt; are not emulated and require
dedicated support in your code. See &lt;a class="reference external" href="https://www.html5rocks.com/en/mobile/touch/"&gt;these&lt;/a&gt; &lt;a class="reference external" href="https://www.html5rocks.com/en/mobile/touchandmouse/"&gt;articles&lt;/a&gt; for more details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Snap to Center&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is only a minor issue and depending on your use case may not be a problem
at all. Currently whenever you pick up the circle its center snaps to the
cursor’s position. There may be situations where you would prefer the keep the
object’s relative position to the cursor e.g. fine adjustments, the last thing
you would want is for the object to jump to the cursor just because the user
happened to click on it off center.&lt;/p&gt;
&lt;p&gt;A way around this would be to record the original positions of both the mouse
cursor and the object on a click, then on each &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mousemove&lt;/span&gt;&lt;/code&gt; event calculate the
distance moved by the cursor and apply it to the original recorded position of
the object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multiple Objects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chances are when using this functionality in a real application you would want
the ability to click and drag on multiple objects. Adding support for this
would require reworking at least some of the code, having the canvas object
handle all mouse movements is probably a good idea but of course updating the
circle’s position directly would have to change. It would probably make sense
to move the click detection logic onto the canvas also, making use of the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;event.target&lt;/span&gt;&lt;/code&gt; property to determine which object would need updating.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Canvas Resizing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While the existing code makes some effort to ensure this works in a responsive
manner it is currently only “statically responsive”. What I mean is that on
page load all the necessary calculations are performed to ensure that the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; has the correct proportions for example. However if the user were to
resize the webpage, or rotate their device chances are the proportions of the
canvas would change meaning that the circle would no longer follow the cursor
correctly.&lt;/p&gt;
&lt;p&gt;In order to be truly responsive, we would need to listen for events such as
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resize%5Fevent"&gt;resize&lt;/a&gt; and perform all the calculations again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pan and Zoom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Something I realised when writing up the part where we map the cursor’s
position onto the position of the circle is that I had by chance chosen a
special case where the maths is a little easier. The calculations
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;viewBox.width&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;y&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;viewBox.height&lt;/span&gt;&lt;/code&gt; only work because our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; starts
at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(0,&lt;/span&gt; &lt;span class="pre"&gt;0)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Say we had an application that also allowed for panning and zooming of the
canvas itself then the chances are our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewBox&lt;/span&gt;&lt;/code&gt; would not be starting at
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(0,&lt;/span&gt; &lt;span class="pre"&gt;0)&lt;/span&gt;&lt;/code&gt; and we would have to include an offset in our calculations to reflect
this. This means for the general case our code should probably look something
like this&lt;/p&gt;
&lt;div class="highlight-js notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m sure there are more edge cases and considerations to think of but this post
is long enough already! - Perhaps this is why people use libraries for this kind
of thing 🤔…&lt;/p&gt;
&lt;p&gt;I will leave you with the final version of the code that went into the demo you
saw at the start of this blog post so you can see it all in context. Hopefully
you found this useful and I’ll see you in the next one!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2019/click-drag-vanilla-js/" rel="alternate"/>
    <summary>This post makes use of a number of interactive elements to help illustrate a few
concepts. Unfortunately these do not yet work on mobile devices - sorry mobile
users!I have for quite some time now wanted to play around with web development some
more, particularly using web technologies to build user interfaces of some
kind. However there is just so much out there it’s been impossible for me to
really get anywhere past a “Hello, World!” tutorial before I find myself trying
out the next new shiny.So I’ve decided to abandon everything and try a bottom up approach where I see
how far I can push the core web technologies - HTML, CSS and
JavaScript. Hopefully then by the time I start using one of the gazillion
libraries out there I will have a better understanding of why I
needed it in the first place.In this post I will be looking at implementing clicking and dragging
functionality using only vanilla JavaScript. Clicking and dragging as a concept
can apply to many kinds of interactions so in this instance I’m specifically
referring to clicking on an SVG element moving it around on the page as
illustrated by the demo above.</summary>
    <category term="js" label="js"/>
    <category term="svg" label="svg"/>
    <category term="web" label="web"/>
    <published>2019-07-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2019/til-python-cmd/</id>
    <title>TIL: Python has a cmd module</title>
    <updated>2019-01-05T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="til-python-has-a-cmd-module"&gt;

&lt;p&gt;Today I Learned that Python’s standard library has a &lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;cmd&lt;/a&gt; module and it is &lt;em&gt;awesome!&lt;/em&gt;&lt;/p&gt;
&lt;figure class="align-center" id="id1"&gt;
&lt;img alt="https://www.alcarney.me/_images/cmd_python.gif" src="https://www.alcarney.me/_images/cmd_python.gif" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Interactive program using the cmd module&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;cmd&lt;/a&gt; module contains a single class called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Cmd&lt;/span&gt;&lt;/code&gt; which handles all the
details of creating an application similar to Python’s REPL. All you need to do
is to provide some command definitions and the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Cmd&lt;/span&gt;&lt;/code&gt; class will handle the rest.&lt;/p&gt;
&lt;p&gt;In an attempt to demonstrate why I think this is so cool I’m going to walk
through the process of building the application you see in the screencast above.&lt;/p&gt;
&lt;p&gt;The example application we’re going to create is a very basic REPL for a passion
project of mine called &lt;a class="reference external" href="https://github.com/alcarney/stylo"&gt;stylo&lt;/a&gt;. Stylo is a Python library that allows you to draw
images and create animations using code and some mathematics. The application
will expose some of the basic shapes available and for the “Print” part of the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Read%25E2%2580%2593eval%25E2%2580%2593print%5Floop"&gt;REPL&lt;/a&gt; it will show a preview of your image.&lt;/p&gt;
&lt;p&gt;My main focus for this post is the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmd&lt;/span&gt;&lt;/code&gt; module which means I’m not going to go
into any of the specifics of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stylo&lt;/span&gt;&lt;/code&gt; or how to use it. If you want to know more
about it I will point you in the direction of the &lt;a class="reference external" href="https://stylo.readthedocs.io/"&gt;documentation&lt;/a&gt;
(under construction) and the &lt;a class="reference external" href="https://alcarney.github.io/stylo-doodles"&gt;example gallery&lt;/a&gt;&lt;/p&gt;
&lt;section id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To start with we’re going to create a virtual environment and install &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stylo&lt;/span&gt;&lt;/code&gt;
into it. This will also install &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib&lt;/span&gt;&lt;/code&gt; which we will be using later on.
I’m using Python 3.7 but this application should work on all versions of Python
≥ 3.5.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;env
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;env/bin/activate
&lt;span class="gp gp-VirtualEnv"&gt;(env)&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;stylo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmd&lt;/span&gt;&lt;/code&gt; module is available for &lt;a class="reference external" href="https://docs.python.org/2.7/library/cmd.html"&gt;even older&lt;/a&gt; versions of
Python. However we are limited by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stylo&lt;/span&gt;&lt;/code&gt; which only supports Python 3.5+&lt;/p&gt;
&lt;p&gt;With the dependencies out of the way we can create a file called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stylo-cmd.py&lt;/span&gt;&lt;/code&gt;
and start writing some code!&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the bare minimum required to get something we can start playing with.
If you were to run &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;stylo-cmd.py&lt;/span&gt;&lt;/code&gt; you would see the following prompt
which comes with a single built-in command &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;help&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Cmd) help

Documented commands (type help &amp;lt;topic&amp;gt;):
========================================
help
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;Ctrl&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;C&lt;/kbd&gt;&lt;/kbd&gt; will exit the application. Obviously this is pretty useless right now
so let’s look at adding in some commands of our own.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="adding-commands"&gt;
&lt;h2&gt;Adding Commands&lt;/h2&gt;
&lt;p&gt;Any method on our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;StyloPrompt&lt;/span&gt;&lt;/code&gt; class with a name of the form &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;do_*&lt;/span&gt;&lt;/code&gt; is
considered a command, with the command name given by whatever is after the
underscore.  To get ourselves warmed up let’s add two commands &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;reset&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;save&lt;/span&gt;&lt;/code&gt; which will allow us to create a fresh image and save it to a file.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stylo.image&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LayeredImage&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LayeredImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LayeredImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see each command receives its arguments as a single string and
it is up to the method to handle them - including conversions to appropriate
data types as is the case with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;width&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;height&lt;/span&gt;&lt;/code&gt; arguments. For the sake
of being brief proper error handling has been omitted.&lt;/p&gt;
&lt;p&gt;Now if we were to fire up the application we would be able to produce an image!&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Cmd) reset
(Cmd) save 1920 1080 image.png
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Of course this image is currently empty so next we should add the ability for
the user to place shapes on the image. We’ll create two more commands &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;circle&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;square&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stylo.color&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FillColor&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stylo.shape&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Square&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FillColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FillColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now when we use the application we can create something a bit more
interesting than a snowman in a blizzard!&lt;/p&gt;
&lt;figure class="align-center" id="id2"&gt;
&lt;img alt="https://www.alcarney.me/_images/dice.png" src="https://www.alcarney.me/_images/dice.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Number 3 on a dice&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Cmd) square 0 0 1.75 000000
(Cmd) circle 0 0 0.3 ffffff
(Cmd) circle -0.5 0.5 0.3 ffffff
(Cmd) circle 0.5 -0.5 0.3 ffffff
(Cmd) save 1920 1080 image.png
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="getting-help"&gt;
&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;p&gt;Now that we have a few commands available we need to tell users how they can be
used. If we were to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;help&lt;/span&gt;&lt;/code&gt; command we would see something like the
following.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Cmd) help

Documented commands (type help &amp;lt;topic&amp;gt;):
========================================
help

Undocumented commands:
======================
circle reset save square
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Not very helpful.&lt;/p&gt;
&lt;p&gt;Thankfully the default help system doesn’t require much to get started, all we
have to do is add docstrings to our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;do_*&lt;/span&gt;&lt;/code&gt; methods!&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;usage: circle &amp;lt;x&amp;gt; &amp;lt;y&amp;gt; &amp;lt;r&amp;gt; &amp;lt;color&amp;gt;&lt;/span&gt;

&lt;span class="sd"&gt;   This command will draw a circle centered at the coordinates (&amp;lt;x&amp;gt;, &amp;lt;y&amp;gt;)&lt;/span&gt;
&lt;span class="sd"&gt;   with radius given by &amp;lt;r&amp;gt;. The &amp;lt;color&amp;gt; argument is a 6 digit hex&lt;/span&gt;
&lt;span class="sd"&gt;   representing a color in RGB format.&lt;/span&gt;
&lt;span class="sd"&gt;   &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now if we were to run &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;help&lt;/span&gt; &lt;span class="pre"&gt;circle&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Cmd) help circle
circle &amp;lt;x&amp;gt; &amp;lt;y&amp;gt; &amp;lt;r&amp;gt; &amp;lt;color&amp;gt;

      This command will draw a circle centered at the coordinates (&amp;lt;x&amp;gt;, &amp;lt;y&amp;gt;)
      with radius given by &amp;lt;r&amp;gt;. The &amp;lt;color&amp;gt; argument is a 6 digit hex
      representing a color in RGB format.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Much better&lt;/p&gt;
&lt;/section&gt;
&lt;section id="giving-feedback"&gt;
&lt;h2&gt;Giving Feedback&lt;/h2&gt;
&lt;p&gt;Right now our program is… ok. The user can type in a few commands and they
can create some images, but it’s not much of a step up from using the library
as they still have to wait until they have saved their image before
they can view it. Add in the fact that our program isn’t that flexible they may
as well be using the library directly.&lt;/p&gt;
&lt;p&gt;If only there was some way we could show the user their image as they build it
up a command at a time…&lt;/p&gt;
&lt;p&gt;Enter &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;postcmd&lt;/span&gt;&lt;/code&gt;! This handy method is called each time our program has
processed a command - we can use this to redraw the image each time.
Then “all” we have to do if find a way to display the current image to the user.&lt;/p&gt;
&lt;p&gt;After some searching and head scratching I was able to come up with the
following &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib&lt;/span&gt;&lt;/code&gt; incantation to add our image to a figure and display it.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;

      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xaxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_yaxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;postcmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

      &lt;span class="c1"&gt;# Re-render the image&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# Update the preview&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I won’t go into too much detail here but I will point out a few things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stop&lt;/span&gt;&lt;/code&gt; argument to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;postcmd&lt;/span&gt;&lt;/code&gt; indicates whether the previous command
wanted to exit the program (by returning &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt;). We have the option of
overriding that by not returning &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt;. But in our case we will just pass
the message on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Matplotlib is smart enough to use an existing window when calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;show()&lt;/span&gt;&lt;/code&gt; on
a figure so all we have to do is update the plot in the axis object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init__&lt;/span&gt;&lt;/code&gt; method we are disabling the scale on the axis so that the
user doesn’t see something that looks like a graph.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="finishing-touches"&gt;
&lt;h2&gt;Finishing Touches&lt;/h2&gt;
&lt;p&gt;With most of the functionality out of the way we can look at tweaking
some things to make the overall experience nicer.&lt;/p&gt;
&lt;section id="exiting-the-program"&gt;
&lt;h3&gt;Exiting the Program&lt;/h3&gt;
&lt;p&gt;So far we don’t have a clean way to close the program, we can hit &lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;Ctrl&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;C&lt;/kbd&gt;&lt;/kbd&gt; to
terminate the script but it results in Python printing a traceback and it looks
like an error in our program more than anything.&lt;/p&gt;
&lt;p&gt;Instead we can override the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;default&lt;/span&gt;&lt;/code&gt; method on our class. This method is
called whenever the program doesn’t recogise the user’s input as a valid
command and we can use it to look at all of the user’s input (not just the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;args&lt;/span&gt;&lt;/code&gt;) and decide what to do with it.&lt;/p&gt;
&lt;p&gt;In this case we will say that the program will exit whenever the user types a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;q&lt;/span&gt;&lt;/code&gt; or we receive an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EOF&lt;/span&gt;&lt;/code&gt; character (&lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;Ctrl&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;D&lt;/kbd&gt;&lt;/kbd&gt;).&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;EOF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="changing-the-prompt"&gt;
&lt;h3&gt;Changing the Prompt&lt;/h3&gt;
&lt;p&gt;We can change the default prompt &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(Cmd)&lt;/span&gt;&lt;/code&gt; by setting the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;prompt&lt;/span&gt;&lt;/code&gt; attribute on
our class.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPromt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;gt; &amp;quot;&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="greeting-the-user"&gt;
&lt;h3&gt;Greeting the User&lt;/h3&gt;
&lt;p&gt;Currently when our program starts it simply shows them the prompt, which if
they are using it for the first time they probably won’t know where to start.
To help them get started we can set the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;intro&lt;/span&gt;&lt;/code&gt; attribute to contain a welcome
message.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stylo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="n"&gt;intro_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;Interactive Shell for Stylo v&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;
&lt;span class="s2"&gt;----------------------------------&lt;/span&gt;

&lt;span class="s2"&gt;Type `q` or `Ctrl-D` to quit.&lt;/span&gt;
&lt;span class="s2"&gt;Type `help` or `?` for an overview `help &amp;lt;command&amp;gt;` for more details.&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StyloPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intro_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now when the user starts the program they should have enough information to
continue from there.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Interactive Shell for Stylo v0.9.1
----------------------------------

Type `q` or `Ctrl-D` to quit.
Type `help` or `?` for an overview `help &amp;lt;command&amp;gt;` for more details.

-&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are also &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doc_header&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;misc_header&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;undoc_header&lt;/span&gt;&lt;/code&gt; that you can set
to include even more information at different points in your program. You can
refer to the &lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;docs&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;I can’t believe I only just found out about this module. I hope you found this
as useful as I did and I strongly encourage you to take a look at the
&lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;docs&lt;/a&gt; as there are features there that I didn’t get around to
mentioning - such as completion!&lt;/p&gt;
&lt;p&gt;For those interested the final version of this program (with a few minor
tweaks) is available as a &lt;a class="reference external" href="https://gist.github.com/alcarney/2f58820dd7a7c999197a450cf2069954"&gt;Gist&lt;/a&gt; on Github. I think what I like most
about this module is that it requires very little code before you start seeing
real results - Our entire application is only 155 lines of code!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2019/til-python-cmd/" rel="alternate"/>
    <summary>Today I Learned that Python’s standard library has a cmd module and it is awesome!</summary>
    <category term="cli" label="cli"/>
    <category term="python" label="python"/>
    <category term="stylo" label="stylo"/>
    <category term="til" label="til"/>
    <published>2019-01-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2018/introducing-stylo-doodles/</id>
    <title>Introducing Stylo Doodles!</title>
    <updated>2018-10-12T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="introducing-stylo-doodles"&gt;

&lt;p&gt;A few weeks back at &lt;a class="reference external" href="https://2018.pyconuk.org/"&gt;PyConUK&lt;/a&gt; I gave my first &lt;a class="reference external" href="https://youtu.be/F5jSUJVymXk?t=3480"&gt;lighting talk&lt;/a&gt;
at a conference. During that talk I spoke publically about &lt;a class="reference external" href="https://github.com/alcarney/stylo"&gt;stylo&lt;/a&gt; for
the first time. Stylo is a Python library that I have been working on for just
over a year and a half and it aims to make the creation of images easier by
bringing together ideas from programming and mathematics.&lt;/p&gt;
&lt;p&gt;Version &lt;a class="reference external" href="https://alcarney.github.io/stylo/changes.html"&gt;0.6.0&lt;/a&gt; was recently released which included the first feature
that wasn’t written by me! It’s very exciting not only to see other people
starting to take an interest in the project but taking the time to make a
contribution!&lt;/p&gt;
&lt;p&gt;Now that stylo seems to be getting to the point that it might me useful to
other people wouldn’t it be great if there was a community driven example
gallery that people could get inspired by? - Well now there is! And it’s
called &lt;a class="reference external" href="https://alcarney.github.io/stylo-doodles"&gt;Stylo Doodles&lt;/a&gt;&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="https://www.alcarney.me/_images/stylo-doodles.png" src="https://www.alcarney.me/_images/stylo-doodles.png" /&gt;
&lt;/figure&gt;
&lt;p&gt;All the examples are written as a &lt;a class="reference external" href="https://jupyter.org"&gt;Jupyter Notebook&lt;/a&gt; and can be submitted to the
gallery by opening a pull request against the stylo-doodles &lt;a class="reference external" href="https://github.com/alcarney/stylo-doodles"&gt;repository&lt;/a&gt;. A small
python application is then run that builds the website and pushes the update to
the live website.&lt;/p&gt;
&lt;section id="current-features"&gt;
&lt;h2&gt;Current Features&lt;/h2&gt;
&lt;p&gt;The gallery website is very new but it currently has the following features&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;All images are displayed in a grid on the homepage with the order randomly
chosen each time the website is built.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each image has its own page (as shown above) which displays the full
resolution image along with information about the author, image and the
version of stylo used to generate it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The source code from the notebook is extracted and is also displayed
alongside the image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also play around with any example &lt;strong&gt;live in your browser&lt;/strong&gt; if you
follow the &lt;a class="reference external" href="https://mybinder.org/v2/gh/alcarney/stylo-doodles/master"&gt;binder&lt;/a&gt; link in the repository’s README.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="adding-your-own-example"&gt;
&lt;h2&gt;Adding Your Own Example&lt;/h2&gt;
&lt;p&gt;If you have an image that you would like to share there are only a couple of
things you need to do:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Your image &lt;strong&gt;must&lt;/strong&gt; be stored in a variable called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;image&lt;/span&gt;&lt;/code&gt;. The build process
will &lt;a class="reference external" href="https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Importing%2520Notebooks.html"&gt;import your notebook&lt;/a&gt; as a Python module and look for a variable called
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;image&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You also need to provide some additional information to the build system
about your example in the form of a Python dictionary. This dictionary
&lt;strong&gt;must&lt;/strong&gt; be called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;info&lt;/span&gt;&lt;/code&gt; and it must be in &lt;strong&gt;very first cell of the notebook&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jack-O-Lantern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alex Carney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;github_username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alcarney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;stylo_version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.6.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;dimensions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stylo_version&lt;/span&gt;&lt;/code&gt; field should be set to the value of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stylo.__version__&lt;/span&gt;&lt;/code&gt;
at the time you created your image. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dimensions&lt;/span&gt;&lt;/code&gt; is tuple of the form
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(width,&lt;/span&gt; &lt;span class="pre"&gt;height)&lt;/span&gt;&lt;/code&gt; and will be used by the build system to determine the size
of the image (in pixels) when it renders the full size copy for its detail
page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once your example is ready open a pull request adding your notebook to the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;notebooks/&lt;/span&gt;&lt;/code&gt; folder to the repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Be sure to check out the existing &lt;a class="reference external" href="https://github.com/alcarney/stylo-doodles/tree/master/notebooks"&gt;examples&lt;/a&gt; to use as a guide or drop by the
stylo &lt;a class="reference external" href="https://gitter.im/stylo-py/Lobby"&gt;Gitter&lt;/a&gt; room if you get stuck we’ll be more than happy to help!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="future-developments"&gt;
&lt;h2&gt;Future Developments&lt;/h2&gt;
&lt;p&gt;Stylo Doodles is far from finished aside from adding examples there are many
more things that could be added to the website:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;User profiles:&lt;/strong&gt; A page for every author, which lists the examples they
have contributed to the gallery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Search&lt;/strong&gt;: As the number of images grow users would probably want to be able
to tag their images and be able to narrow down the list of images on the
homepage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Recently Added:&lt;/strong&gt; Since the order of the homepage is random, as the number
of images increases the chance of a new image being buried at the bottom will
also increase, it would be good to have a way of sorting the images by date
added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Descriptions:&lt;/strong&gt; Jupyter Notebooks support more than just code. Cells
containing markdown can be placed in between code cells to provide extra
context and explanation. It would be great if we could include these on the
site as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are looking for a web based python project to get involved with this
would be a great one to get started with and I would be more than happy to have
a few contribuitors to work on this (or even stylo itself!) with me.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2018/introducing-stylo-doodles/" rel="alternate"/>
    <summary>A few weeks back at PyConUK I gave my first lighting talk
at a conference. During that talk I spoke publically about stylo for
the first time. Stylo is a Python library that I have been working on for just
over a year and a half and it aims to make the creation of images easier by
bringing together ideas from programming and mathematics.Version 0.6.0 was recently released which included the first feature
that wasn’t written by me! It’s very exciting not only to see other people
starting to take an interest in the project but taking the time to make a
contribution!Now that stylo seems to be getting to the point that it might me useful to
other people wouldn’t it be great if there was a community driven example
gallery that people could get inspired by? - Well now there is! And it’s
called Stylo Doodles</summary>
    <category term="python" label="python"/>
    <category term="stylo" label="stylo"/>
    <published>2018-10-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://www.alcarney.me/blog/2018/first-article/</id>
    <title>I’ve Started a Blog… Again!</title>
    <updated>2018-09-22T00:00:00+00:00</updated>
    <author>
      <name>Alex Carney</name>
    </author>
    <content type="html">&lt;section id="i-ve-started-a-blog-again"&gt;

&lt;p&gt;Not that you would have known it, but I’ve had a blog since 2014.  Well 2015 if
you’re feeling generous, the first (and only) post went up in the last few
hours of New Year’s Eve. It was a look back on some of the projects I had
worked on that year and I announced my intentions to start blogging.&lt;/p&gt;
&lt;p&gt;Fast forward nearly 4 years and here I am announcing my intentions to start
blogging - &lt;strong&gt;again&lt;/strong&gt;. So I guess you are wondering what happened?&lt;/p&gt;
&lt;p&gt;I got lost.&lt;/p&gt;
&lt;p&gt;My first attempt at running a blog was using &lt;a class="reference external" href="https://jekyllrb.com"&gt;Jekyll&lt;/a&gt; and for some mystical reason
(It’s been so long I can’t actually remember why), I decided that it was not the
static site generator I was looking for. So I promptly set off on a voyage of
discovery in search of the ultimate static site generator.&lt;/p&gt;
&lt;p&gt;Here is a list of some of the other static site generators I have played with
over the years in no particular order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.metalsmith.io/"&gt;Metalsmith&lt;/a&gt;: Written in Javascript, this one appealed to me with
its “everything is a plugin” approach. In theory I should be able to add any
feature I wanted simply by finding/writing the right plugin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt;: I was going through a Haskell phase and I thought it would
be a great idea to have my blog powered with it as well. &lt;strong&gt;Haskell all the
things!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.sphinx-doc.org"&gt;Sphinx&lt;/a&gt;: Sphinx is an awesome tool for writing
documentation. A big part of that is &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt;, add in the &lt;a class="reference external" href="https://ablog.readthedocs.io/"&gt;ABlog&lt;/a&gt;
extension and you should have a great setup for a blog.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;: However as Sphinx is primarily built
for documentation projects, I found that I was fighting it more
than anything. That led me to take a look at Pelican and Nikola, both written
in Python and have support for reStructuredText and
&lt;a class="reference external" href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://vuepress.vuejs.org/"&gt;Vuepress&lt;/a&gt;: Having played around a bit with &lt;a class="reference external" href="https://vuejs.org/"&gt;VueJS&lt;/a&gt;, the
thought of being able to take a dynamic site written in a powerful frontend
framework and make a static site out of it seemed appealing. The best of both
worlds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;: Who &lt;strong&gt;doesn’t&lt;/strong&gt; want a static site generator written in Go? :)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="https://orgmode.org/"&gt;org-mode&lt;/a&gt;: Yes, &lt;a class="reference external" href="https://orgmode.org/worg/org-blog-wiki.html"&gt;you can&lt;/a&gt; use emacs
as a static site generator.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point you might be wondering what was wrong with all of the above so
that after nearly 4 years of tinkering I still had nothing to show for it?&lt;/p&gt;
&lt;p&gt;Nothing. Absolutely nothing.&lt;/p&gt;
&lt;p&gt;The problem was with me. I wanted complete control over the output, from the
contents of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;/code&gt; to the CSS styling of links. There would always
be a point where I would start fighting against the very abstractions
designed to make my life easier! It got to the point where I even tried writing
my own static site generator…&lt;/p&gt;
&lt;section id="a-new-perspective"&gt;
&lt;h2&gt;A New Perspective&lt;/h2&gt;
&lt;p&gt;After endless hours lost fiddling with scripts and stylesheets I stumbled
across a quote on the internet that would snap me out of my spiral of perpetual
procrastination.&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;div&gt;&lt;p&gt;The technology you use &lt;strong&gt;impresses no one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The experience you create with it is &lt;strong&gt;everything&lt;/strong&gt;. – &lt;a class="reference external" href="https://twitter.com/ideakitchn?lang=en"&gt;Sean Gerety&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I have found myself saying this again and again, so much so that I think it may
have fundamentally altered the way I think about programming. I fell into a
trap of getting caught up in the merits of the technology for the sake of the
technology itself and lost sight of the experience - the blog itself.&lt;/p&gt;
&lt;p&gt;Rejuvenated I’ve gone back to where it all started and have started using &lt;a class="reference external" href="https://jekyllrb.com"&gt;Jekyll&lt;/a&gt;
again. I’m using the &lt;a class="reference external" href="https://fongandrew.github.io/hydeout/"&gt;Hydeout&lt;/a&gt; theme as it’s built in a way that allows me to make
a few (minor!) tweaks of my own. Within a few hours I was already working on the
draft that became this blog post, a place I never even got to in most of my
previous attempts.&lt;/p&gt;
&lt;p&gt;It turns out that Markdown is a perfectly acceptable format for a blog. You
don’t have to engineer your blog’s theme from the ground up especially when a
prebuilt theme exists in the style you were going to build yourself anyway. It
doesn’t matter that your blog can seamlessly format a Jupyter Notebook as a
regular blog post when you don’t have any notebooks to publish in the first
place…&lt;/p&gt;
&lt;p&gt;What matters is the content itself, that you have something interesting to say
and you have some way of making that available to other people. Everything else
is just an implementation detail, which if done right is invisible to the
consumers of your content anyway.&lt;/p&gt;
&lt;p&gt;It’s strange that I had learn something that is probably obvious to most people
the hard way but I’m here now. If you are reading this then things are looking
up but I can’t quite declare victory as I’m no further forward than I was 4
years ago, first let’s see if I make it to blog post number #2…&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/blog/blog/blog/2018/first-article.rst&lt;/span&gt;, line 119); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “jekyll”.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://www.alcarney.me/blog/2018/first-article/" rel="alternate"/>
    <summary>Not that you would have known it, but I’ve had a blog since 2014.  Well 2015 if
you’re feeling generous, the first (and only) post went up in the last few
hours of New Year’s Eve. It was a look back on some of the projects I had
worked on that year and I announced my intentions to start blogging.Fast forward nearly 4 years and here I am announcing my intentions to start
blogging - again. So I guess you are wondering what happened?I got lost.My first attempt at running a blog was using Jekyll and for some mystical reason
(It’s been so long I can’t actually remember why), I decided that it was not the
static site generator I was looking for. So I promptly set off on a voyage of
discovery in search of the ultimate static site generator.</summary>
    <category term="blogging" label="blogging"/>
    <published>2018-09-22T00:00:00+00:00</published>
  </entry>
</feed>
