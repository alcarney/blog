<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Alex Carney</title>
    <link>https://www.alcarney.me/blog/</link>
    <description>Recent content in Blogs on Alex Carney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alcarney.me/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a CPython Extension</title>
      <link>https://www.alcarney.me/blog/2021/ast-python-frontend/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2021/ast-python-frontend/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.alcarney.me/blog/2020/ast-simple-eval/&#34;&gt;Previously&lt;/a&gt;, as part of my exploration
into how programming languages are implemented, I wrote a very simple AST
evaluator that knew how to add and multiply floats together. Since constructing
these ASTs by hand is quite painful I thought it would be fun to come up with a
frontend to my &amp;ldquo;programming language&amp;rdquo; which could do it for me.&lt;/p&gt;
&lt;p&gt;Now your typical frontend would be some kind of parser built into the
compiler/interpreter. However, while I&amp;rsquo;m definitely interested in parsing I
don&amp;rsquo;t quite feel like tackling that just yet. Instead I&amp;rsquo;m going to have Python
be the frontend and embed my toy language into it via a &lt;a href=&#34;https://docs.python.org/3/extending/extending.html&#34;&gt;CPython
Extension&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evaluating a Simple Abstract Syntax Tree</title>
      <link>https://www.alcarney.me/blog/2020/ast-simple-eval/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2020/ast-simple-eval/</guid>
      <description>&lt;p&gt;Programming languages and their implementation is a topic I&amp;rsquo;ve been interested
in for a long time and I thought it would be worth trying to get a bit more
hands on and play with some of the ideas in this space. Choosing a topic
somewhat at random I&amp;rsquo;ve chosen to take a look at implementing an Abstract Syntax
Tree (AST).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Passing strings between TinyGo and JavaScript</title>
      <link>https://www.alcarney.me/blog/2020/passing-strings-between-tinygo-wasm/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2020/passing-strings-between-tinygo-wasm/</guid>
      <description>&lt;p&gt;After getting a &lt;a href=&#34;https://www.alcarney.me/blog/2020/hello-world-tinygo-wasm/&#34;&gt;&amp;ldquo;Hello, World!&amp;quot;&lt;/a&gt; WebAssembly
application working I thought it would be fun to try and implement a toy programming
language in the browser. However before I could even start thinking about parsers,
abstract syntax trees and the like I had to be able to pass strings between my
WebAssembly module and the surrounding JavaScript.&lt;/p&gt;
&lt;p&gt;Turns out that is much trickier than I expected.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Saying &#39;Hello, World!&#39; with TinyGo and WebAssembly</title>
      <link>https://www.alcarney.me/blog/2020/hello-world-tinygo-wasm/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2020/hello-world-tinygo-wasm/</guid>
      <description>&lt;p&gt;WebAssembly is something I&amp;rsquo;ve wanted to play with for quite a while now and
I&amp;rsquo;ve finally got around to taking a look at it. In this post I describe how I
managed to use &lt;a href=&#34;https://tinygo.org/&#34;&gt;TinyGo&lt;/a&gt; to compile a &amp;ldquo;Hello, World!&amp;rdquo; Go program into
WebAssembly and execute it in the browser. So that I have something to refer
back to I also describe setting up my development environment as a container
using &lt;a href=&#34;https://linuxcontainers.org/&#34;&gt;LXD&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learning Vulkan: Enumerating Physical Devices</title>
      <link>https://www.alcarney.me/blog/2020/learning-vulkan-p1/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2020/learning-vulkan-p1/</guid>
      <description>&lt;p&gt;Being an API for talking to GPUs and other compute devices every Vulkan
program starts off by looking for an appropriate &lt;a href=&#34;https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDevice.html&#34;&gt;physical device&lt;/a&gt;
to use. In this post I write a little C program that initialises the Vulkan
API and lists out the available devices in the system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;$ vkdevice
Device Name:            Intel(R) HD Graphics 520 (Skylake GT2)
  Type:                 Integrated GPU
  Vendor ID:            32902
  Device ID:            6422
  API Version:          v1.1.102
  Driver Version:       v19.3.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Vulkan: Overview</title>
      <link>https://www.alcarney.me/blog/2020/learning-vulkan-p0/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2020/learning-vulkan-p0/</guid>
      <description>&lt;p&gt;I have always been interested in graphics and have on numerous occasions tried
to dip my toe into the world of OpenGL and more recently Vulkan. However I have
never been able to get past the &amp;ldquo;Hello, World&amp;rdquo; of these technologies - drawing a
triangle on screen, I think mostly becuase I never really had a goal in mind
once I got that far&amp;hellip;&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s (hopefully) about to change! What better excuse than a new decade to
jump back into this world for the 100th time and try to get to all those
interesting ideas I see people playing with all the time!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing Click &amp; Drag with Vanilla JS</title>
      <link>https://www.alcarney.me/blog/2019/click-drag-vanilla-js/</link>
      <pubDate>Sun, 07 Jul 2019 21:24:00 +0100</pubDate>
      
      <guid>https://www.alcarney.me/blog/2019/click-drag-vanilla-js/</guid>
      <description>&lt;figure&gt;
  &lt;div id=&#34;main&#34;&gt;&lt;/div&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Try clicking and dragging on this circle.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://www.alcarney.me/js/click-drag.js&#34;&gt;&lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post makes use of a number of interactive elements to help illustrate a few
concepts. Unfortunately these do not yet work on mobile devices - sorry mobile
users!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have for quite some time now wanted to play around with web development some
more, particularly using web technologies to build user interfaces of some
kind. However there is just &lt;strong&gt;so much&lt;/strong&gt; out there it&amp;rsquo;s been impossible for me to
really get anywhere past a &amp;ldquo;Hello, World!&amp;rdquo; tutorial before I find myself trying
out the next new shiny.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;ve decided to abandon everything and try a bottom up approach where I see
how far I can push the core web technologies - HTML, CSS and
JavaScript. Hopefully then by the time I start using one of the gazillion
libraries out there I will have a better understanding of why I
needed it in the first place.&lt;/p&gt;
&lt;p&gt;In this post I will be looking at implementing clicking and dragging
functionality using only vanilla JavaScript. Clicking and dragging as a concept
can apply to many kinds of interactions so in this instance I&amp;rsquo;m specifically
referring to clicking on an SVG element moving it around on the page as
illustrated by the demo above.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TIL: Python has a cmd module</title>
      <link>https://www.alcarney.me/blog/2019/til-python-cmd/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2019/til-python-cmd/</guid>
      <description>&lt;p&gt;Today I Learned that Python&amp;rsquo;s standard library has a &lt;a href=&#34;https://docs.python.org/3/library/cmd.html&#34;&gt;cmd&lt;/a&gt; module and it is &lt;em&gt;awesome!&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://www.alcarney.me/images/cmd_python.gif&#34;&gt;
    &lt;img src=&#34;https://www.alcarney.me/images/cmd_python.gif&#34;
         alt=&#34;Interactive program using the cmd module.&#34;/&gt; &lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;Interactive program using the cmd module.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Introducing Stylo Doodles!</title>
      <link>https://www.alcarney.me/blog/2018/introducing-stylo-doodles/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2018/introducing-stylo-doodles/</guid>
      <description>&lt;p&gt;A few weeks back at &lt;a href=&#34;https://2018.pyconuk.org/&#34;&gt;PyConUK&lt;/a&gt; I gave my first &lt;a href=&#34;https://youtu.be/F5jSUJVymXk?t=3480&#34;&gt;lighting talk&lt;/a&gt;
at a conference. During that talk I spoke publically about &lt;a href=&#34;https://github.com/alcarney/stylo&#34;&gt;stylo&lt;/a&gt; for
the first time. Stylo is a Python library that I have been working on for just
over a year and a half and it aims to make the creation of images easier by
bringing together ideas from programming and mathematics.&lt;/p&gt;
&lt;p&gt;Version &lt;a href=&#34;https://alcarney.github.io/stylo/changes.html&#34;&gt;0.6.0&lt;/a&gt; was recently released which included the first feature
that wasn&amp;rsquo;t written by me! It&amp;rsquo;s very exciting not only to see other people
starting to take an interest in the project but taking the time to make a
contribution!&lt;/p&gt;
&lt;p&gt;Now that stylo seems to be getting to the point that it might me useful to
other people wouldn&amp;rsquo;t it be great if there was a community driven example
gallery that people could get inspired by? - Well now there is! And it&amp;rsquo;s
called &lt;a href=&#34;https://alcarney.github.io/stylo-doodles&#34;&gt;Stylo Doodles&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://www.alcarney.me/images/stylo-doodles.png&#34;&gt;
    &lt;img src=&#34;https://www.alcarney.me/images/stylo-doodles.png&#34;/&gt; &lt;/a&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>I&#39;ve Started a Blog… Again!</title>
      <link>https://www.alcarney.me/blog/2018/first-article/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.alcarney.me/blog/2018/first-article/</guid>
      <description>&lt;p&gt;Not that you would have known it, but I&amp;rsquo;ve had a blog since 2014.  Well 2015 if
you&amp;rsquo;re feeling generous, the first (and only) post went up in the last few
hours of New Year&amp;rsquo;s Eve. It was a look back on some of the projects I had
worked on that year and I announced my intentions to start blogging.&lt;/p&gt;
&lt;p&gt;Fast forward nearly 4 years and here I am announcing my intentions to start
blogging - &lt;strong&gt;again&lt;/strong&gt;. So I guess you are wondering what happened?&lt;/p&gt;
&lt;p&gt;I got lost.&lt;/p&gt;
&lt;p&gt;My first attempt at running a blog was using &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; and for some mystical reason
(It&amp;rsquo;s been so long I can&amp;rsquo;t actually remember why), I decided that it was not the
static site generator I was looking for. So I promptly set off on a voyage of
discovery in search of the ultimate static site generator.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
